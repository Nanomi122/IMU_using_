
IMU_SDC_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080ec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08008200  08008200  00018200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008660  08008660  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08008660  08008660  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008660  08008660  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008660  08008660  00018660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008664  08008664  00018664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  200001d8  0800883c  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  0800883c  00020464  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a516  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d15  00000000  00000000  0002a756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a08  00000000  00000000  0002c470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007be  00000000  00000000  0002ce78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001849a  00000000  00000000  0002d636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dcdd  00000000  00000000  00045ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086b94  00000000  00000000  000537ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e20  00000000  00000000  000da344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000de164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	080081e4 	.word	0x080081e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	080081e4 	.word	0x080081e4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	4605      	mov	r5, r0
 8001114:	460c      	mov	r4, r1
 8001116:	2200      	movs	r2, #0
 8001118:	2300      	movs	r3, #0
 800111a:	4628      	mov	r0, r5
 800111c:	4621      	mov	r1, r4
 800111e:	f7ff fc4d 	bl	80009bc <__aeabi_dcmplt>
 8001122:	b928      	cbnz	r0, 8001130 <__aeabi_d2lz+0x20>
 8001124:	4628      	mov	r0, r5
 8001126:	4621      	mov	r1, r4
 8001128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800112c:	f000 b80a 	b.w	8001144 <__aeabi_d2ulz>
 8001130:	4628      	mov	r0, r5
 8001132:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001136:	f000 f805 	bl	8001144 <__aeabi_d2ulz>
 800113a:	4240      	negs	r0, r0
 800113c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001140:	bd38      	pop	{r3, r4, r5, pc}
 8001142:	bf00      	nop

08001144 <__aeabi_d2ulz>:
 8001144:	b5d0      	push	{r4, r6, r7, lr}
 8001146:	2200      	movs	r2, #0
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <__aeabi_d2ulz+0x34>)
 800114a:	4606      	mov	r6, r0
 800114c:	460f      	mov	r7, r1
 800114e:	f7ff f9c3 	bl	80004d8 <__aeabi_dmul>
 8001152:	f7ff fc99 	bl	8000a88 <__aeabi_d2uiz>
 8001156:	4604      	mov	r4, r0
 8001158:	f7ff f944 	bl	80003e4 <__aeabi_ui2d>
 800115c:	2200      	movs	r2, #0
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <__aeabi_d2ulz+0x38>)
 8001160:	f7ff f9ba 	bl	80004d8 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4630      	mov	r0, r6
 800116a:	4639      	mov	r1, r7
 800116c:	f7fe fffc 	bl	8000168 <__aeabi_dsub>
 8001170:	f7ff fc8a 	bl	8000a88 <__aeabi_d2uiz>
 8001174:	4621      	mov	r1, r4
 8001176:	bdd0      	pop	{r4, r6, r7, pc}
 8001178:	3df00000 	.word	0x3df00000
 800117c:	41f00000 	.word	0x41f00000

08001180 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001186:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <MX_GPIO_Init+0x58>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	4a13      	ldr	r2, [pc, #76]	; (80011d8 <MX_GPIO_Init+0x58>)
 800118c:	f043 0320 	orr.w	r3, r3, #32
 8001190:	6193      	str	r3, [r2, #24]
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <MX_GPIO_Init+0x58>)
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	f003 0320 	and.w	r3, r3, #32
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <MX_GPIO_Init+0x58>)
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	4a0d      	ldr	r2, [pc, #52]	; (80011d8 <MX_GPIO_Init+0x58>)
 80011a4:	f043 0304 	orr.w	r3, r3, #4
 80011a8:	6193      	str	r3, [r2, #24]
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <MX_GPIO_Init+0x58>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <MX_GPIO_Init+0x58>)
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <MX_GPIO_Init+0x58>)
 80011bc:	f043 0308 	orr.w	r3, r3, #8
 80011c0:	6193      	str	r3, [r2, #24]
 80011c2:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <MX_GPIO_Init+0x58>)
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	f003 0308 	and.w	r3, r3, #8
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]

}
 80011ce:	bf00      	nop
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	40021000 	.word	0x40021000

080011dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_I2C1_Init+0x50>)
 80011e2:	4a13      	ldr	r2, [pc, #76]	; (8001230 <MX_I2C1_Init+0x54>)
 80011e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_I2C1_Init+0x50>)
 80011e8:	4a12      	ldr	r2, [pc, #72]	; (8001234 <MX_I2C1_Init+0x58>)
 80011ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_I2C1_Init+0x50>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <MX_I2C1_Init+0x50>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <MX_I2C1_Init+0x50>)
 80011fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <MX_I2C1_Init+0x50>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <MX_I2C1_Init+0x50>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <MX_I2C1_Init+0x50>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <MX_I2C1_Init+0x50>)
 8001214:	2200      	movs	r2, #0
 8001216:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <MX_I2C1_Init+0x50>)
 800121a:	f000 fee5 	bl	8001fe8 <HAL_I2C_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001224:	f000 f8b3 	bl	800138e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200001f4 	.word	0x200001f4
 8001230:	40005400 	.word	0x40005400
 8001234:	00061a80 	.word	0x00061a80

08001238 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a15      	ldr	r2, [pc, #84]	; (80012a8 <HAL_I2C_MspInit+0x70>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d123      	bne.n	80012a0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001258:	4b14      	ldr	r3, [pc, #80]	; (80012ac <HAL_I2C_MspInit+0x74>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a13      	ldr	r2, [pc, #76]	; (80012ac <HAL_I2C_MspInit+0x74>)
 800125e:	f043 0308 	orr.w	r3, r3, #8
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <HAL_I2C_MspInit+0x74>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001270:	23c0      	movs	r3, #192	; 0xc0
 8001272:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001274:	2312      	movs	r3, #18
 8001276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	4619      	mov	r1, r3
 8001282:	480b      	ldr	r0, [pc, #44]	; (80012b0 <HAL_I2C_MspInit+0x78>)
 8001284:	f000 fd2c 	bl	8001ce0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <HAL_I2C_MspInit+0x74>)
 800128a:	69db      	ldr	r3, [r3, #28]
 800128c:	4a07      	ldr	r2, [pc, #28]	; (80012ac <HAL_I2C_MspInit+0x74>)
 800128e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001292:	61d3      	str	r3, [r2, #28]
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <HAL_I2C_MspInit+0x74>)
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012a0:	bf00      	nop
 80012a2:	3720      	adds	r7, #32
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40005400 	.word	0x40005400
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40010c00 	.word	0x40010c00

080012b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b8:	f000 fbcc 	bl	8001a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012bc:	f000 f822 	bl	8001304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c0:	f7ff ff5e 	bl	8001180 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012c4:	f7ff ff8a 	bl	80011dc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80012c8:	f000 fb28 	bl	800191c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
 while (MPU6050_Init(&hi2c1) == 1);
 80012cc:	bf00      	nop
 80012ce:	4809      	ldr	r0, [pc, #36]	; (80012f4 <main+0x40>)
 80012d0:	f000 f862 	bl	8001398 <MPU6050_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d0f9      	beq.n	80012ce <main+0x1a>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    MPU6050_Read_Yaw(&hi2c1, &MPU6050);
 80012da:	4907      	ldr	r1, [pc, #28]	; (80012f8 <main+0x44>)
 80012dc:	4805      	ldr	r0, [pc, #20]	; (80012f4 <main+0x40>)
 80012de:	f000 f943 	bl	8001568 <MPU6050_Read_Yaw>
//	    MPU6050_Read_All(&hi2c1, &MPU6050);
		sprintf(buff, "%.4f\r\n",MPU6050.Gz);
 80012e2:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <main+0x44>)
 80012e4:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80012e8:	4904      	ldr	r1, [pc, #16]	; (80012fc <main+0x48>)
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <main+0x4c>)
 80012ec:	f003 faf2 	bl	80048d4 <siprintf>
  {
 80012f0:	e7f3      	b.n	80012da <main+0x26>
 80012f2:	bf00      	nop
 80012f4:	200001f4 	.word	0x200001f4
 80012f8:	20000248 	.word	0x20000248
 80012fc:	08008200 	.word	0x08008200
 8001300:	200002b8 	.word	0x200002b8

08001304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b090      	sub	sp, #64	; 0x40
 8001308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130a:	f107 0318 	add.w	r3, r7, #24
 800130e:	2228      	movs	r2, #40	; 0x28
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f003 fb41 	bl	800499a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001326:	2301      	movs	r3, #1
 8001328:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800132a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800132e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001330:	2300      	movs	r3, #0
 8001332:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001334:	2301      	movs	r3, #1
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001338:	2302      	movs	r3, #2
 800133a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800133c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001340:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001342:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001346:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001348:	f107 0318 	add.w	r3, r7, #24
 800134c:	4618      	mov	r0, r3
 800134e:	f001 fea5 	bl	800309c <HAL_RCC_OscConfig>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001358:	f000 f819 	bl	800138e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800135c:	230f      	movs	r3, #15
 800135e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001360:	2302      	movs	r3, #2
 8001362:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800136c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	2102      	movs	r1, #2
 8001376:	4618      	mov	r0, r3
 8001378:	f002 f912 	bl	80035a0 <HAL_RCC_ClockConfig>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001382:	f000 f804 	bl	800138e <Error_Handler>
  }
}
 8001386:	bf00      	nop
 8001388:	3740      	adds	r7, #64	; 0x40
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001392:	b672      	cpsid	i
}
 8001394:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001396:	e7fe      	b.n	8001396 <Error_Handler+0x8>

08001398 <MPU6050_Init>:
const double Accel_Z_corrector = 14418.0;

uint32_t timer;

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af04      	add	r7, sp, #16
 800139e:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80013a0:	2364      	movs	r3, #100	; 0x64
 80013a2:	9302      	str	r3, [sp, #8]
 80013a4:	2301      	movs	r3, #1
 80013a6:	9301      	str	r3, [sp, #4]
 80013a8:	f107 030f 	add.w	r3, r7, #15
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	2301      	movs	r3, #1
 80013b0:	2275      	movs	r2, #117	; 0x75
 80013b2:	21d0      	movs	r1, #208	; 0xd0
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f001 f855 	bl	8002464 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	2b68      	cmp	r3, #104	; 0x68
 80013be:	d13d      	bne.n	800143c <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80013c4:	2364      	movs	r3, #100	; 0x64
 80013c6:	9302      	str	r3, [sp, #8]
 80013c8:	2301      	movs	r3, #1
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	f107 030e 	add.w	r3, r7, #14
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2301      	movs	r3, #1
 80013d4:	226b      	movs	r2, #107	; 0x6b
 80013d6:	21d0      	movs	r1, #208	; 0xd0
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 ff49 	bl	8002270 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80013de:	2307      	movs	r3, #7
 80013e0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80013e2:	2364      	movs	r3, #100	; 0x64
 80013e4:	9302      	str	r3, [sp, #8]
 80013e6:	2301      	movs	r3, #1
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	f107 030e 	add.w	r3, r7, #14
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2301      	movs	r3, #1
 80013f2:	2219      	movs	r2, #25
 80013f4:	21d0      	movs	r1, #208	; 0xd0
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f000 ff3a 	bl	8002270 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80013fc:	2300      	movs	r3, #0
 80013fe:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001400:	2364      	movs	r3, #100	; 0x64
 8001402:	9302      	str	r3, [sp, #8]
 8001404:	2301      	movs	r3, #1
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	f107 030e 	add.w	r3, r7, #14
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	2301      	movs	r3, #1
 8001410:	221c      	movs	r2, #28
 8001412:	21d0      	movs	r1, #208	; 0xd0
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 ff2b 	bl	8002270 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800141a:	2300      	movs	r3, #0
 800141c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800141e:	2364      	movs	r3, #100	; 0x64
 8001420:	9302      	str	r3, [sp, #8]
 8001422:	2301      	movs	r3, #1
 8001424:	9301      	str	r3, [sp, #4]
 8001426:	f107 030e 	add.w	r3, r7, #14
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2301      	movs	r3, #1
 800142e:	221b      	movs	r2, #27
 8001430:	21d0      	movs	r1, #208	; 0xd0
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 ff1c 	bl	8002270 <HAL_I2C_Mem_Write>
        return 0;
 8001438:	2300      	movs	r3, #0
 800143a:	e000      	b.n	800143e <MPU6050_Init+0xa6>
    }
    return 1;
 800143c:	2301      	movs	r3, #1
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <lpf_trap>:
         I have configured FS_SEL = 0. So I am dividing by 131.0
         for more details check GYRO_CONFIG Register              ****/

}
float lpf_trap(float draw_signal_value, float dpre_raw_signal_value, float dpre_filtered_value, float dfc, float dts)
{
 8001448:	b590      	push	{r4, r7, lr}
 800144a:	b08b      	sub	sp, #44	; 0x2c
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	603b      	str	r3, [r7, #0]
    float dfiltered_value = 0.0f;
 8001456:	f04f 0300 	mov.w	r3, #0
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
    float da1 = 0.0f;
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	623b      	str	r3, [r7, #32]
    float db0 = 0.0f;
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
    float db1 = 0.0f;
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
    float dwc = 0.0f;
 800146e:	f04f 0300 	mov.w	r3, #0
 8001472:	617b      	str	r3, [r7, #20]

    if (dfc < 0.0f || dts < 0.0f)
 8001474:	f04f 0100 	mov.w	r1, #0
 8001478:	6838      	ldr	r0, [r7, #0]
 800147a:	f7ff fe21 	bl	80010c0 <__aeabi_fcmplt>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d107      	bne.n	8001494 <lpf_trap+0x4c>
 8001484:	f04f 0100 	mov.w	r1, #0
 8001488:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800148a:	f7ff fe19 	bl	80010c0 <__aeabi_fcmplt>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <lpf_trap+0x50>
    {
        return dfiltered_value;
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	e05e      	b.n	8001556 <lpf_trap+0x10e>
    }

    dwc = dfc * 2 * 3.141592f; // rad/s
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	4619      	mov	r1, r3
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fb69 	bl	8000b74 <__addsf3>
 80014a2:	4603      	mov	r3, r0
 80014a4:	492e      	ldr	r1, [pc, #184]	; (8001560 <lpf_trap+0x118>)
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fc6c 	bl	8000d84 <__aeabi_fmul>
 80014ac:	4603      	mov	r3, r0
 80014ae:	617b      	str	r3, [r7, #20]
    da1 = (2.0f - dwc * dts) / (2.0f + dwc * dts);
 80014b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80014b2:	6978      	ldr	r0, [r7, #20]
 80014b4:	f7ff fc66 	bl	8000d84 <__aeabi_fmul>
 80014b8:	4603      	mov	r3, r0
 80014ba:	4619      	mov	r1, r3
 80014bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80014c0:	f7ff fb56 	bl	8000b70 <__aeabi_fsub>
 80014c4:	4603      	mov	r3, r0
 80014c6:	461c      	mov	r4, r3
 80014c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80014ca:	6978      	ldr	r0, [r7, #20]
 80014cc:	f7ff fc5a 	bl	8000d84 <__aeabi_fmul>
 80014d0:	4603      	mov	r3, r0
 80014d2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fb4c 	bl	8000b74 <__addsf3>
 80014dc:	4603      	mov	r3, r0
 80014de:	4619      	mov	r1, r3
 80014e0:	4620      	mov	r0, r4
 80014e2:	f7ff fd03 	bl	8000eec <__aeabi_fdiv>
 80014e6:	4603      	mov	r3, r0
 80014e8:	623b      	str	r3, [r7, #32]
    db0 = (dwc * dts) / (2.0f + dwc * dts);
 80014ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80014ec:	6978      	ldr	r0, [r7, #20]
 80014ee:	f7ff fc49 	bl	8000d84 <__aeabi_fmul>
 80014f2:	4603      	mov	r3, r0
 80014f4:	461c      	mov	r4, r3
 80014f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80014f8:	6978      	ldr	r0, [r7, #20]
 80014fa:	f7ff fc43 	bl	8000d84 <__aeabi_fmul>
 80014fe:	4603      	mov	r3, r0
 8001500:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fb35 	bl	8000b74 <__addsf3>
 800150a:	4603      	mov	r3, r0
 800150c:	4619      	mov	r1, r3
 800150e:	4620      	mov	r0, r4
 8001510:	f7ff fcec 	bl	8000eec <__aeabi_fdiv>
 8001514:	4603      	mov	r3, r0
 8001516:	61fb      	str	r3, [r7, #28]
    db1 = db0;
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	61bb      	str	r3, [r7, #24]
    dfiltered_value = da1 * dpre_filtered_value + db0 * draw_signal_value + db1 * dpre_raw_signal_value;
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	6a38      	ldr	r0, [r7, #32]
 8001520:	f7ff fc30 	bl	8000d84 <__aeabi_fmul>
 8001524:	4603      	mov	r3, r0
 8001526:	461c      	mov	r4, r3
 8001528:	68f9      	ldr	r1, [r7, #12]
 800152a:	69f8      	ldr	r0, [r7, #28]
 800152c:	f7ff fc2a 	bl	8000d84 <__aeabi_fmul>
 8001530:	4603      	mov	r3, r0
 8001532:	4619      	mov	r1, r3
 8001534:	4620      	mov	r0, r4
 8001536:	f7ff fb1d 	bl	8000b74 <__addsf3>
 800153a:	4603      	mov	r3, r0
 800153c:	461c      	mov	r4, r3
 800153e:	68b9      	ldr	r1, [r7, #8]
 8001540:	69b8      	ldr	r0, [r7, #24]
 8001542:	f7ff fc1f 	bl	8000d84 <__aeabi_fmul>
 8001546:	4603      	mov	r3, r0
 8001548:	4619      	mov	r1, r3
 800154a:	4620      	mov	r0, r4
 800154c:	f7ff fb12 	bl	8000b74 <__addsf3>
 8001550:	4603      	mov	r3, r0
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
//    dpre_raw_signal_value = draw_signal_value;
//    dpre_filtered_value = dfiltered_value;
    return dfiltered_value;
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001556:	4618      	mov	r0, r3
 8001558:	372c      	adds	r7, #44	; 0x2c
 800155a:	46bd      	mov	sp, r7
 800155c:	bd90      	pop	{r4, r7, pc}
 800155e:	bf00      	nop
 8001560:	40490fd8 	.word	0x40490fd8
 8001564:	00000000 	.word	0x00000000

08001568 <MPU6050_Read_Yaw>:
void MPU6050_Read_Yaw(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800156a:	b08d      	sub	sp, #52	; 0x34
 800156c:	af04      	add	r7, sp, #16
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
   // int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001572:	2364      	movs	r3, #100	; 0x64
 8001574:	9302      	str	r3, [sp, #8]
 8001576:	230e      	movs	r3, #14
 8001578:	9301      	str	r3, [sp, #4]
 800157a:	f107 0308 	add.w	r3, r7, #8
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	2301      	movs	r3, #1
 8001582:	223b      	movs	r2, #59	; 0x3b
 8001584:	21d0      	movs	r1, #208	; 0xd0
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 ff6c 	bl	8002464 <HAL_I2C_Mem_Read>


    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 800158c:	7d3b      	ldrb	r3, [r7, #20]
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	b21a      	sxth	r2, r3
 8001592:	7d7b      	ldrb	r3, [r7, #21]
 8001594:	b21b      	sxth	r3, r3
 8001596:	4313      	orrs	r3, r2
 8001598:	b21a      	sxth	r2, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44


    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0 + 1.5068 - 0.0356 + 0.0203;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe ff2c 	bl	8000404 <__aeabi_i2d>
 80015ac:	a340      	add	r3, pc, #256	; (adr r3, 80016b0 <MPU6050_Read_Yaw+0x148>)
 80015ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b2:	f7ff f8bb 	bl	800072c <__aeabi_ddiv>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4610      	mov	r0, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	a33e      	add	r3, pc, #248	; (adr r3, 80016b8 <MPU6050_Read_Yaw+0x150>)
 80015c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c4:	f7fe fdd2 	bl	800016c <__adddf3>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	a33b      	add	r3, pc, #236	; (adr r3, 80016c0 <MPU6050_Read_Yaw+0x158>)
 80015d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d6:	f7fe fdc7 	bl	8000168 <__aeabi_dsub>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	a339      	add	r3, pc, #228	; (adr r3, 80016c8 <MPU6050_Read_Yaw+0x160>)
 80015e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e8:	f7fe fdc0 	bl	800016c <__adddf3>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	6839      	ldr	r1, [r7, #0]
 80015f2:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80015f6:	f000 fa85 	bl	8001b04 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	4b34      	ldr	r3, [pc, #208]	; (80016d0 <MPU6050_Read_Yaw+0x168>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe feee 	bl	80003e4 <__aeabi_ui2d>
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	4b31      	ldr	r3, [pc, #196]	; (80016d4 <MPU6050_Read_Yaw+0x16c>)
 800160e:	f7ff f88d 	bl	800072c <__aeabi_ddiv>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	e9c7 2306 	strd	r2, r3, [r7, #24]
    timer = HAL_GetTick();
 800161a:	f000 fa73 	bl	8001b04 <HAL_GetTick>
 800161e:	4603      	mov	r3, r0
 8001620:	4a2b      	ldr	r2, [pc, #172]	; (80016d0 <MPU6050_Read_Yaw+0x168>)
 8001622:	6013      	str	r3, [r2, #0]

    DataStruct->fil_Gz = lpf_trap(DataStruct->Gz, DataStruct->pre_Gz, DataStruct->pf_Gz, 10000, dt);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800162a:	4610      	mov	r0, r2
 800162c:	4619      	mov	r1, r3
 800162e:	f7ff fa4b 	bl	8000ac8 <__aeabi_d2f>
 8001632:	4604      	mov	r4, r0
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff fa43 	bl	8000ac8 <__aeabi_d2f>
 8001642:	4605      	mov	r5, r0
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	f7ff fa3b 	bl	8000ac8 <__aeabi_d2f>
 8001652:	4606      	mov	r6, r0
 8001654:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001658:	f7ff fa36 	bl	8000ac8 <__aeabi_d2f>
 800165c:	4603      	mov	r3, r0
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <MPU6050_Read_Yaw+0x170>)
 8001662:	4632      	mov	r2, r6
 8001664:	4629      	mov	r1, r5
 8001666:	4620      	mov	r0, r4
 8001668:	f7ff feee 	bl	8001448 <lpf_trap>
 800166c:	4603      	mov	r3, r0
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe feda 	bl	8000428 <__aeabi_f2d>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	6839      	ldr	r1, [r7, #0]
 800167a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    DataStruct->yaw += DataStruct->fil_Gz * dt;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800168a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800168e:	f7fe ff23 	bl	80004d8 <__aeabi_dmul>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4620      	mov	r0, r4
 8001698:	4629      	mov	r1, r5
 800169a:	f7fe fd67 	bl	800016c <__adddf3>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	6839      	ldr	r1, [r7, #0]
 80016a4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 80016a8:	bf00      	nop
 80016aa:	3724      	adds	r7, #36	; 0x24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016b0:	00000000 	.word	0x00000000
 80016b4:	40606000 	.word	0x40606000
 80016b8:	5119ce07 	.word	0x5119ce07
 80016bc:	3ff81bda 	.word	0x3ff81bda
 80016c0:	c779a6b5 	.word	0xc779a6b5
 80016c4:	3fa23a29 	.word	0x3fa23a29
 80016c8:	f06f6944 	.word	0xf06f6944
 80016cc:	3f94c985 	.word	0x3f94c985
 80016d0:	200002c4 	.word	0x200002c4
 80016d4:	408f4000 	.word	0x408f4000
 80016d8:	461c4000 	.word	0x461c4000

080016dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <HAL_MspInit+0x5c>)
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	4a14      	ldr	r2, [pc, #80]	; (8001738 <HAL_MspInit+0x5c>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6193      	str	r3, [r2, #24]
 80016ee:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_MspInit+0x5c>)
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016fa:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <HAL_MspInit+0x5c>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	4a0e      	ldr	r2, [pc, #56]	; (8001738 <HAL_MspInit+0x5c>)
 8001700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001704:	61d3      	str	r3, [r2, #28]
 8001706:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <HAL_MspInit+0x5c>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <HAL_MspInit+0x60>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	4a04      	ldr	r2, [pc, #16]	; (800173c <HAL_MspInit+0x60>)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172e:	bf00      	nop
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	40021000 	.word	0x40021000
 800173c:	40010000 	.word	0x40010000

08001740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001744:	e7fe      	b.n	8001744 <NMI_Handler+0x4>

08001746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800174a:	e7fe      	b.n	800174a <HardFault_Handler+0x4>

0800174c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <MemManage_Handler+0x4>

08001752 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001756:	e7fe      	b.n	8001756 <BusFault_Handler+0x4>

08001758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800175c:	e7fe      	b.n	800175c <UsageFault_Handler+0x4>

0800175e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr

0800176a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr

08001776 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr

08001782 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001786:	f000 f9ab 	bl	8001ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}

0800178e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  return 1;
 8001792:	2301      	movs	r3, #1
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <_kill>:

int _kill(int pid, int sig)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017a6:	f003 f94b 	bl	8004a40 <__errno>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2216      	movs	r2, #22
 80017ae:	601a      	str	r2, [r3, #0]
  return -1;
 80017b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <_exit>:

void _exit (int status)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017c4:	f04f 31ff 	mov.w	r1, #4294967295
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff ffe7 	bl	800179c <_kill>
  while (1) {}    /* Make sure we hang here */
 80017ce:	e7fe      	b.n	80017ce <_exit+0x12>

080017d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	e00a      	b.n	80017f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017e2:	f3af 8000 	nop.w
 80017e6:	4601      	mov	r1, r0
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	60ba      	str	r2, [r7, #8]
 80017ee:	b2ca      	uxtb	r2, r1
 80017f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	3301      	adds	r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	dbf0      	blt.n	80017e2 <_read+0x12>
  }

  return len;
 8001800:	687b      	ldr	r3, [r7, #4]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b086      	sub	sp, #24
 800180e:	af00      	add	r7, sp, #0
 8001810:	60f8      	str	r0, [r7, #12]
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	e009      	b.n	8001830 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	60ba      	str	r2, [r7, #8]
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	3301      	adds	r3, #1
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	429a      	cmp	r2, r3
 8001836:	dbf1      	blt.n	800181c <_write+0x12>
  }
  return len;
 8001838:	687b      	ldr	r3, [r7, #4]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <_close>:

int _close(int file)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001868:	605a      	str	r2, [r3, #4]
  return 0;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr

08001876 <_isatty>:

int _isatty(int file)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800187e:	2301      	movs	r3, #1
}
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr

0800188a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800188a:	b480      	push	{r7}
 800188c:	b085      	sub	sp, #20
 800188e:	af00      	add	r7, sp, #0
 8001890:	60f8      	str	r0, [r7, #12]
 8001892:	60b9      	str	r1, [r7, #8]
 8001894:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr
	...

080018a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018ac:	4a14      	ldr	r2, [pc, #80]	; (8001900 <_sbrk+0x5c>)
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <_sbrk+0x60>)
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b8:	4b13      	ldr	r3, [pc, #76]	; (8001908 <_sbrk+0x64>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d102      	bne.n	80018c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <_sbrk+0x64>)
 80018c2:	4a12      	ldr	r2, [pc, #72]	; (800190c <_sbrk+0x68>)
 80018c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <_sbrk+0x64>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d207      	bcs.n	80018e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d4:	f003 f8b4 	bl	8004a40 <__errno>
 80018d8:	4603      	mov	r3, r0
 80018da:	220c      	movs	r2, #12
 80018dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018de:	f04f 33ff 	mov.w	r3, #4294967295
 80018e2:	e009      	b.n	80018f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <_sbrk+0x64>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ea:	4b07      	ldr	r3, [pc, #28]	; (8001908 <_sbrk+0x64>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	4a05      	ldr	r2, [pc, #20]	; (8001908 <_sbrk+0x64>)
 80018f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018f6:	68fb      	ldr	r3, [r7, #12]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20005000 	.word	0x20005000
 8001904:	00000400 	.word	0x00000400
 8001908:	200002c8 	.word	0x200002c8
 800190c:	20000468 	.word	0x20000468

08001910 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <MX_USART1_UART_Init+0x4c>)
 8001922:	4a12      	ldr	r2, [pc, #72]	; (800196c <MX_USART1_UART_Init+0x50>)
 8001924:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <MX_USART1_UART_Init+0x4c>)
 8001928:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800192c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800192e:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <MX_USART1_UART_Init+0x4c>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <MX_USART1_UART_Init+0x4c>)
 8001936:	2200      	movs	r2, #0
 8001938:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <MX_USART1_UART_Init+0x4c>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <MX_USART1_UART_Init+0x4c>)
 8001942:	220c      	movs	r2, #12
 8001944:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <MX_USART1_UART_Init+0x4c>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <MX_USART1_UART_Init+0x4c>)
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001952:	4805      	ldr	r0, [pc, #20]	; (8001968 <MX_USART1_UART_Init+0x4c>)
 8001954:	f001 ffb2 	bl	80038bc <HAL_UART_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800195e:	f7ff fd16 	bl	800138e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200002cc 	.word	0x200002cc
 800196c:	40013800 	.word	0x40013800

08001970 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 0310 	add.w	r3, r7, #16
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a1c      	ldr	r2, [pc, #112]	; (80019fc <HAL_UART_MspInit+0x8c>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d131      	bne.n	80019f4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001990:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <HAL_UART_MspInit+0x90>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	4a1a      	ldr	r2, [pc, #104]	; (8001a00 <HAL_UART_MspInit+0x90>)
 8001996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800199a:	6193      	str	r3, [r2, #24]
 800199c:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <HAL_UART_MspInit+0x90>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a8:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <HAL_UART_MspInit+0x90>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	4a14      	ldr	r2, [pc, #80]	; (8001a00 <HAL_UART_MspInit+0x90>)
 80019ae:	f043 0304 	orr.w	r3, r3, #4
 80019b2:	6193      	str	r3, [r2, #24]
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_UART_MspInit+0x90>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c6:	2302      	movs	r3, #2
 80019c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ca:	2303      	movs	r3, #3
 80019cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ce:	f107 0310 	add.w	r3, r7, #16
 80019d2:	4619      	mov	r1, r3
 80019d4:	480b      	ldr	r0, [pc, #44]	; (8001a04 <HAL_UART_MspInit+0x94>)
 80019d6:	f000 f983 	bl	8001ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e8:	f107 0310 	add.w	r3, r7, #16
 80019ec:	4619      	mov	r1, r3
 80019ee:	4805      	ldr	r0, [pc, #20]	; (8001a04 <HAL_UART_MspInit+0x94>)
 80019f0:	f000 f976 	bl	8001ce0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80019f4:	bf00      	nop
 80019f6:	3720      	adds	r7, #32
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40013800 	.word	0x40013800
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40010800 	.word	0x40010800

08001a08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a08:	f7ff ff82 	bl	8001910 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a0c:	480b      	ldr	r0, [pc, #44]	; (8001a3c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a0e:	490c      	ldr	r1, [pc, #48]	; (8001a40 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a10:	4a0c      	ldr	r2, [pc, #48]	; (8001a44 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a14:	e002      	b.n	8001a1c <LoopCopyDataInit>

08001a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a1a:	3304      	adds	r3, #4

08001a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a20:	d3f9      	bcc.n	8001a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a22:	4a09      	ldr	r2, [pc, #36]	; (8001a48 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a24:	4c09      	ldr	r4, [pc, #36]	; (8001a4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a28:	e001      	b.n	8001a2e <LoopFillZerobss>

08001a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a2c:	3204      	adds	r2, #4

08001a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a30:	d3fb      	bcc.n	8001a2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a32:	f003 f80b 	bl	8004a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a36:	f7ff fc3d 	bl	80012b4 <main>
  bx lr
 8001a3a:	4770      	bx	lr
  ldr r0, =_sdata
 8001a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a40:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a44:	08008668 	.word	0x08008668
  ldr r2, =_sbss
 8001a48:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001a4c:	20000464 	.word	0x20000464

08001a50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a50:	e7fe      	b.n	8001a50 <ADC1_2_IRQHandler>
	...

08001a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <HAL_Init+0x28>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a07      	ldr	r2, [pc, #28]	; (8001a7c <HAL_Init+0x28>)
 8001a5e:	f043 0310 	orr.w	r3, r3, #16
 8001a62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a64:	2003      	movs	r0, #3
 8001a66:	f000 f907 	bl	8001c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a6a:	200f      	movs	r0, #15
 8001a6c:	f000 f808 	bl	8001a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a70:	f7ff fe34 	bl	80016dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40022000 	.word	0x40022000

08001a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_InitTick+0x54>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_InitTick+0x58>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	4619      	mov	r1, r3
 8001a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 f911 	bl	8001cc6 <HAL_SYSTICK_Config>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00e      	b.n	8001acc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b0f      	cmp	r3, #15
 8001ab2:	d80a      	bhi.n	8001aca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8001abc:	f000 f8e7 	bl	8001c8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac0:	4a06      	ldr	r2, [pc, #24]	; (8001adc <HAL_InitTick+0x5c>)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	e000      	b.n	8001acc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	20000008 	.word	0x20000008
 8001adc:	20000004 	.word	0x20000004

08001ae0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <HAL_IncTick+0x1c>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_IncTick+0x20>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4413      	add	r3, r2
 8001af0:	4a03      	ldr	r2, [pc, #12]	; (8001b00 <HAL_IncTick+0x20>)
 8001af2:	6013      	str	r3, [r2, #0]
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	20000008 	.word	0x20000008
 8001b00:	20000314 	.word	0x20000314

08001b04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return uwTick;
 8001b08:	4b02      	ldr	r3, [pc, #8]	; (8001b14 <HAL_GetTick+0x10>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	20000314 	.word	0x20000314

08001b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b34:	4013      	ands	r3, r2
 8001b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4a:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	60d3      	str	r3, [r2, #12]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <__NVIC_GetPriorityGrouping+0x18>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	f003 0307 	and.w	r3, r3, #7
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	6039      	str	r1, [r7, #0]
 8001b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	db0a      	blt.n	8001ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	490c      	ldr	r1, [pc, #48]	; (8001bc8 <__NVIC_SetPriority+0x4c>)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	0112      	lsls	r2, r2, #4
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba4:	e00a      	b.n	8001bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	4908      	ldr	r1, [pc, #32]	; (8001bcc <__NVIC_SetPriority+0x50>)
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	3b04      	subs	r3, #4
 8001bb4:	0112      	lsls	r2, r2, #4
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	440b      	add	r3, r1
 8001bba:	761a      	strb	r2, [r3, #24]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000e100 	.word	0xe000e100
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b089      	sub	sp, #36	; 0x24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f1c3 0307 	rsb	r3, r3, #7
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	bf28      	it	cs
 8001bee:	2304      	movcs	r3, #4
 8001bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	2b06      	cmp	r3, #6
 8001bf8:	d902      	bls.n	8001c00 <NVIC_EncodePriority+0x30>
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3b03      	subs	r3, #3
 8001bfe:	e000      	b.n	8001c02 <NVIC_EncodePriority+0x32>
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c04:	f04f 32ff 	mov.w	r2, #4294967295
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43da      	mvns	r2, r3
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	401a      	ands	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c18:	f04f 31ff 	mov.w	r1, #4294967295
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c22:	43d9      	mvns	r1, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c28:	4313      	orrs	r3, r2
         );
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3724      	adds	r7, #36	; 0x24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c44:	d301      	bcc.n	8001c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c46:	2301      	movs	r3, #1
 8001c48:	e00f      	b.n	8001c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c4a:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <SysTick_Config+0x40>)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c52:	210f      	movs	r1, #15
 8001c54:	f04f 30ff 	mov.w	r0, #4294967295
 8001c58:	f7ff ff90 	bl	8001b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c5c:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <SysTick_Config+0x40>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c62:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <SysTick_Config+0x40>)
 8001c64:	2207      	movs	r2, #7
 8001c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	e000e010 	.word	0xe000e010

08001c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff ff49 	bl	8001b18 <__NVIC_SetPriorityGrouping>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b086      	sub	sp, #24
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	4603      	mov	r3, r0
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
 8001c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca0:	f7ff ff5e 	bl	8001b60 <__NVIC_GetPriorityGrouping>
 8001ca4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	68b9      	ldr	r1, [r7, #8]
 8001caa:	6978      	ldr	r0, [r7, #20]
 8001cac:	f7ff ff90 	bl	8001bd0 <NVIC_EncodePriority>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb6:	4611      	mov	r1, r2
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff5f 	bl	8001b7c <__NVIC_SetPriority>
}
 8001cbe:	bf00      	nop
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff ffb0 	bl	8001c34 <SysTick_Config>
 8001cd4:	4603      	mov	r3, r0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b08b      	sub	sp, #44	; 0x2c
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cea:	2300      	movs	r3, #0
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf2:	e169      	b.n	8001fc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	69fa      	ldr	r2, [r7, #28]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	f040 8158 	bne.w	8001fc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	4a9a      	ldr	r2, [pc, #616]	; (8001f80 <HAL_GPIO_Init+0x2a0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d05e      	beq.n	8001dda <HAL_GPIO_Init+0xfa>
 8001d1c:	4a98      	ldr	r2, [pc, #608]	; (8001f80 <HAL_GPIO_Init+0x2a0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d875      	bhi.n	8001e0e <HAL_GPIO_Init+0x12e>
 8001d22:	4a98      	ldr	r2, [pc, #608]	; (8001f84 <HAL_GPIO_Init+0x2a4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d058      	beq.n	8001dda <HAL_GPIO_Init+0xfa>
 8001d28:	4a96      	ldr	r2, [pc, #600]	; (8001f84 <HAL_GPIO_Init+0x2a4>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d86f      	bhi.n	8001e0e <HAL_GPIO_Init+0x12e>
 8001d2e:	4a96      	ldr	r2, [pc, #600]	; (8001f88 <HAL_GPIO_Init+0x2a8>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d052      	beq.n	8001dda <HAL_GPIO_Init+0xfa>
 8001d34:	4a94      	ldr	r2, [pc, #592]	; (8001f88 <HAL_GPIO_Init+0x2a8>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d869      	bhi.n	8001e0e <HAL_GPIO_Init+0x12e>
 8001d3a:	4a94      	ldr	r2, [pc, #592]	; (8001f8c <HAL_GPIO_Init+0x2ac>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d04c      	beq.n	8001dda <HAL_GPIO_Init+0xfa>
 8001d40:	4a92      	ldr	r2, [pc, #584]	; (8001f8c <HAL_GPIO_Init+0x2ac>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d863      	bhi.n	8001e0e <HAL_GPIO_Init+0x12e>
 8001d46:	4a92      	ldr	r2, [pc, #584]	; (8001f90 <HAL_GPIO_Init+0x2b0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d046      	beq.n	8001dda <HAL_GPIO_Init+0xfa>
 8001d4c:	4a90      	ldr	r2, [pc, #576]	; (8001f90 <HAL_GPIO_Init+0x2b0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d85d      	bhi.n	8001e0e <HAL_GPIO_Init+0x12e>
 8001d52:	2b12      	cmp	r3, #18
 8001d54:	d82a      	bhi.n	8001dac <HAL_GPIO_Init+0xcc>
 8001d56:	2b12      	cmp	r3, #18
 8001d58:	d859      	bhi.n	8001e0e <HAL_GPIO_Init+0x12e>
 8001d5a:	a201      	add	r2, pc, #4	; (adr r2, 8001d60 <HAL_GPIO_Init+0x80>)
 8001d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d60:	08001ddb 	.word	0x08001ddb
 8001d64:	08001db5 	.word	0x08001db5
 8001d68:	08001dc7 	.word	0x08001dc7
 8001d6c:	08001e09 	.word	0x08001e09
 8001d70:	08001e0f 	.word	0x08001e0f
 8001d74:	08001e0f 	.word	0x08001e0f
 8001d78:	08001e0f 	.word	0x08001e0f
 8001d7c:	08001e0f 	.word	0x08001e0f
 8001d80:	08001e0f 	.word	0x08001e0f
 8001d84:	08001e0f 	.word	0x08001e0f
 8001d88:	08001e0f 	.word	0x08001e0f
 8001d8c:	08001e0f 	.word	0x08001e0f
 8001d90:	08001e0f 	.word	0x08001e0f
 8001d94:	08001e0f 	.word	0x08001e0f
 8001d98:	08001e0f 	.word	0x08001e0f
 8001d9c:	08001e0f 	.word	0x08001e0f
 8001da0:	08001e0f 	.word	0x08001e0f
 8001da4:	08001dbd 	.word	0x08001dbd
 8001da8:	08001dd1 	.word	0x08001dd1
 8001dac:	4a79      	ldr	r2, [pc, #484]	; (8001f94 <HAL_GPIO_Init+0x2b4>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d013      	beq.n	8001dda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001db2:	e02c      	b.n	8001e0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	623b      	str	r3, [r7, #32]
          break;
 8001dba:	e029      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	623b      	str	r3, [r7, #32]
          break;
 8001dc4:	e024      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	3308      	adds	r3, #8
 8001dcc:	623b      	str	r3, [r7, #32]
          break;
 8001dce:	e01f      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	330c      	adds	r3, #12
 8001dd6:	623b      	str	r3, [r7, #32]
          break;
 8001dd8:	e01a      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d102      	bne.n	8001de8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001de2:	2304      	movs	r3, #4
 8001de4:	623b      	str	r3, [r7, #32]
          break;
 8001de6:	e013      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d105      	bne.n	8001dfc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001df0:	2308      	movs	r3, #8
 8001df2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	69fa      	ldr	r2, [r7, #28]
 8001df8:	611a      	str	r2, [r3, #16]
          break;
 8001dfa:	e009      	b.n	8001e10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dfc:	2308      	movs	r3, #8
 8001dfe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69fa      	ldr	r2, [r7, #28]
 8001e04:	615a      	str	r2, [r3, #20]
          break;
 8001e06:	e003      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	623b      	str	r3, [r7, #32]
          break;
 8001e0c:	e000      	b.n	8001e10 <HAL_GPIO_Init+0x130>
          break;
 8001e0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	2bff      	cmp	r3, #255	; 0xff
 8001e14:	d801      	bhi.n	8001e1a <HAL_GPIO_Init+0x13a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	e001      	b.n	8001e1e <HAL_GPIO_Init+0x13e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	2bff      	cmp	r3, #255	; 0xff
 8001e24:	d802      	bhi.n	8001e2c <HAL_GPIO_Init+0x14c>
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	e002      	b.n	8001e32 <HAL_GPIO_Init+0x152>
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	3b08      	subs	r3, #8
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	210f      	movs	r1, #15
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	401a      	ands	r2, r3
 8001e44:	6a39      	ldr	r1, [r7, #32]
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 80b1 	beq.w	8001fc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e60:	4b4d      	ldr	r3, [pc, #308]	; (8001f98 <HAL_GPIO_Init+0x2b8>)
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	4a4c      	ldr	r2, [pc, #304]	; (8001f98 <HAL_GPIO_Init+0x2b8>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6193      	str	r3, [r2, #24]
 8001e6c:	4b4a      	ldr	r3, [pc, #296]	; (8001f98 <HAL_GPIO_Init+0x2b8>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e78:	4a48      	ldr	r2, [pc, #288]	; (8001f9c <HAL_GPIO_Init+0x2bc>)
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	089b      	lsrs	r3, r3, #2
 8001e7e:	3302      	adds	r3, #2
 8001e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	220f      	movs	r2, #15
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a40      	ldr	r2, [pc, #256]	; (8001fa0 <HAL_GPIO_Init+0x2c0>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d013      	beq.n	8001ecc <HAL_GPIO_Init+0x1ec>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a3f      	ldr	r2, [pc, #252]	; (8001fa4 <HAL_GPIO_Init+0x2c4>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d00d      	beq.n	8001ec8 <HAL_GPIO_Init+0x1e8>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a3e      	ldr	r2, [pc, #248]	; (8001fa8 <HAL_GPIO_Init+0x2c8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d007      	beq.n	8001ec4 <HAL_GPIO_Init+0x1e4>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a3d      	ldr	r2, [pc, #244]	; (8001fac <HAL_GPIO_Init+0x2cc>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d101      	bne.n	8001ec0 <HAL_GPIO_Init+0x1e0>
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e006      	b.n	8001ece <HAL_GPIO_Init+0x1ee>
 8001ec0:	2304      	movs	r3, #4
 8001ec2:	e004      	b.n	8001ece <HAL_GPIO_Init+0x1ee>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e002      	b.n	8001ece <HAL_GPIO_Init+0x1ee>
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e000      	b.n	8001ece <HAL_GPIO_Init+0x1ee>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed0:	f002 0203 	and.w	r2, r2, #3
 8001ed4:	0092      	lsls	r2, r2, #2
 8001ed6:	4093      	lsls	r3, r2
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ede:	492f      	ldr	r1, [pc, #188]	; (8001f9c <HAL_GPIO_Init+0x2bc>)
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	089b      	lsrs	r3, r3, #2
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d006      	beq.n	8001f06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ef8:	4b2d      	ldr	r3, [pc, #180]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	492c      	ldr	r1, [pc, #176]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	608b      	str	r3, [r1, #8]
 8001f04:	e006      	b.n	8001f14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f06:	4b2a      	ldr	r3, [pc, #168]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	4928      	ldr	r1, [pc, #160]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d006      	beq.n	8001f2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f20:	4b23      	ldr	r3, [pc, #140]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	4922      	ldr	r1, [pc, #136]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	60cb      	str	r3, [r1, #12]
 8001f2c:	e006      	b.n	8001f3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f2e:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	491e      	ldr	r1, [pc, #120]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d006      	beq.n	8001f56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	4918      	ldr	r1, [pc, #96]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]
 8001f54:	e006      	b.n	8001f64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f56:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	4914      	ldr	r1, [pc, #80]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d021      	beq.n	8001fb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	490e      	ldr	r1, [pc, #56]	; (8001fb0 <HAL_GPIO_Init+0x2d0>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	600b      	str	r3, [r1, #0]
 8001f7c:	e021      	b.n	8001fc2 <HAL_GPIO_Init+0x2e2>
 8001f7e:	bf00      	nop
 8001f80:	10320000 	.word	0x10320000
 8001f84:	10310000 	.word	0x10310000
 8001f88:	10220000 	.word	0x10220000
 8001f8c:	10210000 	.word	0x10210000
 8001f90:	10120000 	.word	0x10120000
 8001f94:	10110000 	.word	0x10110000
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40010000 	.word	0x40010000
 8001fa0:	40010800 	.word	0x40010800
 8001fa4:	40010c00 	.word	0x40010c00
 8001fa8:	40011000 	.word	0x40011000
 8001fac:	40011400 	.word	0x40011400
 8001fb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_GPIO_Init+0x304>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	4909      	ldr	r1, [pc, #36]	; (8001fe4 <HAL_GPIO_Init+0x304>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f47f ae8e 	bne.w	8001cf4 <HAL_GPIO_Init+0x14>
  }
}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	372c      	adds	r7, #44	; 0x2c
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	40010400 	.word	0x40010400

08001fe8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e12b      	b.n	8002252 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d106      	bne.n	8002014 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff f912 	bl	8001238 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2224      	movs	r2, #36	; 0x24
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 0201 	bic.w	r2, r2, #1
 800202a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800203a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800204a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800204c:	f001 fbf0 	bl	8003830 <HAL_RCC_GetPCLK1Freq>
 8002050:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	4a81      	ldr	r2, [pc, #516]	; (800225c <HAL_I2C_Init+0x274>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d807      	bhi.n	800206c <HAL_I2C_Init+0x84>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4a80      	ldr	r2, [pc, #512]	; (8002260 <HAL_I2C_Init+0x278>)
 8002060:	4293      	cmp	r3, r2
 8002062:	bf94      	ite	ls
 8002064:	2301      	movls	r3, #1
 8002066:	2300      	movhi	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	e006      	b.n	800207a <HAL_I2C_Init+0x92>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4a7d      	ldr	r2, [pc, #500]	; (8002264 <HAL_I2C_Init+0x27c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	bf94      	ite	ls
 8002074:	2301      	movls	r3, #1
 8002076:	2300      	movhi	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e0e7      	b.n	8002252 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4a78      	ldr	r2, [pc, #480]	; (8002268 <HAL_I2C_Init+0x280>)
 8002086:	fba2 2303 	umull	r2, r3, r2, r3
 800208a:	0c9b      	lsrs	r3, r3, #18
 800208c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68ba      	ldr	r2, [r7, #8]
 800209e:	430a      	orrs	r2, r1
 80020a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	4a6a      	ldr	r2, [pc, #424]	; (800225c <HAL_I2C_Init+0x274>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d802      	bhi.n	80020bc <HAL_I2C_Init+0xd4>
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	3301      	adds	r3, #1
 80020ba:	e009      	b.n	80020d0 <HAL_I2C_Init+0xe8>
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020c2:	fb02 f303 	mul.w	r3, r2, r3
 80020c6:	4a69      	ldr	r2, [pc, #420]	; (800226c <HAL_I2C_Init+0x284>)
 80020c8:	fba2 2303 	umull	r2, r3, r2, r3
 80020cc:	099b      	lsrs	r3, r3, #6
 80020ce:	3301      	adds	r3, #1
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6812      	ldr	r2, [r2, #0]
 80020d4:	430b      	orrs	r3, r1
 80020d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	495c      	ldr	r1, [pc, #368]	; (800225c <HAL_I2C_Init+0x274>)
 80020ec:	428b      	cmp	r3, r1
 80020ee:	d819      	bhi.n	8002124 <HAL_I2C_Init+0x13c>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	1e59      	subs	r1, r3, #1
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80020fe:	1c59      	adds	r1, r3, #1
 8002100:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002104:	400b      	ands	r3, r1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00a      	beq.n	8002120 <HAL_I2C_Init+0x138>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1e59      	subs	r1, r3, #1
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	fbb1 f3f3 	udiv	r3, r1, r3
 8002118:	3301      	adds	r3, #1
 800211a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800211e:	e051      	b.n	80021c4 <HAL_I2C_Init+0x1dc>
 8002120:	2304      	movs	r3, #4
 8002122:	e04f      	b.n	80021c4 <HAL_I2C_Init+0x1dc>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d111      	bne.n	8002150 <HAL_I2C_Init+0x168>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	1e58      	subs	r0, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6859      	ldr	r1, [r3, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	440b      	add	r3, r1
 800213a:	fbb0 f3f3 	udiv	r3, r0, r3
 800213e:	3301      	adds	r3, #1
 8002140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf0c      	ite	eq
 8002148:	2301      	moveq	r3, #1
 800214a:	2300      	movne	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	e012      	b.n	8002176 <HAL_I2C_Init+0x18e>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1e58      	subs	r0, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6859      	ldr	r1, [r3, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	0099      	lsls	r1, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	fbb0 f3f3 	udiv	r3, r0, r3
 8002166:	3301      	adds	r3, #1
 8002168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800216c:	2b00      	cmp	r3, #0
 800216e:	bf0c      	ite	eq
 8002170:	2301      	moveq	r3, #1
 8002172:	2300      	movne	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_I2C_Init+0x196>
 800217a:	2301      	movs	r3, #1
 800217c:	e022      	b.n	80021c4 <HAL_I2C_Init+0x1dc>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10e      	bne.n	80021a4 <HAL_I2C_Init+0x1bc>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1e58      	subs	r0, r3, #1
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6859      	ldr	r1, [r3, #4]
 800218e:	460b      	mov	r3, r1
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	440b      	add	r3, r1
 8002194:	fbb0 f3f3 	udiv	r3, r0, r3
 8002198:	3301      	adds	r3, #1
 800219a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800219e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021a2:	e00f      	b.n	80021c4 <HAL_I2C_Init+0x1dc>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	1e58      	subs	r0, r3, #1
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6859      	ldr	r1, [r3, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	0099      	lsls	r1, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ba:	3301      	adds	r3, #1
 80021bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	6809      	ldr	r1, [r1, #0]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69da      	ldr	r2, [r3, #28]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6911      	ldr	r1, [r2, #16]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68d2      	ldr	r2, [r2, #12]
 80021fe:	4311      	orrs	r1, r2
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	430b      	orrs	r3, r1
 8002206:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695a      	ldr	r2, [r3, #20]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2220      	movs	r2, #32
 800223e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	000186a0 	.word	0x000186a0
 8002260:	001e847f 	.word	0x001e847f
 8002264:	003d08ff 	.word	0x003d08ff
 8002268:	431bde83 	.word	0x431bde83
 800226c:	10624dd3 	.word	0x10624dd3

08002270 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b088      	sub	sp, #32
 8002274:	af02      	add	r7, sp, #8
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	4608      	mov	r0, r1
 800227a:	4611      	mov	r1, r2
 800227c:	461a      	mov	r2, r3
 800227e:	4603      	mov	r3, r0
 8002280:	817b      	strh	r3, [r7, #10]
 8002282:	460b      	mov	r3, r1
 8002284:	813b      	strh	r3, [r7, #8]
 8002286:	4613      	mov	r3, r2
 8002288:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800228a:	f7ff fc3b 	bl	8001b04 <HAL_GetTick>
 800228e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b20      	cmp	r3, #32
 800229a:	f040 80d9 	bne.w	8002450 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	2319      	movs	r3, #25
 80022a4:	2201      	movs	r2, #1
 80022a6:	496d      	ldr	r1, [pc, #436]	; (800245c <HAL_I2C_Mem_Write+0x1ec>)
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 fcc1 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80022b4:	2302      	movs	r3, #2
 80022b6:	e0cc      	b.n	8002452 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d101      	bne.n	80022c6 <HAL_I2C_Mem_Write+0x56>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e0c5      	b.n	8002452 <HAL_I2C_Mem_Write+0x1e2>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d007      	beq.n	80022ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0201 	orr.w	r2, r2, #1
 80022ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2221      	movs	r2, #33	; 0x21
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2240      	movs	r2, #64	; 0x40
 8002308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6a3a      	ldr	r2, [r7, #32]
 8002316:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800231c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4a4d      	ldr	r2, [pc, #308]	; (8002460 <HAL_I2C_Mem_Write+0x1f0>)
 800232c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800232e:	88f8      	ldrh	r0, [r7, #6]
 8002330:	893a      	ldrh	r2, [r7, #8]
 8002332:	8979      	ldrh	r1, [r7, #10]
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	9301      	str	r3, [sp, #4]
 8002338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	4603      	mov	r3, r0
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 faf8 	bl	8002934 <I2C_RequestMemoryWrite>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d052      	beq.n	80023f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e081      	b.n	8002452 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 fd86 	bl	8002e64 <I2C_WaitOnTXEFlagUntilTimeout>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00d      	beq.n	800237a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	2b04      	cmp	r3, #4
 8002364:	d107      	bne.n	8002376 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002374:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e06b      	b.n	8002452 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	781a      	ldrb	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002394:	3b01      	subs	r3, #1
 8002396:	b29a      	uxth	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d11b      	bne.n	80023f0 <HAL_I2C_Mem_Write+0x180>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d017      	beq.n	80023f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	781a      	ldrb	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023da:	3b01      	subs	r3, #1
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	3b01      	subs	r3, #1
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1aa      	bne.n	800234e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 fd79 	bl	8002ef4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00d      	beq.n	8002424 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	2b04      	cmp	r3, #4
 800240e:	d107      	bne.n	8002420 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800241e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e016      	b.n	8002452 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002432:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2220      	movs	r2, #32
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	e000      	b.n	8002452 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002450:	2302      	movs	r3, #2
  }
}
 8002452:	4618      	mov	r0, r3
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	00100002 	.word	0x00100002
 8002460:	ffff0000 	.word	0xffff0000

08002464 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08c      	sub	sp, #48	; 0x30
 8002468:	af02      	add	r7, sp, #8
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	4608      	mov	r0, r1
 800246e:	4611      	mov	r1, r2
 8002470:	461a      	mov	r2, r3
 8002472:	4603      	mov	r3, r0
 8002474:	817b      	strh	r3, [r7, #10]
 8002476:	460b      	mov	r3, r1
 8002478:	813b      	strh	r3, [r7, #8]
 800247a:	4613      	mov	r3, r2
 800247c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002482:	f7ff fb3f 	bl	8001b04 <HAL_GetTick>
 8002486:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b20      	cmp	r3, #32
 8002492:	f040 8244 	bne.w	800291e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	2319      	movs	r3, #25
 800249c:	2201      	movs	r2, #1
 800249e:	4982      	ldr	r1, [pc, #520]	; (80026a8 <HAL_I2C_Mem_Read+0x244>)
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 fbc5 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80024ac:	2302      	movs	r3, #2
 80024ae:	e237      	b.n	8002920 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_I2C_Mem_Read+0x5a>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e230      	b.n	8002920 <HAL_I2C_Mem_Read+0x4bc>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d007      	beq.n	80024e4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2222      	movs	r2, #34	; 0x22
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2240      	movs	r2, #64	; 0x40
 8002500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800250e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002514:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4a62      	ldr	r2, [pc, #392]	; (80026ac <HAL_I2C_Mem_Read+0x248>)
 8002524:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002526:	88f8      	ldrh	r0, [r7, #6]
 8002528:	893a      	ldrh	r2, [r7, #8]
 800252a:	8979      	ldrh	r1, [r7, #10]
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	4603      	mov	r3, r0
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 fa92 	bl	8002a60 <I2C_RequestMemoryRead>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e1ec      	b.n	8002920 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254a:	2b00      	cmp	r3, #0
 800254c:	d113      	bne.n	8002576 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	61fb      	str	r3, [r7, #28]
 8002562:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	e1c0      	b.n	80028f8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257a:	2b01      	cmp	r3, #1
 800257c:	d11e      	bne.n	80025bc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800258c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800258e:	b672      	cpsid	i
}
 8002590:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002592:	2300      	movs	r3, #0
 8002594:	61bb      	str	r3, [r7, #24]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	61bb      	str	r3, [r7, #24]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	61bb      	str	r3, [r7, #24]
 80025a6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025b8:	b662      	cpsie	i
}
 80025ba:	e035      	b.n	8002628 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d11e      	bne.n	8002602 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80025d4:	b672      	cpsid	i
}
 80025d6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025fe:	b662      	cpsie	i
}
 8002600:	e012      	b.n	8002628 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002610:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	613b      	str	r3, [r7, #16]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	613b      	str	r3, [r7, #16]
 8002626:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002628:	e166      	b.n	80028f8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262e:	2b03      	cmp	r3, #3
 8002630:	f200 811f 	bhi.w	8002872 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002638:	2b01      	cmp	r3, #1
 800263a:	d123      	bne.n	8002684 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800263c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800263e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 fc9f 	bl	8002f84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e167      	b.n	8002920 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691a      	ldr	r2, [r3, #16]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	1c5a      	adds	r2, r3, #1
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266c:	3b01      	subs	r3, #1
 800266e:	b29a      	uxth	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002678:	b29b      	uxth	r3, r3
 800267a:	3b01      	subs	r3, #1
 800267c:	b29a      	uxth	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002682:	e139      	b.n	80028f8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002688:	2b02      	cmp	r3, #2
 800268a:	d152      	bne.n	8002732 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002692:	2200      	movs	r2, #0
 8002694:	4906      	ldr	r1, [pc, #24]	; (80026b0 <HAL_I2C_Mem_Read+0x24c>)
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 faca 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d008      	beq.n	80026b4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e13c      	b.n	8002920 <HAL_I2C_Mem_Read+0x4bc>
 80026a6:	bf00      	nop
 80026a8:	00100002 	.word	0x00100002
 80026ac:	ffff0000 	.word	0xffff0000
 80026b0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80026b4:	b672      	cpsid	i
}
 80026b6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691a      	ldr	r2, [r3, #16]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80026fa:	b662      	cpsie	i
}
 80026fc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271a:	3b01      	subs	r3, #1
 800271c:	b29a      	uxth	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002726:	b29b      	uxth	r3, r3
 8002728:	3b01      	subs	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002730:	e0e2      	b.n	80028f8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002738:	2200      	movs	r2, #0
 800273a:	497b      	ldr	r1, [pc, #492]	; (8002928 <HAL_I2C_Mem_Read+0x4c4>)
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 fa77 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0e9      	b.n	8002920 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800275a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800275c:	b672      	cpsid	i
}
 800275e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691a      	ldr	r2, [r3, #16]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277c:	3b01      	subs	r3, #1
 800277e:	b29a      	uxth	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002788:	b29b      	uxth	r3, r3
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002792:	4b66      	ldr	r3, [pc, #408]	; (800292c <HAL_I2C_Mem_Read+0x4c8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	08db      	lsrs	r3, r3, #3
 8002798:	4a65      	ldr	r2, [pc, #404]	; (8002930 <HAL_I2C_Mem_Read+0x4cc>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	0a1a      	lsrs	r2, r3, #8
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	00da      	lsls	r2, r3, #3
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d118      	bne.n	80027ea <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2220      	movs	r2, #32
 80027c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f043 0220 	orr.w	r2, r3, #32
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80027da:	b662      	cpsie	i
}
 80027dc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e09a      	b.n	8002920 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d1d9      	bne.n	80027ac <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002806:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691a      	ldr	r2, [r3, #16]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002824:	3b01      	subs	r3, #1
 8002826:	b29a      	uxth	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002830:	b29b      	uxth	r3, r3
 8002832:	3b01      	subs	r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800283a:	b662      	cpsie	i
}
 800283c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002866:	b29b      	uxth	r3, r3
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002870:	e042      	b.n	80028f8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002874:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 fb84 	bl	8002f84 <I2C_WaitOnRXNEFlagUntilTimeout>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e04c      	b.n	8002920 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	3b01      	subs	r3, #1
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d118      	bne.n	80028f8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f47f ae94 	bne.w	800262a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2220      	movs	r2, #32
 8002906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800291a:	2300      	movs	r3, #0
 800291c:	e000      	b.n	8002920 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800291e:	2302      	movs	r3, #2
  }
}
 8002920:	4618      	mov	r0, r3
 8002922:	3728      	adds	r7, #40	; 0x28
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	00010004 	.word	0x00010004
 800292c:	20000000 	.word	0x20000000
 8002930:	14f8b589 	.word	0x14f8b589

08002934 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af02      	add	r7, sp, #8
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	4608      	mov	r0, r1
 800293e:	4611      	mov	r1, r2
 8002940:	461a      	mov	r2, r3
 8002942:	4603      	mov	r3, r0
 8002944:	817b      	strh	r3, [r7, #10]
 8002946:	460b      	mov	r3, r1
 8002948:	813b      	strh	r3, [r7, #8]
 800294a:	4613      	mov	r3, r2
 800294c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800295c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	2200      	movs	r2, #0
 8002966:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f960 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00d      	beq.n	8002992 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002984:	d103      	bne.n	800298e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800298c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e05f      	b.n	8002a52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002992:	897b      	ldrh	r3, [r7, #10]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	461a      	mov	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	6a3a      	ldr	r2, [r7, #32]
 80029a6:	492d      	ldr	r1, [pc, #180]	; (8002a5c <I2C_RequestMemoryWrite+0x128>)
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 f9bb 	bl	8002d24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e04c      	b.n	8002a52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d0:	6a39      	ldr	r1, [r7, #32]
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 fa46 	bl	8002e64 <I2C_WaitOnTXEFlagUntilTimeout>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00d      	beq.n	80029fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d107      	bne.n	80029f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e02b      	b.n	8002a52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d105      	bne.n	8002a0c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a00:	893b      	ldrh	r3, [r7, #8]
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	611a      	str	r2, [r3, #16]
 8002a0a:	e021      	b.n	8002a50 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a0c:	893b      	ldrh	r3, [r7, #8]
 8002a0e:	0a1b      	lsrs	r3, r3, #8
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1c:	6a39      	ldr	r1, [r7, #32]
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 fa20 	bl	8002e64 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00d      	beq.n	8002a46 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d107      	bne.n	8002a42 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e005      	b.n	8002a52 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a46:	893b      	ldrh	r3, [r7, #8]
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	00010002 	.word	0x00010002

08002a60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af02      	add	r7, sp, #8
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	4608      	mov	r0, r1
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4603      	mov	r3, r0
 8002a70:	817b      	strh	r3, [r7, #10]
 8002a72:	460b      	mov	r3, r1
 8002a74:	813b      	strh	r3, [r7, #8]
 8002a76:	4613      	mov	r3, r2
 8002a78:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a88:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 f8c2 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00d      	beq.n	8002ace <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ac0:	d103      	bne.n	8002aca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ac8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e0aa      	b.n	8002c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ace:	897b      	ldrh	r3, [r7, #10]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002adc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	6a3a      	ldr	r2, [r7, #32]
 8002ae2:	4952      	ldr	r1, [pc, #328]	; (8002c2c <I2C_RequestMemoryRead+0x1cc>)
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f91d 	bl	8002d24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e097      	b.n	8002c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b0c:	6a39      	ldr	r1, [r7, #32]
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 f9a8 	bl	8002e64 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00d      	beq.n	8002b36 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d107      	bne.n	8002b32 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e076      	b.n	8002c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b36:	88fb      	ldrh	r3, [r7, #6]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d105      	bne.n	8002b48 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b3c:	893b      	ldrh	r3, [r7, #8]
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	611a      	str	r2, [r3, #16]
 8002b46:	e021      	b.n	8002b8c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b48:	893b      	ldrh	r3, [r7, #8]
 8002b4a:	0a1b      	lsrs	r3, r3, #8
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b58:	6a39      	ldr	r1, [r7, #32]
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f982 	bl	8002e64 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00d      	beq.n	8002b82 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d107      	bne.n	8002b7e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e050      	b.n	8002c24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b82:	893b      	ldrh	r3, [r7, #8]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b8e:	6a39      	ldr	r1, [r7, #32]
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 f967 	bl	8002e64 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00d      	beq.n	8002bb8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d107      	bne.n	8002bb4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e035      	b.n	8002c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bc6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 f82b 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00d      	beq.n	8002bfc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bee:	d103      	bne.n	8002bf8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e013      	b.n	8002c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002bfc:	897b      	ldrh	r3, [r7, #10]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	6a3a      	ldr	r2, [r7, #32]
 8002c10:	4906      	ldr	r1, [pc, #24]	; (8002c2c <I2C_RequestMemoryRead+0x1cc>)
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f886 	bl	8002d24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	00010002 	.word	0x00010002

08002c30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c40:	e048      	b.n	8002cd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c48:	d044      	beq.n	8002cd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4a:	f7fe ff5b 	bl	8001b04 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d302      	bcc.n	8002c60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d139      	bne.n	8002cd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	0c1b      	lsrs	r3, r3, #16
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d10d      	bne.n	8002c86 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	43da      	mvns	r2, r3
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	4013      	ands	r3, r2
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	bf0c      	ite	eq
 8002c7c:	2301      	moveq	r3, #1
 8002c7e:	2300      	movne	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	461a      	mov	r2, r3
 8002c84:	e00c      	b.n	8002ca0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	43da      	mvns	r2, r3
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	4013      	ands	r3, r2
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bf0c      	ite	eq
 8002c98:	2301      	moveq	r3, #1
 8002c9a:	2300      	movne	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	79fb      	ldrb	r3, [r7, #7]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d116      	bne.n	8002cd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	f043 0220 	orr.w	r2, r3, #32
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e023      	b.n	8002d1c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	0c1b      	lsrs	r3, r3, #16
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d10d      	bne.n	8002cfa <I2C_WaitOnFlagUntilTimeout+0xca>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	43da      	mvns	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	bf0c      	ite	eq
 8002cf0:	2301      	moveq	r3, #1
 8002cf2:	2300      	movne	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	e00c      	b.n	8002d14 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	43da      	mvns	r2, r3
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	4013      	ands	r3, r2
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	bf0c      	ite	eq
 8002d0c:	2301      	moveq	r3, #1
 8002d0e:	2300      	movne	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	461a      	mov	r2, r3
 8002d14:	79fb      	ldrb	r3, [r7, #7]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d093      	beq.n	8002c42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d32:	e071      	b.n	8002e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d42:	d123      	bne.n	8002d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d52:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	f043 0204 	orr.w	r2, r3, #4
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e067      	b.n	8002e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d92:	d041      	beq.n	8002e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d94:	f7fe feb6 	bl	8001b04 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d302      	bcc.n	8002daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d136      	bne.n	8002e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	0c1b      	lsrs	r3, r3, #16
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d10c      	bne.n	8002dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	43da      	mvns	r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	bf14      	ite	ne
 8002dc6:	2301      	movne	r3, #1
 8002dc8:	2300      	moveq	r3, #0
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	e00b      	b.n	8002de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	43da      	mvns	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf14      	ite	ne
 8002de0:	2301      	movne	r3, #1
 8002de2:	2300      	moveq	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d016      	beq.n	8002e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2220      	movs	r2, #32
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	f043 0220 	orr.w	r2, r3, #32
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e021      	b.n	8002e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	0c1b      	lsrs	r3, r3, #16
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d10c      	bne.n	8002e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	43da      	mvns	r2, r3
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	bf14      	ite	ne
 8002e34:	2301      	movne	r3, #1
 8002e36:	2300      	moveq	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	e00b      	b.n	8002e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	43da      	mvns	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4013      	ands	r3, r2
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	bf14      	ite	ne
 8002e4e:	2301      	movne	r3, #1
 8002e50:	2300      	moveq	r3, #0
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f47f af6d 	bne.w	8002d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e70:	e034      	b.n	8002edc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 f8e3 	bl	800303e <I2C_IsAcknowledgeFailed>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e034      	b.n	8002eec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e88:	d028      	beq.n	8002edc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8a:	f7fe fe3b 	bl	8001b04 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d302      	bcc.n	8002ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d11d      	bne.n	8002edc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eaa:	2b80      	cmp	r3, #128	; 0x80
 8002eac:	d016      	beq.n	8002edc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	f043 0220 	orr.w	r2, r3, #32
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e007      	b.n	8002eec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee6:	2b80      	cmp	r3, #128	; 0x80
 8002ee8:	d1c3      	bne.n	8002e72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f00:	e034      	b.n	8002f6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 f89b 	bl	800303e <I2C_IsAcknowledgeFailed>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e034      	b.n	8002f7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f18:	d028      	beq.n	8002f6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1a:	f7fe fdf3 	bl	8001b04 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d302      	bcc.n	8002f30 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d11d      	bne.n	8002f6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	f003 0304 	and.w	r3, r3, #4
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d016      	beq.n	8002f6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	f043 0220 	orr.w	r2, r3, #32
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e007      	b.n	8002f7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d1c3      	bne.n	8002f02 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f90:	e049      	b.n	8003026 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	2b10      	cmp	r3, #16
 8002f9e:	d119      	bne.n	8002fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f06f 0210 	mvn.w	r2, #16
 8002fa8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e030      	b.n	8003036 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd4:	f7fe fd96 	bl	8001b04 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d302      	bcc.n	8002fea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d11d      	bne.n	8003026 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff4:	2b40      	cmp	r3, #64	; 0x40
 8002ff6:	d016      	beq.n	8003026 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f043 0220 	orr.w	r2, r3, #32
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e007      	b.n	8003036 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003030:	2b40      	cmp	r3, #64	; 0x40
 8003032:	d1ae      	bne.n	8002f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003054:	d11b      	bne.n	800308e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800305e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	f043 0204 	orr.w	r2, r3, #4
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr
	...

0800309c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e272      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 8087 	beq.w	80031ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030bc:	4b92      	ldr	r3, [pc, #584]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 030c 	and.w	r3, r3, #12
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d00c      	beq.n	80030e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030c8:	4b8f      	ldr	r3, [pc, #572]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 030c 	and.w	r3, r3, #12
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d112      	bne.n	80030fa <HAL_RCC_OscConfig+0x5e>
 80030d4:	4b8c      	ldr	r3, [pc, #560]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e0:	d10b      	bne.n	80030fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e2:	4b89      	ldr	r3, [pc, #548]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d06c      	beq.n	80031c8 <HAL_RCC_OscConfig+0x12c>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d168      	bne.n	80031c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e24c      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003102:	d106      	bne.n	8003112 <HAL_RCC_OscConfig+0x76>
 8003104:	4b80      	ldr	r3, [pc, #512]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a7f      	ldr	r2, [pc, #508]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 800310a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	e02e      	b.n	8003170 <HAL_RCC_OscConfig+0xd4>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10c      	bne.n	8003134 <HAL_RCC_OscConfig+0x98>
 800311a:	4b7b      	ldr	r3, [pc, #492]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a7a      	ldr	r2, [pc, #488]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	4b78      	ldr	r3, [pc, #480]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a77      	ldr	r2, [pc, #476]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 800312c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	e01d      	b.n	8003170 <HAL_RCC_OscConfig+0xd4>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800313c:	d10c      	bne.n	8003158 <HAL_RCC_OscConfig+0xbc>
 800313e:	4b72      	ldr	r3, [pc, #456]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a71      	ldr	r2, [pc, #452]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003144:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	4b6f      	ldr	r3, [pc, #444]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a6e      	ldr	r2, [pc, #440]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	e00b      	b.n	8003170 <HAL_RCC_OscConfig+0xd4>
 8003158:	4b6b      	ldr	r3, [pc, #428]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a6a      	ldr	r2, [pc, #424]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 800315e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003162:	6013      	str	r3, [r2, #0]
 8003164:	4b68      	ldr	r3, [pc, #416]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a67      	ldr	r2, [pc, #412]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 800316a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800316e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d013      	beq.n	80031a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003178:	f7fe fcc4 	bl	8001b04 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003180:	f7fe fcc0 	bl	8001b04 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b64      	cmp	r3, #100	; 0x64
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e200      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003192:	4b5d      	ldr	r3, [pc, #372]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0f0      	beq.n	8003180 <HAL_RCC_OscConfig+0xe4>
 800319e:	e014      	b.n	80031ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a0:	f7fe fcb0 	bl	8001b04 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a8:	f7fe fcac 	bl	8001b04 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b64      	cmp	r3, #100	; 0x64
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e1ec      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ba:	4b53      	ldr	r3, [pc, #332]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1f0      	bne.n	80031a8 <HAL_RCC_OscConfig+0x10c>
 80031c6:	e000      	b.n	80031ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d063      	beq.n	800329e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031d6:	4b4c      	ldr	r3, [pc, #304]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f003 030c 	and.w	r3, r3, #12
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00b      	beq.n	80031fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031e2:	4b49      	ldr	r3, [pc, #292]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f003 030c 	and.w	r3, r3, #12
 80031ea:	2b08      	cmp	r3, #8
 80031ec:	d11c      	bne.n	8003228 <HAL_RCC_OscConfig+0x18c>
 80031ee:	4b46      	ldr	r3, [pc, #280]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d116      	bne.n	8003228 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031fa:	4b43      	ldr	r3, [pc, #268]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d005      	beq.n	8003212 <HAL_RCC_OscConfig+0x176>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d001      	beq.n	8003212 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e1c0      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003212:	4b3d      	ldr	r3, [pc, #244]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	4939      	ldr	r1, [pc, #228]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003222:	4313      	orrs	r3, r2
 8003224:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003226:	e03a      	b.n	800329e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d020      	beq.n	8003272 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003230:	4b36      	ldr	r3, [pc, #216]	; (800330c <HAL_RCC_OscConfig+0x270>)
 8003232:	2201      	movs	r2, #1
 8003234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003236:	f7fe fc65 	bl	8001b04 <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800323e:	f7fe fc61 	bl	8001b04 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e1a1      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003250:	4b2d      	ldr	r3, [pc, #180]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0f0      	beq.n	800323e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800325c:	4b2a      	ldr	r3, [pc, #168]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	4927      	ldr	r1, [pc, #156]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 800326c:	4313      	orrs	r3, r2
 800326e:	600b      	str	r3, [r1, #0]
 8003270:	e015      	b.n	800329e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003272:	4b26      	ldr	r3, [pc, #152]	; (800330c <HAL_RCC_OscConfig+0x270>)
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003278:	f7fe fc44 	bl	8001b04 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003280:	f7fe fc40 	bl	8001b04 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e180      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003292:	4b1d      	ldr	r3, [pc, #116]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f0      	bne.n	8003280 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d03a      	beq.n	8003320 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d019      	beq.n	80032e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032b2:	4b17      	ldr	r3, [pc, #92]	; (8003310 <HAL_RCC_OscConfig+0x274>)
 80032b4:	2201      	movs	r2, #1
 80032b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b8:	f7fe fc24 	bl	8001b04 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032c0:	f7fe fc20 	bl	8001b04 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e160      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032d2:	4b0d      	ldr	r3, [pc, #52]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0f0      	beq.n	80032c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032de:	2001      	movs	r0, #1
 80032e0:	f000 face 	bl	8003880 <RCC_Delay>
 80032e4:	e01c      	b.n	8003320 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032e6:	4b0a      	ldr	r3, [pc, #40]	; (8003310 <HAL_RCC_OscConfig+0x274>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ec:	f7fe fc0a 	bl	8001b04 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f2:	e00f      	b.n	8003314 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032f4:	f7fe fc06 	bl	8001b04 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d908      	bls.n	8003314 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e146      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
 8003306:	bf00      	nop
 8003308:	40021000 	.word	0x40021000
 800330c:	42420000 	.word	0x42420000
 8003310:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003314:	4b92      	ldr	r3, [pc, #584]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1e9      	bne.n	80032f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 80a6 	beq.w	800347a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800332e:	2300      	movs	r3, #0
 8003330:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003332:	4b8b      	ldr	r3, [pc, #556]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10d      	bne.n	800335a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800333e:	4b88      	ldr	r3, [pc, #544]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	4a87      	ldr	r2, [pc, #540]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003348:	61d3      	str	r3, [r2, #28]
 800334a:	4b85      	ldr	r3, [pc, #532]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003352:	60bb      	str	r3, [r7, #8]
 8003354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003356:	2301      	movs	r3, #1
 8003358:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335a:	4b82      	ldr	r3, [pc, #520]	; (8003564 <HAL_RCC_OscConfig+0x4c8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003362:	2b00      	cmp	r3, #0
 8003364:	d118      	bne.n	8003398 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003366:	4b7f      	ldr	r3, [pc, #508]	; (8003564 <HAL_RCC_OscConfig+0x4c8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a7e      	ldr	r2, [pc, #504]	; (8003564 <HAL_RCC_OscConfig+0x4c8>)
 800336c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003372:	f7fe fbc7 	bl	8001b04 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800337a:	f7fe fbc3 	bl	8001b04 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b64      	cmp	r3, #100	; 0x64
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e103      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338c:	4b75      	ldr	r3, [pc, #468]	; (8003564 <HAL_RCC_OscConfig+0x4c8>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0f0      	beq.n	800337a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d106      	bne.n	80033ae <HAL_RCC_OscConfig+0x312>
 80033a0:	4b6f      	ldr	r3, [pc, #444]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	4a6e      	ldr	r2, [pc, #440]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	6213      	str	r3, [r2, #32]
 80033ac:	e02d      	b.n	800340a <HAL_RCC_OscConfig+0x36e>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10c      	bne.n	80033d0 <HAL_RCC_OscConfig+0x334>
 80033b6:	4b6a      	ldr	r3, [pc, #424]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	4a69      	ldr	r2, [pc, #420]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033bc:	f023 0301 	bic.w	r3, r3, #1
 80033c0:	6213      	str	r3, [r2, #32]
 80033c2:	4b67      	ldr	r3, [pc, #412]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	4a66      	ldr	r2, [pc, #408]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033c8:	f023 0304 	bic.w	r3, r3, #4
 80033cc:	6213      	str	r3, [r2, #32]
 80033ce:	e01c      	b.n	800340a <HAL_RCC_OscConfig+0x36e>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	2b05      	cmp	r3, #5
 80033d6:	d10c      	bne.n	80033f2 <HAL_RCC_OscConfig+0x356>
 80033d8:	4b61      	ldr	r3, [pc, #388]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	4a60      	ldr	r2, [pc, #384]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033de:	f043 0304 	orr.w	r3, r3, #4
 80033e2:	6213      	str	r3, [r2, #32]
 80033e4:	4b5e      	ldr	r3, [pc, #376]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	4a5d      	ldr	r2, [pc, #372]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	6213      	str	r3, [r2, #32]
 80033f0:	e00b      	b.n	800340a <HAL_RCC_OscConfig+0x36e>
 80033f2:	4b5b      	ldr	r3, [pc, #364]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	4a5a      	ldr	r2, [pc, #360]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	6213      	str	r3, [r2, #32]
 80033fe:	4b58      	ldr	r3, [pc, #352]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	4a57      	ldr	r2, [pc, #348]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003404:	f023 0304 	bic.w	r3, r3, #4
 8003408:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d015      	beq.n	800343e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003412:	f7fe fb77 	bl	8001b04 <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003418:	e00a      	b.n	8003430 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800341a:	f7fe fb73 	bl	8001b04 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	f241 3288 	movw	r2, #5000	; 0x1388
 8003428:	4293      	cmp	r3, r2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e0b1      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003430:	4b4b      	ldr	r3, [pc, #300]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0ee      	beq.n	800341a <HAL_RCC_OscConfig+0x37e>
 800343c:	e014      	b.n	8003468 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800343e:	f7fe fb61 	bl	8001b04 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003444:	e00a      	b.n	800345c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003446:	f7fe fb5d 	bl	8001b04 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	f241 3288 	movw	r2, #5000	; 0x1388
 8003454:	4293      	cmp	r3, r2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e09b      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800345c:	4b40      	ldr	r3, [pc, #256]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1ee      	bne.n	8003446 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003468:	7dfb      	ldrb	r3, [r7, #23]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d105      	bne.n	800347a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800346e:	4b3c      	ldr	r3, [pc, #240]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	4a3b      	ldr	r2, [pc, #236]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003478:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 8087 	beq.w	8003592 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003484:	4b36      	ldr	r3, [pc, #216]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 030c 	and.w	r3, r3, #12
 800348c:	2b08      	cmp	r3, #8
 800348e:	d061      	beq.n	8003554 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	2b02      	cmp	r3, #2
 8003496:	d146      	bne.n	8003526 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003498:	4b33      	ldr	r3, [pc, #204]	; (8003568 <HAL_RCC_OscConfig+0x4cc>)
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349e:	f7fe fb31 	bl	8001b04 <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a6:	f7fe fb2d 	bl	8001b04 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e06d      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034b8:	4b29      	ldr	r3, [pc, #164]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1f0      	bne.n	80034a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034cc:	d108      	bne.n	80034e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034ce:	4b24      	ldr	r3, [pc, #144]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	4921      	ldr	r1, [pc, #132]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034e0:	4b1f      	ldr	r3, [pc, #124]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a19      	ldr	r1, [r3, #32]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	430b      	orrs	r3, r1
 80034f2:	491b      	ldr	r1, [pc, #108]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034f8:	4b1b      	ldr	r3, [pc, #108]	; (8003568 <HAL_RCC_OscConfig+0x4cc>)
 80034fa:	2201      	movs	r2, #1
 80034fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fe:	f7fe fb01 	bl	8001b04 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003506:	f7fe fafd 	bl	8001b04 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e03d      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003518:	4b11      	ldr	r3, [pc, #68]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0f0      	beq.n	8003506 <HAL_RCC_OscConfig+0x46a>
 8003524:	e035      	b.n	8003592 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003526:	4b10      	ldr	r3, [pc, #64]	; (8003568 <HAL_RCC_OscConfig+0x4cc>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352c:	f7fe faea 	bl	8001b04 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003534:	f7fe fae6 	bl	8001b04 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e026      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003546:	4b06      	ldr	r3, [pc, #24]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x498>
 8003552:	e01e      	b.n	8003592 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d107      	bne.n	800356c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e019      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
 8003560:	40021000 	.word	0x40021000
 8003564:	40007000 	.word	0x40007000
 8003568:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800356c:	4b0b      	ldr	r3, [pc, #44]	; (800359c <HAL_RCC_OscConfig+0x500>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	429a      	cmp	r2, r3
 800357e:	d106      	bne.n	800358e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800358a:	429a      	cmp	r2, r3
 800358c:	d001      	beq.n	8003592 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40021000 	.word	0x40021000

080035a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0d0      	b.n	8003756 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035b4:	4b6a      	ldr	r3, [pc, #424]	; (8003760 <HAL_RCC_ClockConfig+0x1c0>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d910      	bls.n	80035e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c2:	4b67      	ldr	r3, [pc, #412]	; (8003760 <HAL_RCC_ClockConfig+0x1c0>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f023 0207 	bic.w	r2, r3, #7
 80035ca:	4965      	ldr	r1, [pc, #404]	; (8003760 <HAL_RCC_ClockConfig+0x1c0>)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d2:	4b63      	ldr	r3, [pc, #396]	; (8003760 <HAL_RCC_ClockConfig+0x1c0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0b8      	b.n	8003756 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d020      	beq.n	8003632 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035fc:	4b59      	ldr	r3, [pc, #356]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	4a58      	ldr	r2, [pc, #352]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 8003602:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003606:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003614:	4b53      	ldr	r3, [pc, #332]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	4a52      	ldr	r2, [pc, #328]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 800361a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800361e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003620:	4b50      	ldr	r3, [pc, #320]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	494d      	ldr	r1, [pc, #308]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 800362e:	4313      	orrs	r3, r2
 8003630:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d040      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d107      	bne.n	8003656 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003646:	4b47      	ldr	r3, [pc, #284]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d115      	bne.n	800367e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e07f      	b.n	8003756 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d107      	bne.n	800366e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800365e:	4b41      	ldr	r3, [pc, #260]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d109      	bne.n	800367e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e073      	b.n	8003756 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800366e:	4b3d      	ldr	r3, [pc, #244]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e06b      	b.n	8003756 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800367e:	4b39      	ldr	r3, [pc, #228]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f023 0203 	bic.w	r2, r3, #3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	4936      	ldr	r1, [pc, #216]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 800368c:	4313      	orrs	r3, r2
 800368e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003690:	f7fe fa38 	bl	8001b04 <HAL_GetTick>
 8003694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003696:	e00a      	b.n	80036ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003698:	f7fe fa34 	bl	8001b04 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e053      	b.n	8003756 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ae:	4b2d      	ldr	r3, [pc, #180]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f003 020c 	and.w	r2, r3, #12
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	429a      	cmp	r2, r3
 80036be:	d1eb      	bne.n	8003698 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036c0:	4b27      	ldr	r3, [pc, #156]	; (8003760 <HAL_RCC_ClockConfig+0x1c0>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d210      	bcs.n	80036f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ce:	4b24      	ldr	r3, [pc, #144]	; (8003760 <HAL_RCC_ClockConfig+0x1c0>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 0207 	bic.w	r2, r3, #7
 80036d6:	4922      	ldr	r1, [pc, #136]	; (8003760 <HAL_RCC_ClockConfig+0x1c0>)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	4313      	orrs	r3, r2
 80036dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036de:	4b20      	ldr	r3, [pc, #128]	; (8003760 <HAL_RCC_ClockConfig+0x1c0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e032      	b.n	8003756 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036fc:	4b19      	ldr	r3, [pc, #100]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4916      	ldr	r1, [pc, #88]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 800370a:	4313      	orrs	r3, r2
 800370c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d009      	beq.n	800372e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800371a:	4b12      	ldr	r3, [pc, #72]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	490e      	ldr	r1, [pc, #56]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 800372a:	4313      	orrs	r3, r2
 800372c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800372e:	f000 f821 	bl	8003774 <HAL_RCC_GetSysClockFreq>
 8003732:	4602      	mov	r2, r0
 8003734:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	091b      	lsrs	r3, r3, #4
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	490a      	ldr	r1, [pc, #40]	; (8003768 <HAL_RCC_ClockConfig+0x1c8>)
 8003740:	5ccb      	ldrb	r3, [r1, r3]
 8003742:	fa22 f303 	lsr.w	r3, r2, r3
 8003746:	4a09      	ldr	r2, [pc, #36]	; (800376c <HAL_RCC_ClockConfig+0x1cc>)
 8003748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800374a:	4b09      	ldr	r3, [pc, #36]	; (8003770 <HAL_RCC_ClockConfig+0x1d0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f7fe f996 	bl	8001a80 <HAL_InitTick>

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40022000 	.word	0x40022000
 8003764:	40021000 	.word	0x40021000
 8003768:	08008208 	.word	0x08008208
 800376c:	20000000 	.word	0x20000000
 8003770:	20000004 	.word	0x20000004

08003774 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003774:	b480      	push	{r7}
 8003776:	b087      	sub	sp, #28
 8003778:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	2300      	movs	r3, #0
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	2300      	movs	r3, #0
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	2300      	movs	r3, #0
 8003788:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800378e:	4b1e      	ldr	r3, [pc, #120]	; (8003808 <HAL_RCC_GetSysClockFreq+0x94>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f003 030c 	and.w	r3, r3, #12
 800379a:	2b04      	cmp	r3, #4
 800379c:	d002      	beq.n	80037a4 <HAL_RCC_GetSysClockFreq+0x30>
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d003      	beq.n	80037aa <HAL_RCC_GetSysClockFreq+0x36>
 80037a2:	e027      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037a4:	4b19      	ldr	r3, [pc, #100]	; (800380c <HAL_RCC_GetSysClockFreq+0x98>)
 80037a6:	613b      	str	r3, [r7, #16]
      break;
 80037a8:	e027      	b.n	80037fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	0c9b      	lsrs	r3, r3, #18
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	4a17      	ldr	r2, [pc, #92]	; (8003810 <HAL_RCC_GetSysClockFreq+0x9c>)
 80037b4:	5cd3      	ldrb	r3, [r2, r3]
 80037b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d010      	beq.n	80037e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037c2:	4b11      	ldr	r3, [pc, #68]	; (8003808 <HAL_RCC_GetSysClockFreq+0x94>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	0c5b      	lsrs	r3, r3, #17
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	4a11      	ldr	r2, [pc, #68]	; (8003814 <HAL_RCC_GetSysClockFreq+0xa0>)
 80037ce:	5cd3      	ldrb	r3, [r2, r3]
 80037d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a0d      	ldr	r2, [pc, #52]	; (800380c <HAL_RCC_GetSysClockFreq+0x98>)
 80037d6:	fb03 f202 	mul.w	r2, r3, r2
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	e004      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a0c      	ldr	r2, [pc, #48]	; (8003818 <HAL_RCC_GetSysClockFreq+0xa4>)
 80037e8:	fb02 f303 	mul.w	r3, r2, r3
 80037ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	613b      	str	r3, [r7, #16]
      break;
 80037f2:	e002      	b.n	80037fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037f4:	4b05      	ldr	r3, [pc, #20]	; (800380c <HAL_RCC_GetSysClockFreq+0x98>)
 80037f6:	613b      	str	r3, [r7, #16]
      break;
 80037f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037fa:	693b      	ldr	r3, [r7, #16]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	371c      	adds	r7, #28
 8003800:	46bd      	mov	sp, r7
 8003802:	bc80      	pop	{r7}
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	40021000 	.word	0x40021000
 800380c:	007a1200 	.word	0x007a1200
 8003810:	08008220 	.word	0x08008220
 8003814:	08008230 	.word	0x08008230
 8003818:	003d0900 	.word	0x003d0900

0800381c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003820:	4b02      	ldr	r3, [pc, #8]	; (800382c <HAL_RCC_GetHCLKFreq+0x10>)
 8003822:	681b      	ldr	r3, [r3, #0]
}
 8003824:	4618      	mov	r0, r3
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr
 800382c:	20000000 	.word	0x20000000

08003830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003834:	f7ff fff2 	bl	800381c <HAL_RCC_GetHCLKFreq>
 8003838:	4602      	mov	r2, r0
 800383a:	4b05      	ldr	r3, [pc, #20]	; (8003850 <HAL_RCC_GetPCLK1Freq+0x20>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	0a1b      	lsrs	r3, r3, #8
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	4903      	ldr	r1, [pc, #12]	; (8003854 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003846:	5ccb      	ldrb	r3, [r1, r3]
 8003848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800384c:	4618      	mov	r0, r3
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40021000 	.word	0x40021000
 8003854:	08008218 	.word	0x08008218

08003858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800385c:	f7ff ffde 	bl	800381c <HAL_RCC_GetHCLKFreq>
 8003860:	4602      	mov	r2, r0
 8003862:	4b05      	ldr	r3, [pc, #20]	; (8003878 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	0adb      	lsrs	r3, r3, #11
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	4903      	ldr	r1, [pc, #12]	; (800387c <HAL_RCC_GetPCLK2Freq+0x24>)
 800386e:	5ccb      	ldrb	r3, [r1, r3]
 8003870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003874:	4618      	mov	r0, r3
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40021000 	.word	0x40021000
 800387c:	08008218 	.word	0x08008218

08003880 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003888:	4b0a      	ldr	r3, [pc, #40]	; (80038b4 <RCC_Delay+0x34>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a0a      	ldr	r2, [pc, #40]	; (80038b8 <RCC_Delay+0x38>)
 800388e:	fba2 2303 	umull	r2, r3, r2, r3
 8003892:	0a5b      	lsrs	r3, r3, #9
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	fb02 f303 	mul.w	r3, r2, r3
 800389a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800389c:	bf00      	nop
  }
  while (Delay --);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	1e5a      	subs	r2, r3, #1
 80038a2:	60fa      	str	r2, [r7, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1f9      	bne.n	800389c <RCC_Delay+0x1c>
}
 80038a8:	bf00      	nop
 80038aa:	bf00      	nop
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr
 80038b4:	20000000 	.word	0x20000000
 80038b8:	10624dd3 	.word	0x10624dd3

080038bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e042      	b.n	8003954 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d106      	bne.n	80038e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7fe f844 	bl	8001970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2224      	movs	r2, #36	; 0x24
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f82b 	bl	800395c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003914:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	695a      	ldr	r2, [r3, #20]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003924:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68da      	ldr	r2, [r3, #12]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003934:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	4313      	orrs	r3, r2
 800398a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003996:	f023 030c 	bic.w	r3, r3, #12
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6812      	ldr	r2, [r2, #0]
 800399e:	68b9      	ldr	r1, [r7, #8]
 80039a0:	430b      	orrs	r3, r1
 80039a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699a      	ldr	r2, [r3, #24]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a2c      	ldr	r2, [pc, #176]	; (8003a70 <UART_SetConfig+0x114>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d103      	bne.n	80039cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039c4:	f7ff ff48 	bl	8003858 <HAL_RCC_GetPCLK2Freq>
 80039c8:	60f8      	str	r0, [r7, #12]
 80039ca:	e002      	b.n	80039d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80039cc:	f7ff ff30 	bl	8003830 <HAL_RCC_GetPCLK1Freq>
 80039d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	4613      	mov	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	009a      	lsls	r2, r3, #2
 80039dc:	441a      	add	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e8:	4a22      	ldr	r2, [pc, #136]	; (8003a74 <UART_SetConfig+0x118>)
 80039ea:	fba2 2303 	umull	r2, r3, r2, r3
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	0119      	lsls	r1, r3, #4
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4613      	mov	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	009a      	lsls	r2, r3, #2
 80039fc:	441a      	add	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a08:	4b1a      	ldr	r3, [pc, #104]	; (8003a74 <UART_SetConfig+0x118>)
 8003a0a:	fba3 0302 	umull	r0, r3, r3, r2
 8003a0e:	095b      	lsrs	r3, r3, #5
 8003a10:	2064      	movs	r0, #100	; 0x64
 8003a12:	fb00 f303 	mul.w	r3, r0, r3
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	3332      	adds	r3, #50	; 0x32
 8003a1c:	4a15      	ldr	r2, [pc, #84]	; (8003a74 <UART_SetConfig+0x118>)
 8003a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a22:	095b      	lsrs	r3, r3, #5
 8003a24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a28:	4419      	add	r1, r3
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	009a      	lsls	r2, r3, #2
 8003a34:	441a      	add	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a40:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <UART_SetConfig+0x118>)
 8003a42:	fba3 0302 	umull	r0, r3, r3, r2
 8003a46:	095b      	lsrs	r3, r3, #5
 8003a48:	2064      	movs	r0, #100	; 0x64
 8003a4a:	fb00 f303 	mul.w	r3, r0, r3
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	011b      	lsls	r3, r3, #4
 8003a52:	3332      	adds	r3, #50	; 0x32
 8003a54:	4a07      	ldr	r2, [pc, #28]	; (8003a74 <UART_SetConfig+0x118>)
 8003a56:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5a:	095b      	lsrs	r3, r3, #5
 8003a5c:	f003 020f 	and.w	r2, r3, #15
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	440a      	add	r2, r1
 8003a66:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a68:	bf00      	nop
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40013800 	.word	0x40013800
 8003a74:	51eb851f 	.word	0x51eb851f

08003a78 <__cvt>:
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a7e:	461f      	mov	r7, r3
 8003a80:	bfbb      	ittet	lt
 8003a82:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003a86:	461f      	movlt	r7, r3
 8003a88:	2300      	movge	r3, #0
 8003a8a:	232d      	movlt	r3, #45	; 0x2d
 8003a8c:	b088      	sub	sp, #32
 8003a8e:	4614      	mov	r4, r2
 8003a90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003a92:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003a94:	7013      	strb	r3, [r2, #0]
 8003a96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003a98:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003a9c:	f023 0820 	bic.w	r8, r3, #32
 8003aa0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003aa4:	d005      	beq.n	8003ab2 <__cvt+0x3a>
 8003aa6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003aaa:	d100      	bne.n	8003aae <__cvt+0x36>
 8003aac:	3501      	adds	r5, #1
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e000      	b.n	8003ab4 <__cvt+0x3c>
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	aa07      	add	r2, sp, #28
 8003ab6:	9204      	str	r2, [sp, #16]
 8003ab8:	aa06      	add	r2, sp, #24
 8003aba:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003abe:	e9cd 3500 	strd	r3, r5, [sp]
 8003ac2:	4622      	mov	r2, r4
 8003ac4:	463b      	mov	r3, r7
 8003ac6:	f001 f887 	bl	8004bd8 <_dtoa_r>
 8003aca:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003ace:	4606      	mov	r6, r0
 8003ad0:	d102      	bne.n	8003ad8 <__cvt+0x60>
 8003ad2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003ad4:	07db      	lsls	r3, r3, #31
 8003ad6:	d522      	bpl.n	8003b1e <__cvt+0xa6>
 8003ad8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003adc:	eb06 0905 	add.w	r9, r6, r5
 8003ae0:	d110      	bne.n	8003b04 <__cvt+0x8c>
 8003ae2:	7833      	ldrb	r3, [r6, #0]
 8003ae4:	2b30      	cmp	r3, #48	; 0x30
 8003ae6:	d10a      	bne.n	8003afe <__cvt+0x86>
 8003ae8:	2200      	movs	r2, #0
 8003aea:	2300      	movs	r3, #0
 8003aec:	4620      	mov	r0, r4
 8003aee:	4639      	mov	r1, r7
 8003af0:	f7fc ff5a 	bl	80009a8 <__aeabi_dcmpeq>
 8003af4:	b918      	cbnz	r0, 8003afe <__cvt+0x86>
 8003af6:	f1c5 0501 	rsb	r5, r5, #1
 8003afa:	f8ca 5000 	str.w	r5, [sl]
 8003afe:	f8da 3000 	ldr.w	r3, [sl]
 8003b02:	4499      	add	r9, r3
 8003b04:	2200      	movs	r2, #0
 8003b06:	2300      	movs	r3, #0
 8003b08:	4620      	mov	r0, r4
 8003b0a:	4639      	mov	r1, r7
 8003b0c:	f7fc ff4c 	bl	80009a8 <__aeabi_dcmpeq>
 8003b10:	b108      	cbz	r0, 8003b16 <__cvt+0x9e>
 8003b12:	f8cd 901c 	str.w	r9, [sp, #28]
 8003b16:	2230      	movs	r2, #48	; 0x30
 8003b18:	9b07      	ldr	r3, [sp, #28]
 8003b1a:	454b      	cmp	r3, r9
 8003b1c:	d307      	bcc.n	8003b2e <__cvt+0xb6>
 8003b1e:	4630      	mov	r0, r6
 8003b20:	9b07      	ldr	r3, [sp, #28]
 8003b22:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003b24:	1b9b      	subs	r3, r3, r6
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	b008      	add	sp, #32
 8003b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b2e:	1c59      	adds	r1, r3, #1
 8003b30:	9107      	str	r1, [sp, #28]
 8003b32:	701a      	strb	r2, [r3, #0]
 8003b34:	e7f0      	b.n	8003b18 <__cvt+0xa0>

08003b36 <__exponent>:
 8003b36:	4603      	mov	r3, r0
 8003b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b3a:	2900      	cmp	r1, #0
 8003b3c:	f803 2b02 	strb.w	r2, [r3], #2
 8003b40:	bfb6      	itet	lt
 8003b42:	222d      	movlt	r2, #45	; 0x2d
 8003b44:	222b      	movge	r2, #43	; 0x2b
 8003b46:	4249      	neglt	r1, r1
 8003b48:	2909      	cmp	r1, #9
 8003b4a:	7042      	strb	r2, [r0, #1]
 8003b4c:	dd2a      	ble.n	8003ba4 <__exponent+0x6e>
 8003b4e:	f10d 0207 	add.w	r2, sp, #7
 8003b52:	4617      	mov	r7, r2
 8003b54:	260a      	movs	r6, #10
 8003b56:	fb91 f5f6 	sdiv	r5, r1, r6
 8003b5a:	4694      	mov	ip, r2
 8003b5c:	fb06 1415 	mls	r4, r6, r5, r1
 8003b60:	3430      	adds	r4, #48	; 0x30
 8003b62:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003b66:	460c      	mov	r4, r1
 8003b68:	2c63      	cmp	r4, #99	; 0x63
 8003b6a:	4629      	mov	r1, r5
 8003b6c:	f102 32ff 	add.w	r2, r2, #4294967295
 8003b70:	dcf1      	bgt.n	8003b56 <__exponent+0x20>
 8003b72:	3130      	adds	r1, #48	; 0x30
 8003b74:	f1ac 0402 	sub.w	r4, ip, #2
 8003b78:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003b7c:	4622      	mov	r2, r4
 8003b7e:	1c41      	adds	r1, r0, #1
 8003b80:	42ba      	cmp	r2, r7
 8003b82:	d30a      	bcc.n	8003b9a <__exponent+0x64>
 8003b84:	f10d 0209 	add.w	r2, sp, #9
 8003b88:	eba2 020c 	sub.w	r2, r2, ip
 8003b8c:	42bc      	cmp	r4, r7
 8003b8e:	bf88      	it	hi
 8003b90:	2200      	movhi	r2, #0
 8003b92:	4413      	add	r3, r2
 8003b94:	1a18      	subs	r0, r3, r0
 8003b96:	b003      	add	sp, #12
 8003b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b9a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003b9e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003ba2:	e7ed      	b.n	8003b80 <__exponent+0x4a>
 8003ba4:	2330      	movs	r3, #48	; 0x30
 8003ba6:	3130      	adds	r1, #48	; 0x30
 8003ba8:	7083      	strb	r3, [r0, #2]
 8003baa:	70c1      	strb	r1, [r0, #3]
 8003bac:	1d03      	adds	r3, r0, #4
 8003bae:	e7f1      	b.n	8003b94 <__exponent+0x5e>

08003bb0 <_printf_float>:
 8003bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb4:	b091      	sub	sp, #68	; 0x44
 8003bb6:	460c      	mov	r4, r1
 8003bb8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003bbc:	4616      	mov	r6, r2
 8003bbe:	461f      	mov	r7, r3
 8003bc0:	4605      	mov	r5, r0
 8003bc2:	f000 fef3 	bl	80049ac <_localeconv_r>
 8003bc6:	6803      	ldr	r3, [r0, #0]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	9309      	str	r3, [sp, #36]	; 0x24
 8003bcc:	f7fc fac0 	bl	8000150 <strlen>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	930e      	str	r3, [sp, #56]	; 0x38
 8003bd4:	f8d8 3000 	ldr.w	r3, [r8]
 8003bd8:	900a      	str	r0, [sp, #40]	; 0x28
 8003bda:	3307      	adds	r3, #7
 8003bdc:	f023 0307 	bic.w	r3, r3, #7
 8003be0:	f103 0208 	add.w	r2, r3, #8
 8003be4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003be8:	f8d4 b000 	ldr.w	fp, [r4]
 8003bec:	f8c8 2000 	str.w	r2, [r8]
 8003bf0:	e9d3 a800 	ldrd	sl, r8, [r3]
 8003bf4:	4652      	mov	r2, sl
 8003bf6:	4643      	mov	r3, r8
 8003bf8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003bfc:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8003c00:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c02:	f04f 32ff 	mov.w	r2, #4294967295
 8003c06:	4650      	mov	r0, sl
 8003c08:	4b9c      	ldr	r3, [pc, #624]	; (8003e7c <_printf_float+0x2cc>)
 8003c0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003c0c:	f7fc fefe 	bl	8000a0c <__aeabi_dcmpun>
 8003c10:	bb70      	cbnz	r0, 8003c70 <_printf_float+0xc0>
 8003c12:	f04f 32ff 	mov.w	r2, #4294967295
 8003c16:	4650      	mov	r0, sl
 8003c18:	4b98      	ldr	r3, [pc, #608]	; (8003e7c <_printf_float+0x2cc>)
 8003c1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003c1c:	f7fc fed8 	bl	80009d0 <__aeabi_dcmple>
 8003c20:	bb30      	cbnz	r0, 8003c70 <_printf_float+0xc0>
 8003c22:	2200      	movs	r2, #0
 8003c24:	2300      	movs	r3, #0
 8003c26:	4650      	mov	r0, sl
 8003c28:	4641      	mov	r1, r8
 8003c2a:	f7fc fec7 	bl	80009bc <__aeabi_dcmplt>
 8003c2e:	b110      	cbz	r0, 8003c36 <_printf_float+0x86>
 8003c30:	232d      	movs	r3, #45	; 0x2d
 8003c32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c36:	4a92      	ldr	r2, [pc, #584]	; (8003e80 <_printf_float+0x2d0>)
 8003c38:	4b92      	ldr	r3, [pc, #584]	; (8003e84 <_printf_float+0x2d4>)
 8003c3a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003c3e:	bf94      	ite	ls
 8003c40:	4690      	movls	r8, r2
 8003c42:	4698      	movhi	r8, r3
 8003c44:	2303      	movs	r3, #3
 8003c46:	f04f 0a00 	mov.w	sl, #0
 8003c4a:	6123      	str	r3, [r4, #16]
 8003c4c:	f02b 0304 	bic.w	r3, fp, #4
 8003c50:	6023      	str	r3, [r4, #0]
 8003c52:	4633      	mov	r3, r6
 8003c54:	4621      	mov	r1, r4
 8003c56:	4628      	mov	r0, r5
 8003c58:	9700      	str	r7, [sp, #0]
 8003c5a:	aa0f      	add	r2, sp, #60	; 0x3c
 8003c5c:	f000 f9d6 	bl	800400c <_printf_common>
 8003c60:	3001      	adds	r0, #1
 8003c62:	f040 8090 	bne.w	8003d86 <_printf_float+0x1d6>
 8003c66:	f04f 30ff 	mov.w	r0, #4294967295
 8003c6a:	b011      	add	sp, #68	; 0x44
 8003c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c70:	4652      	mov	r2, sl
 8003c72:	4643      	mov	r3, r8
 8003c74:	4650      	mov	r0, sl
 8003c76:	4641      	mov	r1, r8
 8003c78:	f7fc fec8 	bl	8000a0c <__aeabi_dcmpun>
 8003c7c:	b148      	cbz	r0, 8003c92 <_printf_float+0xe2>
 8003c7e:	f1b8 0f00 	cmp.w	r8, #0
 8003c82:	bfb8      	it	lt
 8003c84:	232d      	movlt	r3, #45	; 0x2d
 8003c86:	4a80      	ldr	r2, [pc, #512]	; (8003e88 <_printf_float+0x2d8>)
 8003c88:	bfb8      	it	lt
 8003c8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003c8e:	4b7f      	ldr	r3, [pc, #508]	; (8003e8c <_printf_float+0x2dc>)
 8003c90:	e7d3      	b.n	8003c3a <_printf_float+0x8a>
 8003c92:	6863      	ldr	r3, [r4, #4]
 8003c94:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003c98:	1c5a      	adds	r2, r3, #1
 8003c9a:	d142      	bne.n	8003d22 <_printf_float+0x172>
 8003c9c:	2306      	movs	r3, #6
 8003c9e:	6063      	str	r3, [r4, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	9206      	str	r2, [sp, #24]
 8003ca4:	aa0e      	add	r2, sp, #56	; 0x38
 8003ca6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003caa:	aa0d      	add	r2, sp, #52	; 0x34
 8003cac:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003cb0:	9203      	str	r2, [sp, #12]
 8003cb2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003cb6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003cba:	6023      	str	r3, [r4, #0]
 8003cbc:	6863      	ldr	r3, [r4, #4]
 8003cbe:	4652      	mov	r2, sl
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	4628      	mov	r0, r5
 8003cc4:	4643      	mov	r3, r8
 8003cc6:	910b      	str	r1, [sp, #44]	; 0x2c
 8003cc8:	f7ff fed6 	bl	8003a78 <__cvt>
 8003ccc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003cce:	4680      	mov	r8, r0
 8003cd0:	2947      	cmp	r1, #71	; 0x47
 8003cd2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003cd4:	d108      	bne.n	8003ce8 <_printf_float+0x138>
 8003cd6:	1cc8      	adds	r0, r1, #3
 8003cd8:	db02      	blt.n	8003ce0 <_printf_float+0x130>
 8003cda:	6863      	ldr	r3, [r4, #4]
 8003cdc:	4299      	cmp	r1, r3
 8003cde:	dd40      	ble.n	8003d62 <_printf_float+0x1b2>
 8003ce0:	f1a9 0902 	sub.w	r9, r9, #2
 8003ce4:	fa5f f989 	uxtb.w	r9, r9
 8003ce8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003cec:	d81f      	bhi.n	8003d2e <_printf_float+0x17e>
 8003cee:	464a      	mov	r2, r9
 8003cf0:	3901      	subs	r1, #1
 8003cf2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003cf6:	910d      	str	r1, [sp, #52]	; 0x34
 8003cf8:	f7ff ff1d 	bl	8003b36 <__exponent>
 8003cfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003cfe:	4682      	mov	sl, r0
 8003d00:	1813      	adds	r3, r2, r0
 8003d02:	2a01      	cmp	r2, #1
 8003d04:	6123      	str	r3, [r4, #16]
 8003d06:	dc02      	bgt.n	8003d0e <_printf_float+0x15e>
 8003d08:	6822      	ldr	r2, [r4, #0]
 8003d0a:	07d2      	lsls	r2, r2, #31
 8003d0c:	d501      	bpl.n	8003d12 <_printf_float+0x162>
 8003d0e:	3301      	adds	r3, #1
 8003d10:	6123      	str	r3, [r4, #16]
 8003d12:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d09b      	beq.n	8003c52 <_printf_float+0xa2>
 8003d1a:	232d      	movs	r3, #45	; 0x2d
 8003d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d20:	e797      	b.n	8003c52 <_printf_float+0xa2>
 8003d22:	2947      	cmp	r1, #71	; 0x47
 8003d24:	d1bc      	bne.n	8003ca0 <_printf_float+0xf0>
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1ba      	bne.n	8003ca0 <_printf_float+0xf0>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e7b7      	b.n	8003c9e <_printf_float+0xee>
 8003d2e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003d32:	d118      	bne.n	8003d66 <_printf_float+0x1b6>
 8003d34:	2900      	cmp	r1, #0
 8003d36:	6863      	ldr	r3, [r4, #4]
 8003d38:	dd0b      	ble.n	8003d52 <_printf_float+0x1a2>
 8003d3a:	6121      	str	r1, [r4, #16]
 8003d3c:	b913      	cbnz	r3, 8003d44 <_printf_float+0x194>
 8003d3e:	6822      	ldr	r2, [r4, #0]
 8003d40:	07d0      	lsls	r0, r2, #31
 8003d42:	d502      	bpl.n	8003d4a <_printf_float+0x19a>
 8003d44:	3301      	adds	r3, #1
 8003d46:	440b      	add	r3, r1
 8003d48:	6123      	str	r3, [r4, #16]
 8003d4a:	f04f 0a00 	mov.w	sl, #0
 8003d4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8003d50:	e7df      	b.n	8003d12 <_printf_float+0x162>
 8003d52:	b913      	cbnz	r3, 8003d5a <_printf_float+0x1aa>
 8003d54:	6822      	ldr	r2, [r4, #0]
 8003d56:	07d2      	lsls	r2, r2, #31
 8003d58:	d501      	bpl.n	8003d5e <_printf_float+0x1ae>
 8003d5a:	3302      	adds	r3, #2
 8003d5c:	e7f4      	b.n	8003d48 <_printf_float+0x198>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e7f2      	b.n	8003d48 <_printf_float+0x198>
 8003d62:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003d66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d68:	4299      	cmp	r1, r3
 8003d6a:	db05      	blt.n	8003d78 <_printf_float+0x1c8>
 8003d6c:	6823      	ldr	r3, [r4, #0]
 8003d6e:	6121      	str	r1, [r4, #16]
 8003d70:	07d8      	lsls	r0, r3, #31
 8003d72:	d5ea      	bpl.n	8003d4a <_printf_float+0x19a>
 8003d74:	1c4b      	adds	r3, r1, #1
 8003d76:	e7e7      	b.n	8003d48 <_printf_float+0x198>
 8003d78:	2900      	cmp	r1, #0
 8003d7a:	bfcc      	ite	gt
 8003d7c:	2201      	movgt	r2, #1
 8003d7e:	f1c1 0202 	rsble	r2, r1, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	e7e0      	b.n	8003d48 <_printf_float+0x198>
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	055a      	lsls	r2, r3, #21
 8003d8a:	d407      	bmi.n	8003d9c <_printf_float+0x1ec>
 8003d8c:	6923      	ldr	r3, [r4, #16]
 8003d8e:	4642      	mov	r2, r8
 8003d90:	4631      	mov	r1, r6
 8003d92:	4628      	mov	r0, r5
 8003d94:	47b8      	blx	r7
 8003d96:	3001      	adds	r0, #1
 8003d98:	d12b      	bne.n	8003df2 <_printf_float+0x242>
 8003d9a:	e764      	b.n	8003c66 <_printf_float+0xb6>
 8003d9c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003da0:	f240 80dd 	bls.w	8003f5e <_printf_float+0x3ae>
 8003da4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003da8:	2200      	movs	r2, #0
 8003daa:	2300      	movs	r3, #0
 8003dac:	f7fc fdfc 	bl	80009a8 <__aeabi_dcmpeq>
 8003db0:	2800      	cmp	r0, #0
 8003db2:	d033      	beq.n	8003e1c <_printf_float+0x26c>
 8003db4:	2301      	movs	r3, #1
 8003db6:	4631      	mov	r1, r6
 8003db8:	4628      	mov	r0, r5
 8003dba:	4a35      	ldr	r2, [pc, #212]	; (8003e90 <_printf_float+0x2e0>)
 8003dbc:	47b8      	blx	r7
 8003dbe:	3001      	adds	r0, #1
 8003dc0:	f43f af51 	beq.w	8003c66 <_printf_float+0xb6>
 8003dc4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	db02      	blt.n	8003dd2 <_printf_float+0x222>
 8003dcc:	6823      	ldr	r3, [r4, #0]
 8003dce:	07d8      	lsls	r0, r3, #31
 8003dd0:	d50f      	bpl.n	8003df2 <_printf_float+0x242>
 8003dd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003dd6:	4631      	mov	r1, r6
 8003dd8:	4628      	mov	r0, r5
 8003dda:	47b8      	blx	r7
 8003ddc:	3001      	adds	r0, #1
 8003dde:	f43f af42 	beq.w	8003c66 <_printf_float+0xb6>
 8003de2:	f04f 0800 	mov.w	r8, #0
 8003de6:	f104 091a 	add.w	r9, r4, #26
 8003dea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003dec:	3b01      	subs	r3, #1
 8003dee:	4543      	cmp	r3, r8
 8003df0:	dc09      	bgt.n	8003e06 <_printf_float+0x256>
 8003df2:	6823      	ldr	r3, [r4, #0]
 8003df4:	079b      	lsls	r3, r3, #30
 8003df6:	f100 8104 	bmi.w	8004002 <_printf_float+0x452>
 8003dfa:	68e0      	ldr	r0, [r4, #12]
 8003dfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003dfe:	4298      	cmp	r0, r3
 8003e00:	bfb8      	it	lt
 8003e02:	4618      	movlt	r0, r3
 8003e04:	e731      	b.n	8003c6a <_printf_float+0xba>
 8003e06:	2301      	movs	r3, #1
 8003e08:	464a      	mov	r2, r9
 8003e0a:	4631      	mov	r1, r6
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	47b8      	blx	r7
 8003e10:	3001      	adds	r0, #1
 8003e12:	f43f af28 	beq.w	8003c66 <_printf_float+0xb6>
 8003e16:	f108 0801 	add.w	r8, r8, #1
 8003e1a:	e7e6      	b.n	8003dea <_printf_float+0x23a>
 8003e1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	dc38      	bgt.n	8003e94 <_printf_float+0x2e4>
 8003e22:	2301      	movs	r3, #1
 8003e24:	4631      	mov	r1, r6
 8003e26:	4628      	mov	r0, r5
 8003e28:	4a19      	ldr	r2, [pc, #100]	; (8003e90 <_printf_float+0x2e0>)
 8003e2a:	47b8      	blx	r7
 8003e2c:	3001      	adds	r0, #1
 8003e2e:	f43f af1a 	beq.w	8003c66 <_printf_float+0xb6>
 8003e32:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003e36:	4313      	orrs	r3, r2
 8003e38:	d102      	bne.n	8003e40 <_printf_float+0x290>
 8003e3a:	6823      	ldr	r3, [r4, #0]
 8003e3c:	07d9      	lsls	r1, r3, #31
 8003e3e:	d5d8      	bpl.n	8003df2 <_printf_float+0x242>
 8003e40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e44:	4631      	mov	r1, r6
 8003e46:	4628      	mov	r0, r5
 8003e48:	47b8      	blx	r7
 8003e4a:	3001      	adds	r0, #1
 8003e4c:	f43f af0b 	beq.w	8003c66 <_printf_float+0xb6>
 8003e50:	f04f 0900 	mov.w	r9, #0
 8003e54:	f104 0a1a 	add.w	sl, r4, #26
 8003e58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e5a:	425b      	negs	r3, r3
 8003e5c:	454b      	cmp	r3, r9
 8003e5e:	dc01      	bgt.n	8003e64 <_printf_float+0x2b4>
 8003e60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e62:	e794      	b.n	8003d8e <_printf_float+0x1de>
 8003e64:	2301      	movs	r3, #1
 8003e66:	4652      	mov	r2, sl
 8003e68:	4631      	mov	r1, r6
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	47b8      	blx	r7
 8003e6e:	3001      	adds	r0, #1
 8003e70:	f43f aef9 	beq.w	8003c66 <_printf_float+0xb6>
 8003e74:	f109 0901 	add.w	r9, r9, #1
 8003e78:	e7ee      	b.n	8003e58 <_printf_float+0x2a8>
 8003e7a:	bf00      	nop
 8003e7c:	7fefffff 	.word	0x7fefffff
 8003e80:	08008232 	.word	0x08008232
 8003e84:	08008236 	.word	0x08008236
 8003e88:	0800823a 	.word	0x0800823a
 8003e8c:	0800823e 	.word	0x0800823e
 8003e90:	08008242 	.word	0x08008242
 8003e94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	bfa8      	it	ge
 8003e9c:	461a      	movge	r2, r3
 8003e9e:	2a00      	cmp	r2, #0
 8003ea0:	4691      	mov	r9, r2
 8003ea2:	dc37      	bgt.n	8003f14 <_printf_float+0x364>
 8003ea4:	f04f 0b00 	mov.w	fp, #0
 8003ea8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003eac:	f104 021a 	add.w	r2, r4, #26
 8003eb0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003eb4:	ebaa 0309 	sub.w	r3, sl, r9
 8003eb8:	455b      	cmp	r3, fp
 8003eba:	dc33      	bgt.n	8003f24 <_printf_float+0x374>
 8003ebc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	db3b      	blt.n	8003f3c <_printf_float+0x38c>
 8003ec4:	6823      	ldr	r3, [r4, #0]
 8003ec6:	07da      	lsls	r2, r3, #31
 8003ec8:	d438      	bmi.n	8003f3c <_printf_float+0x38c>
 8003eca:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003ece:	eba2 0903 	sub.w	r9, r2, r3
 8003ed2:	eba2 020a 	sub.w	r2, r2, sl
 8003ed6:	4591      	cmp	r9, r2
 8003ed8:	bfa8      	it	ge
 8003eda:	4691      	movge	r9, r2
 8003edc:	f1b9 0f00 	cmp.w	r9, #0
 8003ee0:	dc34      	bgt.n	8003f4c <_printf_float+0x39c>
 8003ee2:	f04f 0800 	mov.w	r8, #0
 8003ee6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003eea:	f104 0a1a 	add.w	sl, r4, #26
 8003eee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003ef2:	1a9b      	subs	r3, r3, r2
 8003ef4:	eba3 0309 	sub.w	r3, r3, r9
 8003ef8:	4543      	cmp	r3, r8
 8003efa:	f77f af7a 	ble.w	8003df2 <_printf_float+0x242>
 8003efe:	2301      	movs	r3, #1
 8003f00:	4652      	mov	r2, sl
 8003f02:	4631      	mov	r1, r6
 8003f04:	4628      	mov	r0, r5
 8003f06:	47b8      	blx	r7
 8003f08:	3001      	adds	r0, #1
 8003f0a:	f43f aeac 	beq.w	8003c66 <_printf_float+0xb6>
 8003f0e:	f108 0801 	add.w	r8, r8, #1
 8003f12:	e7ec      	b.n	8003eee <_printf_float+0x33e>
 8003f14:	4613      	mov	r3, r2
 8003f16:	4631      	mov	r1, r6
 8003f18:	4642      	mov	r2, r8
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	47b8      	blx	r7
 8003f1e:	3001      	adds	r0, #1
 8003f20:	d1c0      	bne.n	8003ea4 <_printf_float+0x2f4>
 8003f22:	e6a0      	b.n	8003c66 <_printf_float+0xb6>
 8003f24:	2301      	movs	r3, #1
 8003f26:	4631      	mov	r1, r6
 8003f28:	4628      	mov	r0, r5
 8003f2a:	920b      	str	r2, [sp, #44]	; 0x2c
 8003f2c:	47b8      	blx	r7
 8003f2e:	3001      	adds	r0, #1
 8003f30:	f43f ae99 	beq.w	8003c66 <_printf_float+0xb6>
 8003f34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003f36:	f10b 0b01 	add.w	fp, fp, #1
 8003f3a:	e7b9      	b.n	8003eb0 <_printf_float+0x300>
 8003f3c:	4631      	mov	r1, r6
 8003f3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f42:	4628      	mov	r0, r5
 8003f44:	47b8      	blx	r7
 8003f46:	3001      	adds	r0, #1
 8003f48:	d1bf      	bne.n	8003eca <_printf_float+0x31a>
 8003f4a:	e68c      	b.n	8003c66 <_printf_float+0xb6>
 8003f4c:	464b      	mov	r3, r9
 8003f4e:	4631      	mov	r1, r6
 8003f50:	4628      	mov	r0, r5
 8003f52:	eb08 020a 	add.w	r2, r8, sl
 8003f56:	47b8      	blx	r7
 8003f58:	3001      	adds	r0, #1
 8003f5a:	d1c2      	bne.n	8003ee2 <_printf_float+0x332>
 8003f5c:	e683      	b.n	8003c66 <_printf_float+0xb6>
 8003f5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f60:	2a01      	cmp	r2, #1
 8003f62:	dc01      	bgt.n	8003f68 <_printf_float+0x3b8>
 8003f64:	07db      	lsls	r3, r3, #31
 8003f66:	d539      	bpl.n	8003fdc <_printf_float+0x42c>
 8003f68:	2301      	movs	r3, #1
 8003f6a:	4642      	mov	r2, r8
 8003f6c:	4631      	mov	r1, r6
 8003f6e:	4628      	mov	r0, r5
 8003f70:	47b8      	blx	r7
 8003f72:	3001      	adds	r0, #1
 8003f74:	f43f ae77 	beq.w	8003c66 <_printf_float+0xb6>
 8003f78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003f7c:	4631      	mov	r1, r6
 8003f7e:	4628      	mov	r0, r5
 8003f80:	47b8      	blx	r7
 8003f82:	3001      	adds	r0, #1
 8003f84:	f43f ae6f 	beq.w	8003c66 <_printf_float+0xb6>
 8003f88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8003f94:	f7fc fd08 	bl	80009a8 <__aeabi_dcmpeq>
 8003f98:	b9d8      	cbnz	r0, 8003fd2 <_printf_float+0x422>
 8003f9a:	f109 33ff 	add.w	r3, r9, #4294967295
 8003f9e:	f108 0201 	add.w	r2, r8, #1
 8003fa2:	4631      	mov	r1, r6
 8003fa4:	4628      	mov	r0, r5
 8003fa6:	47b8      	blx	r7
 8003fa8:	3001      	adds	r0, #1
 8003faa:	d10e      	bne.n	8003fca <_printf_float+0x41a>
 8003fac:	e65b      	b.n	8003c66 <_printf_float+0xb6>
 8003fae:	2301      	movs	r3, #1
 8003fb0:	464a      	mov	r2, r9
 8003fb2:	4631      	mov	r1, r6
 8003fb4:	4628      	mov	r0, r5
 8003fb6:	47b8      	blx	r7
 8003fb8:	3001      	adds	r0, #1
 8003fba:	f43f ae54 	beq.w	8003c66 <_printf_float+0xb6>
 8003fbe:	f108 0801 	add.w	r8, r8, #1
 8003fc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	4543      	cmp	r3, r8
 8003fc8:	dcf1      	bgt.n	8003fae <_printf_float+0x3fe>
 8003fca:	4653      	mov	r3, sl
 8003fcc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003fd0:	e6de      	b.n	8003d90 <_printf_float+0x1e0>
 8003fd2:	f04f 0800 	mov.w	r8, #0
 8003fd6:	f104 091a 	add.w	r9, r4, #26
 8003fda:	e7f2      	b.n	8003fc2 <_printf_float+0x412>
 8003fdc:	2301      	movs	r3, #1
 8003fde:	4642      	mov	r2, r8
 8003fe0:	e7df      	b.n	8003fa2 <_printf_float+0x3f2>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	464a      	mov	r2, r9
 8003fe6:	4631      	mov	r1, r6
 8003fe8:	4628      	mov	r0, r5
 8003fea:	47b8      	blx	r7
 8003fec:	3001      	adds	r0, #1
 8003fee:	f43f ae3a 	beq.w	8003c66 <_printf_float+0xb6>
 8003ff2:	f108 0801 	add.w	r8, r8, #1
 8003ff6:	68e3      	ldr	r3, [r4, #12]
 8003ff8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003ffa:	1a5b      	subs	r3, r3, r1
 8003ffc:	4543      	cmp	r3, r8
 8003ffe:	dcf0      	bgt.n	8003fe2 <_printf_float+0x432>
 8004000:	e6fb      	b.n	8003dfa <_printf_float+0x24a>
 8004002:	f04f 0800 	mov.w	r8, #0
 8004006:	f104 0919 	add.w	r9, r4, #25
 800400a:	e7f4      	b.n	8003ff6 <_printf_float+0x446>

0800400c <_printf_common>:
 800400c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004010:	4616      	mov	r6, r2
 8004012:	4699      	mov	r9, r3
 8004014:	688a      	ldr	r2, [r1, #8]
 8004016:	690b      	ldr	r3, [r1, #16]
 8004018:	4607      	mov	r7, r0
 800401a:	4293      	cmp	r3, r2
 800401c:	bfb8      	it	lt
 800401e:	4613      	movlt	r3, r2
 8004020:	6033      	str	r3, [r6, #0]
 8004022:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004026:	460c      	mov	r4, r1
 8004028:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800402c:	b10a      	cbz	r2, 8004032 <_printf_common+0x26>
 800402e:	3301      	adds	r3, #1
 8004030:	6033      	str	r3, [r6, #0]
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	0699      	lsls	r1, r3, #26
 8004036:	bf42      	ittt	mi
 8004038:	6833      	ldrmi	r3, [r6, #0]
 800403a:	3302      	addmi	r3, #2
 800403c:	6033      	strmi	r3, [r6, #0]
 800403e:	6825      	ldr	r5, [r4, #0]
 8004040:	f015 0506 	ands.w	r5, r5, #6
 8004044:	d106      	bne.n	8004054 <_printf_common+0x48>
 8004046:	f104 0a19 	add.w	sl, r4, #25
 800404a:	68e3      	ldr	r3, [r4, #12]
 800404c:	6832      	ldr	r2, [r6, #0]
 800404e:	1a9b      	subs	r3, r3, r2
 8004050:	42ab      	cmp	r3, r5
 8004052:	dc2b      	bgt.n	80040ac <_printf_common+0xa0>
 8004054:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004058:	1e13      	subs	r3, r2, #0
 800405a:	6822      	ldr	r2, [r4, #0]
 800405c:	bf18      	it	ne
 800405e:	2301      	movne	r3, #1
 8004060:	0692      	lsls	r2, r2, #26
 8004062:	d430      	bmi.n	80040c6 <_printf_common+0xba>
 8004064:	4649      	mov	r1, r9
 8004066:	4638      	mov	r0, r7
 8004068:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800406c:	47c0      	blx	r8
 800406e:	3001      	adds	r0, #1
 8004070:	d023      	beq.n	80040ba <_printf_common+0xae>
 8004072:	6823      	ldr	r3, [r4, #0]
 8004074:	6922      	ldr	r2, [r4, #16]
 8004076:	f003 0306 	and.w	r3, r3, #6
 800407a:	2b04      	cmp	r3, #4
 800407c:	bf14      	ite	ne
 800407e:	2500      	movne	r5, #0
 8004080:	6833      	ldreq	r3, [r6, #0]
 8004082:	f04f 0600 	mov.w	r6, #0
 8004086:	bf08      	it	eq
 8004088:	68e5      	ldreq	r5, [r4, #12]
 800408a:	f104 041a 	add.w	r4, r4, #26
 800408e:	bf08      	it	eq
 8004090:	1aed      	subeq	r5, r5, r3
 8004092:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004096:	bf08      	it	eq
 8004098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800409c:	4293      	cmp	r3, r2
 800409e:	bfc4      	itt	gt
 80040a0:	1a9b      	subgt	r3, r3, r2
 80040a2:	18ed      	addgt	r5, r5, r3
 80040a4:	42b5      	cmp	r5, r6
 80040a6:	d11a      	bne.n	80040de <_printf_common+0xd2>
 80040a8:	2000      	movs	r0, #0
 80040aa:	e008      	b.n	80040be <_printf_common+0xb2>
 80040ac:	2301      	movs	r3, #1
 80040ae:	4652      	mov	r2, sl
 80040b0:	4649      	mov	r1, r9
 80040b2:	4638      	mov	r0, r7
 80040b4:	47c0      	blx	r8
 80040b6:	3001      	adds	r0, #1
 80040b8:	d103      	bne.n	80040c2 <_printf_common+0xb6>
 80040ba:	f04f 30ff 	mov.w	r0, #4294967295
 80040be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040c2:	3501      	adds	r5, #1
 80040c4:	e7c1      	b.n	800404a <_printf_common+0x3e>
 80040c6:	2030      	movs	r0, #48	; 0x30
 80040c8:	18e1      	adds	r1, r4, r3
 80040ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040d4:	4422      	add	r2, r4
 80040d6:	3302      	adds	r3, #2
 80040d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040dc:	e7c2      	b.n	8004064 <_printf_common+0x58>
 80040de:	2301      	movs	r3, #1
 80040e0:	4622      	mov	r2, r4
 80040e2:	4649      	mov	r1, r9
 80040e4:	4638      	mov	r0, r7
 80040e6:	47c0      	blx	r8
 80040e8:	3001      	adds	r0, #1
 80040ea:	d0e6      	beq.n	80040ba <_printf_common+0xae>
 80040ec:	3601      	adds	r6, #1
 80040ee:	e7d9      	b.n	80040a4 <_printf_common+0x98>

080040f0 <_printf_i>:
 80040f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040f4:	7e0f      	ldrb	r7, [r1, #24]
 80040f6:	4691      	mov	r9, r2
 80040f8:	2f78      	cmp	r7, #120	; 0x78
 80040fa:	4680      	mov	r8, r0
 80040fc:	460c      	mov	r4, r1
 80040fe:	469a      	mov	sl, r3
 8004100:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004102:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004106:	d807      	bhi.n	8004118 <_printf_i+0x28>
 8004108:	2f62      	cmp	r7, #98	; 0x62
 800410a:	d80a      	bhi.n	8004122 <_printf_i+0x32>
 800410c:	2f00      	cmp	r7, #0
 800410e:	f000 80d5 	beq.w	80042bc <_printf_i+0x1cc>
 8004112:	2f58      	cmp	r7, #88	; 0x58
 8004114:	f000 80c1 	beq.w	800429a <_printf_i+0x1aa>
 8004118:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800411c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004120:	e03a      	b.n	8004198 <_printf_i+0xa8>
 8004122:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004126:	2b15      	cmp	r3, #21
 8004128:	d8f6      	bhi.n	8004118 <_printf_i+0x28>
 800412a:	a101      	add	r1, pc, #4	; (adr r1, 8004130 <_printf_i+0x40>)
 800412c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004130:	08004189 	.word	0x08004189
 8004134:	0800419d 	.word	0x0800419d
 8004138:	08004119 	.word	0x08004119
 800413c:	08004119 	.word	0x08004119
 8004140:	08004119 	.word	0x08004119
 8004144:	08004119 	.word	0x08004119
 8004148:	0800419d 	.word	0x0800419d
 800414c:	08004119 	.word	0x08004119
 8004150:	08004119 	.word	0x08004119
 8004154:	08004119 	.word	0x08004119
 8004158:	08004119 	.word	0x08004119
 800415c:	080042a3 	.word	0x080042a3
 8004160:	080041c9 	.word	0x080041c9
 8004164:	0800425d 	.word	0x0800425d
 8004168:	08004119 	.word	0x08004119
 800416c:	08004119 	.word	0x08004119
 8004170:	080042c5 	.word	0x080042c5
 8004174:	08004119 	.word	0x08004119
 8004178:	080041c9 	.word	0x080041c9
 800417c:	08004119 	.word	0x08004119
 8004180:	08004119 	.word	0x08004119
 8004184:	08004265 	.word	0x08004265
 8004188:	682b      	ldr	r3, [r5, #0]
 800418a:	1d1a      	adds	r2, r3, #4
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	602a      	str	r2, [r5, #0]
 8004190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004194:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004198:	2301      	movs	r3, #1
 800419a:	e0a0      	b.n	80042de <_printf_i+0x1ee>
 800419c:	6820      	ldr	r0, [r4, #0]
 800419e:	682b      	ldr	r3, [r5, #0]
 80041a0:	0607      	lsls	r7, r0, #24
 80041a2:	f103 0104 	add.w	r1, r3, #4
 80041a6:	6029      	str	r1, [r5, #0]
 80041a8:	d501      	bpl.n	80041ae <_printf_i+0xbe>
 80041aa:	681e      	ldr	r6, [r3, #0]
 80041ac:	e003      	b.n	80041b6 <_printf_i+0xc6>
 80041ae:	0646      	lsls	r6, r0, #25
 80041b0:	d5fb      	bpl.n	80041aa <_printf_i+0xba>
 80041b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80041b6:	2e00      	cmp	r6, #0
 80041b8:	da03      	bge.n	80041c2 <_printf_i+0xd2>
 80041ba:	232d      	movs	r3, #45	; 0x2d
 80041bc:	4276      	negs	r6, r6
 80041be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041c2:	230a      	movs	r3, #10
 80041c4:	4859      	ldr	r0, [pc, #356]	; (800432c <_printf_i+0x23c>)
 80041c6:	e012      	b.n	80041ee <_printf_i+0xfe>
 80041c8:	682b      	ldr	r3, [r5, #0]
 80041ca:	6820      	ldr	r0, [r4, #0]
 80041cc:	1d19      	adds	r1, r3, #4
 80041ce:	6029      	str	r1, [r5, #0]
 80041d0:	0605      	lsls	r5, r0, #24
 80041d2:	d501      	bpl.n	80041d8 <_printf_i+0xe8>
 80041d4:	681e      	ldr	r6, [r3, #0]
 80041d6:	e002      	b.n	80041de <_printf_i+0xee>
 80041d8:	0641      	lsls	r1, r0, #25
 80041da:	d5fb      	bpl.n	80041d4 <_printf_i+0xe4>
 80041dc:	881e      	ldrh	r6, [r3, #0]
 80041de:	2f6f      	cmp	r7, #111	; 0x6f
 80041e0:	bf0c      	ite	eq
 80041e2:	2308      	moveq	r3, #8
 80041e4:	230a      	movne	r3, #10
 80041e6:	4851      	ldr	r0, [pc, #324]	; (800432c <_printf_i+0x23c>)
 80041e8:	2100      	movs	r1, #0
 80041ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041ee:	6865      	ldr	r5, [r4, #4]
 80041f0:	2d00      	cmp	r5, #0
 80041f2:	bfa8      	it	ge
 80041f4:	6821      	ldrge	r1, [r4, #0]
 80041f6:	60a5      	str	r5, [r4, #8]
 80041f8:	bfa4      	itt	ge
 80041fa:	f021 0104 	bicge.w	r1, r1, #4
 80041fe:	6021      	strge	r1, [r4, #0]
 8004200:	b90e      	cbnz	r6, 8004206 <_printf_i+0x116>
 8004202:	2d00      	cmp	r5, #0
 8004204:	d04b      	beq.n	800429e <_printf_i+0x1ae>
 8004206:	4615      	mov	r5, r2
 8004208:	fbb6 f1f3 	udiv	r1, r6, r3
 800420c:	fb03 6711 	mls	r7, r3, r1, r6
 8004210:	5dc7      	ldrb	r7, [r0, r7]
 8004212:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004216:	4637      	mov	r7, r6
 8004218:	42bb      	cmp	r3, r7
 800421a:	460e      	mov	r6, r1
 800421c:	d9f4      	bls.n	8004208 <_printf_i+0x118>
 800421e:	2b08      	cmp	r3, #8
 8004220:	d10b      	bne.n	800423a <_printf_i+0x14a>
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	07de      	lsls	r6, r3, #31
 8004226:	d508      	bpl.n	800423a <_printf_i+0x14a>
 8004228:	6923      	ldr	r3, [r4, #16]
 800422a:	6861      	ldr	r1, [r4, #4]
 800422c:	4299      	cmp	r1, r3
 800422e:	bfde      	ittt	le
 8004230:	2330      	movle	r3, #48	; 0x30
 8004232:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004236:	f105 35ff 	addle.w	r5, r5, #4294967295
 800423a:	1b52      	subs	r2, r2, r5
 800423c:	6122      	str	r2, [r4, #16]
 800423e:	464b      	mov	r3, r9
 8004240:	4621      	mov	r1, r4
 8004242:	4640      	mov	r0, r8
 8004244:	f8cd a000 	str.w	sl, [sp]
 8004248:	aa03      	add	r2, sp, #12
 800424a:	f7ff fedf 	bl	800400c <_printf_common>
 800424e:	3001      	adds	r0, #1
 8004250:	d14a      	bne.n	80042e8 <_printf_i+0x1f8>
 8004252:	f04f 30ff 	mov.w	r0, #4294967295
 8004256:	b004      	add	sp, #16
 8004258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800425c:	6823      	ldr	r3, [r4, #0]
 800425e:	f043 0320 	orr.w	r3, r3, #32
 8004262:	6023      	str	r3, [r4, #0]
 8004264:	2778      	movs	r7, #120	; 0x78
 8004266:	4832      	ldr	r0, [pc, #200]	; (8004330 <_printf_i+0x240>)
 8004268:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800426c:	6823      	ldr	r3, [r4, #0]
 800426e:	6829      	ldr	r1, [r5, #0]
 8004270:	061f      	lsls	r7, r3, #24
 8004272:	f851 6b04 	ldr.w	r6, [r1], #4
 8004276:	d402      	bmi.n	800427e <_printf_i+0x18e>
 8004278:	065f      	lsls	r7, r3, #25
 800427a:	bf48      	it	mi
 800427c:	b2b6      	uxthmi	r6, r6
 800427e:	07df      	lsls	r7, r3, #31
 8004280:	bf48      	it	mi
 8004282:	f043 0320 	orrmi.w	r3, r3, #32
 8004286:	6029      	str	r1, [r5, #0]
 8004288:	bf48      	it	mi
 800428a:	6023      	strmi	r3, [r4, #0]
 800428c:	b91e      	cbnz	r6, 8004296 <_printf_i+0x1a6>
 800428e:	6823      	ldr	r3, [r4, #0]
 8004290:	f023 0320 	bic.w	r3, r3, #32
 8004294:	6023      	str	r3, [r4, #0]
 8004296:	2310      	movs	r3, #16
 8004298:	e7a6      	b.n	80041e8 <_printf_i+0xf8>
 800429a:	4824      	ldr	r0, [pc, #144]	; (800432c <_printf_i+0x23c>)
 800429c:	e7e4      	b.n	8004268 <_printf_i+0x178>
 800429e:	4615      	mov	r5, r2
 80042a0:	e7bd      	b.n	800421e <_printf_i+0x12e>
 80042a2:	682b      	ldr	r3, [r5, #0]
 80042a4:	6826      	ldr	r6, [r4, #0]
 80042a6:	1d18      	adds	r0, r3, #4
 80042a8:	6961      	ldr	r1, [r4, #20]
 80042aa:	6028      	str	r0, [r5, #0]
 80042ac:	0635      	lsls	r5, r6, #24
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	d501      	bpl.n	80042b6 <_printf_i+0x1c6>
 80042b2:	6019      	str	r1, [r3, #0]
 80042b4:	e002      	b.n	80042bc <_printf_i+0x1cc>
 80042b6:	0670      	lsls	r0, r6, #25
 80042b8:	d5fb      	bpl.n	80042b2 <_printf_i+0x1c2>
 80042ba:	8019      	strh	r1, [r3, #0]
 80042bc:	2300      	movs	r3, #0
 80042be:	4615      	mov	r5, r2
 80042c0:	6123      	str	r3, [r4, #16]
 80042c2:	e7bc      	b.n	800423e <_printf_i+0x14e>
 80042c4:	682b      	ldr	r3, [r5, #0]
 80042c6:	2100      	movs	r1, #0
 80042c8:	1d1a      	adds	r2, r3, #4
 80042ca:	602a      	str	r2, [r5, #0]
 80042cc:	681d      	ldr	r5, [r3, #0]
 80042ce:	6862      	ldr	r2, [r4, #4]
 80042d0:	4628      	mov	r0, r5
 80042d2:	f000 fbe2 	bl	8004a9a <memchr>
 80042d6:	b108      	cbz	r0, 80042dc <_printf_i+0x1ec>
 80042d8:	1b40      	subs	r0, r0, r5
 80042da:	6060      	str	r0, [r4, #4]
 80042dc:	6863      	ldr	r3, [r4, #4]
 80042de:	6123      	str	r3, [r4, #16]
 80042e0:	2300      	movs	r3, #0
 80042e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042e6:	e7aa      	b.n	800423e <_printf_i+0x14e>
 80042e8:	462a      	mov	r2, r5
 80042ea:	4649      	mov	r1, r9
 80042ec:	4640      	mov	r0, r8
 80042ee:	6923      	ldr	r3, [r4, #16]
 80042f0:	47d0      	blx	sl
 80042f2:	3001      	adds	r0, #1
 80042f4:	d0ad      	beq.n	8004252 <_printf_i+0x162>
 80042f6:	6823      	ldr	r3, [r4, #0]
 80042f8:	079b      	lsls	r3, r3, #30
 80042fa:	d413      	bmi.n	8004324 <_printf_i+0x234>
 80042fc:	68e0      	ldr	r0, [r4, #12]
 80042fe:	9b03      	ldr	r3, [sp, #12]
 8004300:	4298      	cmp	r0, r3
 8004302:	bfb8      	it	lt
 8004304:	4618      	movlt	r0, r3
 8004306:	e7a6      	b.n	8004256 <_printf_i+0x166>
 8004308:	2301      	movs	r3, #1
 800430a:	4632      	mov	r2, r6
 800430c:	4649      	mov	r1, r9
 800430e:	4640      	mov	r0, r8
 8004310:	47d0      	blx	sl
 8004312:	3001      	adds	r0, #1
 8004314:	d09d      	beq.n	8004252 <_printf_i+0x162>
 8004316:	3501      	adds	r5, #1
 8004318:	68e3      	ldr	r3, [r4, #12]
 800431a:	9903      	ldr	r1, [sp, #12]
 800431c:	1a5b      	subs	r3, r3, r1
 800431e:	42ab      	cmp	r3, r5
 8004320:	dcf2      	bgt.n	8004308 <_printf_i+0x218>
 8004322:	e7eb      	b.n	80042fc <_printf_i+0x20c>
 8004324:	2500      	movs	r5, #0
 8004326:	f104 0619 	add.w	r6, r4, #25
 800432a:	e7f5      	b.n	8004318 <_printf_i+0x228>
 800432c:	08008244 	.word	0x08008244
 8004330:	08008255 	.word	0x08008255

08004334 <_scanf_float>:
 8004334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004338:	b087      	sub	sp, #28
 800433a:	9303      	str	r3, [sp, #12]
 800433c:	688b      	ldr	r3, [r1, #8]
 800433e:	4617      	mov	r7, r2
 8004340:	1e5a      	subs	r2, r3, #1
 8004342:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004346:	bf85      	ittet	hi
 8004348:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800434c:	195b      	addhi	r3, r3, r5
 800434e:	2300      	movls	r3, #0
 8004350:	9302      	strhi	r3, [sp, #8]
 8004352:	bf88      	it	hi
 8004354:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004358:	468b      	mov	fp, r1
 800435a:	f04f 0500 	mov.w	r5, #0
 800435e:	bf8c      	ite	hi
 8004360:	608b      	strhi	r3, [r1, #8]
 8004362:	9302      	strls	r3, [sp, #8]
 8004364:	680b      	ldr	r3, [r1, #0]
 8004366:	4680      	mov	r8, r0
 8004368:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800436c:	f84b 3b1c 	str.w	r3, [fp], #28
 8004370:	460c      	mov	r4, r1
 8004372:	465e      	mov	r6, fp
 8004374:	46aa      	mov	sl, r5
 8004376:	46a9      	mov	r9, r5
 8004378:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800437c:	9501      	str	r5, [sp, #4]
 800437e:	68a2      	ldr	r2, [r4, #8]
 8004380:	b152      	cbz	r2, 8004398 <_scanf_float+0x64>
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	2b4e      	cmp	r3, #78	; 0x4e
 8004388:	d864      	bhi.n	8004454 <_scanf_float+0x120>
 800438a:	2b40      	cmp	r3, #64	; 0x40
 800438c:	d83c      	bhi.n	8004408 <_scanf_float+0xd4>
 800438e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004392:	b2c8      	uxtb	r0, r1
 8004394:	280e      	cmp	r0, #14
 8004396:	d93a      	bls.n	800440e <_scanf_float+0xda>
 8004398:	f1b9 0f00 	cmp.w	r9, #0
 800439c:	d003      	beq.n	80043a6 <_scanf_float+0x72>
 800439e:	6823      	ldr	r3, [r4, #0]
 80043a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043a4:	6023      	str	r3, [r4, #0]
 80043a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80043aa:	f1ba 0f01 	cmp.w	sl, #1
 80043ae:	f200 8113 	bhi.w	80045d8 <_scanf_float+0x2a4>
 80043b2:	455e      	cmp	r6, fp
 80043b4:	f200 8105 	bhi.w	80045c2 <_scanf_float+0x28e>
 80043b8:	2501      	movs	r5, #1
 80043ba:	4628      	mov	r0, r5
 80043bc:	b007      	add	sp, #28
 80043be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043c2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80043c6:	2a0d      	cmp	r2, #13
 80043c8:	d8e6      	bhi.n	8004398 <_scanf_float+0x64>
 80043ca:	a101      	add	r1, pc, #4	; (adr r1, 80043d0 <_scanf_float+0x9c>)
 80043cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80043d0:	0800450f 	.word	0x0800450f
 80043d4:	08004399 	.word	0x08004399
 80043d8:	08004399 	.word	0x08004399
 80043dc:	08004399 	.word	0x08004399
 80043e0:	0800456f 	.word	0x0800456f
 80043e4:	08004547 	.word	0x08004547
 80043e8:	08004399 	.word	0x08004399
 80043ec:	08004399 	.word	0x08004399
 80043f0:	0800451d 	.word	0x0800451d
 80043f4:	08004399 	.word	0x08004399
 80043f8:	08004399 	.word	0x08004399
 80043fc:	08004399 	.word	0x08004399
 8004400:	08004399 	.word	0x08004399
 8004404:	080044d5 	.word	0x080044d5
 8004408:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800440c:	e7db      	b.n	80043c6 <_scanf_float+0x92>
 800440e:	290e      	cmp	r1, #14
 8004410:	d8c2      	bhi.n	8004398 <_scanf_float+0x64>
 8004412:	a001      	add	r0, pc, #4	; (adr r0, 8004418 <_scanf_float+0xe4>)
 8004414:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004418:	080044c7 	.word	0x080044c7
 800441c:	08004399 	.word	0x08004399
 8004420:	080044c7 	.word	0x080044c7
 8004424:	0800455b 	.word	0x0800455b
 8004428:	08004399 	.word	0x08004399
 800442c:	08004475 	.word	0x08004475
 8004430:	080044b1 	.word	0x080044b1
 8004434:	080044b1 	.word	0x080044b1
 8004438:	080044b1 	.word	0x080044b1
 800443c:	080044b1 	.word	0x080044b1
 8004440:	080044b1 	.word	0x080044b1
 8004444:	080044b1 	.word	0x080044b1
 8004448:	080044b1 	.word	0x080044b1
 800444c:	080044b1 	.word	0x080044b1
 8004450:	080044b1 	.word	0x080044b1
 8004454:	2b6e      	cmp	r3, #110	; 0x6e
 8004456:	d809      	bhi.n	800446c <_scanf_float+0x138>
 8004458:	2b60      	cmp	r3, #96	; 0x60
 800445a:	d8b2      	bhi.n	80043c2 <_scanf_float+0x8e>
 800445c:	2b54      	cmp	r3, #84	; 0x54
 800445e:	d077      	beq.n	8004550 <_scanf_float+0x21c>
 8004460:	2b59      	cmp	r3, #89	; 0x59
 8004462:	d199      	bne.n	8004398 <_scanf_float+0x64>
 8004464:	2d07      	cmp	r5, #7
 8004466:	d197      	bne.n	8004398 <_scanf_float+0x64>
 8004468:	2508      	movs	r5, #8
 800446a:	e029      	b.n	80044c0 <_scanf_float+0x18c>
 800446c:	2b74      	cmp	r3, #116	; 0x74
 800446e:	d06f      	beq.n	8004550 <_scanf_float+0x21c>
 8004470:	2b79      	cmp	r3, #121	; 0x79
 8004472:	e7f6      	b.n	8004462 <_scanf_float+0x12e>
 8004474:	6821      	ldr	r1, [r4, #0]
 8004476:	05c8      	lsls	r0, r1, #23
 8004478:	d51a      	bpl.n	80044b0 <_scanf_float+0x17c>
 800447a:	9b02      	ldr	r3, [sp, #8]
 800447c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004480:	6021      	str	r1, [r4, #0]
 8004482:	f109 0901 	add.w	r9, r9, #1
 8004486:	b11b      	cbz	r3, 8004490 <_scanf_float+0x15c>
 8004488:	3b01      	subs	r3, #1
 800448a:	3201      	adds	r2, #1
 800448c:	9302      	str	r3, [sp, #8]
 800448e:	60a2      	str	r2, [r4, #8]
 8004490:	68a3      	ldr	r3, [r4, #8]
 8004492:	3b01      	subs	r3, #1
 8004494:	60a3      	str	r3, [r4, #8]
 8004496:	6923      	ldr	r3, [r4, #16]
 8004498:	3301      	adds	r3, #1
 800449a:	6123      	str	r3, [r4, #16]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3b01      	subs	r3, #1
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	607b      	str	r3, [r7, #4]
 80044a4:	f340 8084 	ble.w	80045b0 <_scanf_float+0x27c>
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	3301      	adds	r3, #1
 80044ac:	603b      	str	r3, [r7, #0]
 80044ae:	e766      	b.n	800437e <_scanf_float+0x4a>
 80044b0:	eb1a 0f05 	cmn.w	sl, r5
 80044b4:	f47f af70 	bne.w	8004398 <_scanf_float+0x64>
 80044b8:	6822      	ldr	r2, [r4, #0]
 80044ba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80044be:	6022      	str	r2, [r4, #0]
 80044c0:	f806 3b01 	strb.w	r3, [r6], #1
 80044c4:	e7e4      	b.n	8004490 <_scanf_float+0x15c>
 80044c6:	6822      	ldr	r2, [r4, #0]
 80044c8:	0610      	lsls	r0, r2, #24
 80044ca:	f57f af65 	bpl.w	8004398 <_scanf_float+0x64>
 80044ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044d2:	e7f4      	b.n	80044be <_scanf_float+0x18a>
 80044d4:	f1ba 0f00 	cmp.w	sl, #0
 80044d8:	d10e      	bne.n	80044f8 <_scanf_float+0x1c4>
 80044da:	f1b9 0f00 	cmp.w	r9, #0
 80044de:	d10e      	bne.n	80044fe <_scanf_float+0x1ca>
 80044e0:	6822      	ldr	r2, [r4, #0]
 80044e2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80044e6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80044ea:	d108      	bne.n	80044fe <_scanf_float+0x1ca>
 80044ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80044f0:	f04f 0a01 	mov.w	sl, #1
 80044f4:	6022      	str	r2, [r4, #0]
 80044f6:	e7e3      	b.n	80044c0 <_scanf_float+0x18c>
 80044f8:	f1ba 0f02 	cmp.w	sl, #2
 80044fc:	d055      	beq.n	80045aa <_scanf_float+0x276>
 80044fe:	2d01      	cmp	r5, #1
 8004500:	d002      	beq.n	8004508 <_scanf_float+0x1d4>
 8004502:	2d04      	cmp	r5, #4
 8004504:	f47f af48 	bne.w	8004398 <_scanf_float+0x64>
 8004508:	3501      	adds	r5, #1
 800450a:	b2ed      	uxtb	r5, r5
 800450c:	e7d8      	b.n	80044c0 <_scanf_float+0x18c>
 800450e:	f1ba 0f01 	cmp.w	sl, #1
 8004512:	f47f af41 	bne.w	8004398 <_scanf_float+0x64>
 8004516:	f04f 0a02 	mov.w	sl, #2
 800451a:	e7d1      	b.n	80044c0 <_scanf_float+0x18c>
 800451c:	b97d      	cbnz	r5, 800453e <_scanf_float+0x20a>
 800451e:	f1b9 0f00 	cmp.w	r9, #0
 8004522:	f47f af3c 	bne.w	800439e <_scanf_float+0x6a>
 8004526:	6822      	ldr	r2, [r4, #0]
 8004528:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800452c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004530:	f47f af39 	bne.w	80043a6 <_scanf_float+0x72>
 8004534:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004538:	2501      	movs	r5, #1
 800453a:	6022      	str	r2, [r4, #0]
 800453c:	e7c0      	b.n	80044c0 <_scanf_float+0x18c>
 800453e:	2d03      	cmp	r5, #3
 8004540:	d0e2      	beq.n	8004508 <_scanf_float+0x1d4>
 8004542:	2d05      	cmp	r5, #5
 8004544:	e7de      	b.n	8004504 <_scanf_float+0x1d0>
 8004546:	2d02      	cmp	r5, #2
 8004548:	f47f af26 	bne.w	8004398 <_scanf_float+0x64>
 800454c:	2503      	movs	r5, #3
 800454e:	e7b7      	b.n	80044c0 <_scanf_float+0x18c>
 8004550:	2d06      	cmp	r5, #6
 8004552:	f47f af21 	bne.w	8004398 <_scanf_float+0x64>
 8004556:	2507      	movs	r5, #7
 8004558:	e7b2      	b.n	80044c0 <_scanf_float+0x18c>
 800455a:	6822      	ldr	r2, [r4, #0]
 800455c:	0591      	lsls	r1, r2, #22
 800455e:	f57f af1b 	bpl.w	8004398 <_scanf_float+0x64>
 8004562:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004566:	6022      	str	r2, [r4, #0]
 8004568:	f8cd 9004 	str.w	r9, [sp, #4]
 800456c:	e7a8      	b.n	80044c0 <_scanf_float+0x18c>
 800456e:	6822      	ldr	r2, [r4, #0]
 8004570:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004574:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004578:	d006      	beq.n	8004588 <_scanf_float+0x254>
 800457a:	0550      	lsls	r0, r2, #21
 800457c:	f57f af0c 	bpl.w	8004398 <_scanf_float+0x64>
 8004580:	f1b9 0f00 	cmp.w	r9, #0
 8004584:	f43f af0f 	beq.w	80043a6 <_scanf_float+0x72>
 8004588:	0591      	lsls	r1, r2, #22
 800458a:	bf58      	it	pl
 800458c:	9901      	ldrpl	r1, [sp, #4]
 800458e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004592:	bf58      	it	pl
 8004594:	eba9 0101 	subpl.w	r1, r9, r1
 8004598:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800459c:	f04f 0900 	mov.w	r9, #0
 80045a0:	bf58      	it	pl
 80045a2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80045a6:	6022      	str	r2, [r4, #0]
 80045a8:	e78a      	b.n	80044c0 <_scanf_float+0x18c>
 80045aa:	f04f 0a03 	mov.w	sl, #3
 80045ae:	e787      	b.n	80044c0 <_scanf_float+0x18c>
 80045b0:	4639      	mov	r1, r7
 80045b2:	4640      	mov	r0, r8
 80045b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80045b8:	4798      	blx	r3
 80045ba:	2800      	cmp	r0, #0
 80045bc:	f43f aedf 	beq.w	800437e <_scanf_float+0x4a>
 80045c0:	e6ea      	b.n	8004398 <_scanf_float+0x64>
 80045c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80045c6:	463a      	mov	r2, r7
 80045c8:	4640      	mov	r0, r8
 80045ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80045ce:	4798      	blx	r3
 80045d0:	6923      	ldr	r3, [r4, #16]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	6123      	str	r3, [r4, #16]
 80045d6:	e6ec      	b.n	80043b2 <_scanf_float+0x7e>
 80045d8:	1e6b      	subs	r3, r5, #1
 80045da:	2b06      	cmp	r3, #6
 80045dc:	d825      	bhi.n	800462a <_scanf_float+0x2f6>
 80045de:	2d02      	cmp	r5, #2
 80045e0:	d836      	bhi.n	8004650 <_scanf_float+0x31c>
 80045e2:	455e      	cmp	r6, fp
 80045e4:	f67f aee8 	bls.w	80043b8 <_scanf_float+0x84>
 80045e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80045ec:	463a      	mov	r2, r7
 80045ee:	4640      	mov	r0, r8
 80045f0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80045f4:	4798      	blx	r3
 80045f6:	6923      	ldr	r3, [r4, #16]
 80045f8:	3b01      	subs	r3, #1
 80045fa:	6123      	str	r3, [r4, #16]
 80045fc:	e7f1      	b.n	80045e2 <_scanf_float+0x2ae>
 80045fe:	9802      	ldr	r0, [sp, #8]
 8004600:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004604:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004608:	463a      	mov	r2, r7
 800460a:	9002      	str	r0, [sp, #8]
 800460c:	4640      	mov	r0, r8
 800460e:	4798      	blx	r3
 8004610:	6923      	ldr	r3, [r4, #16]
 8004612:	3b01      	subs	r3, #1
 8004614:	6123      	str	r3, [r4, #16]
 8004616:	f10a 3aff 	add.w	sl, sl, #4294967295
 800461a:	fa5f fa8a 	uxtb.w	sl, sl
 800461e:	f1ba 0f02 	cmp.w	sl, #2
 8004622:	d1ec      	bne.n	80045fe <_scanf_float+0x2ca>
 8004624:	3d03      	subs	r5, #3
 8004626:	b2ed      	uxtb	r5, r5
 8004628:	1b76      	subs	r6, r6, r5
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	05da      	lsls	r2, r3, #23
 800462e:	d52f      	bpl.n	8004690 <_scanf_float+0x35c>
 8004630:	055b      	lsls	r3, r3, #21
 8004632:	d510      	bpl.n	8004656 <_scanf_float+0x322>
 8004634:	455e      	cmp	r6, fp
 8004636:	f67f aebf 	bls.w	80043b8 <_scanf_float+0x84>
 800463a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800463e:	463a      	mov	r2, r7
 8004640:	4640      	mov	r0, r8
 8004642:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004646:	4798      	blx	r3
 8004648:	6923      	ldr	r3, [r4, #16]
 800464a:	3b01      	subs	r3, #1
 800464c:	6123      	str	r3, [r4, #16]
 800464e:	e7f1      	b.n	8004634 <_scanf_float+0x300>
 8004650:	46aa      	mov	sl, r5
 8004652:	9602      	str	r6, [sp, #8]
 8004654:	e7df      	b.n	8004616 <_scanf_float+0x2e2>
 8004656:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800465a:	6923      	ldr	r3, [r4, #16]
 800465c:	2965      	cmp	r1, #101	; 0x65
 800465e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004662:	f106 35ff 	add.w	r5, r6, #4294967295
 8004666:	6123      	str	r3, [r4, #16]
 8004668:	d00c      	beq.n	8004684 <_scanf_float+0x350>
 800466a:	2945      	cmp	r1, #69	; 0x45
 800466c:	d00a      	beq.n	8004684 <_scanf_float+0x350>
 800466e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004672:	463a      	mov	r2, r7
 8004674:	4640      	mov	r0, r8
 8004676:	4798      	blx	r3
 8004678:	6923      	ldr	r3, [r4, #16]
 800467a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800467e:	3b01      	subs	r3, #1
 8004680:	1eb5      	subs	r5, r6, #2
 8004682:	6123      	str	r3, [r4, #16]
 8004684:	463a      	mov	r2, r7
 8004686:	4640      	mov	r0, r8
 8004688:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800468c:	4798      	blx	r3
 800468e:	462e      	mov	r6, r5
 8004690:	6825      	ldr	r5, [r4, #0]
 8004692:	f015 0510 	ands.w	r5, r5, #16
 8004696:	d155      	bne.n	8004744 <_scanf_float+0x410>
 8004698:	7035      	strb	r5, [r6, #0]
 800469a:	6823      	ldr	r3, [r4, #0]
 800469c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a4:	d11d      	bne.n	80046e2 <_scanf_float+0x3ae>
 80046a6:	9b01      	ldr	r3, [sp, #4]
 80046a8:	454b      	cmp	r3, r9
 80046aa:	eba3 0209 	sub.w	r2, r3, r9
 80046ae:	d125      	bne.n	80046fc <_scanf_float+0x3c8>
 80046b0:	2200      	movs	r2, #0
 80046b2:	4659      	mov	r1, fp
 80046b4:	4640      	mov	r0, r8
 80046b6:	f002 fc23 	bl	8006f00 <_strtod_r>
 80046ba:	9b03      	ldr	r3, [sp, #12]
 80046bc:	f8d4 c000 	ldr.w	ip, [r4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f01c 0f02 	tst.w	ip, #2
 80046c6:	4606      	mov	r6, r0
 80046c8:	460f      	mov	r7, r1
 80046ca:	f103 0204 	add.w	r2, r3, #4
 80046ce:	d020      	beq.n	8004712 <_scanf_float+0x3de>
 80046d0:	9903      	ldr	r1, [sp, #12]
 80046d2:	600a      	str	r2, [r1, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	e9c3 6700 	strd	r6, r7, [r3]
 80046da:	68e3      	ldr	r3, [r4, #12]
 80046dc:	3301      	adds	r3, #1
 80046de:	60e3      	str	r3, [r4, #12]
 80046e0:	e66b      	b.n	80043ba <_scanf_float+0x86>
 80046e2:	9b04      	ldr	r3, [sp, #16]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0e3      	beq.n	80046b0 <_scanf_float+0x37c>
 80046e8:	9905      	ldr	r1, [sp, #20]
 80046ea:	230a      	movs	r3, #10
 80046ec:	462a      	mov	r2, r5
 80046ee:	4640      	mov	r0, r8
 80046f0:	3101      	adds	r1, #1
 80046f2:	f002 fc89 	bl	8007008 <_strtol_r>
 80046f6:	9b04      	ldr	r3, [sp, #16]
 80046f8:	9e05      	ldr	r6, [sp, #20]
 80046fa:	1ac2      	subs	r2, r0, r3
 80046fc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004700:	429e      	cmp	r6, r3
 8004702:	bf28      	it	cs
 8004704:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004708:	4630      	mov	r0, r6
 800470a:	490f      	ldr	r1, [pc, #60]	; (8004748 <_scanf_float+0x414>)
 800470c:	f000 f8e2 	bl	80048d4 <siprintf>
 8004710:	e7ce      	b.n	80046b0 <_scanf_float+0x37c>
 8004712:	f01c 0f04 	tst.w	ip, #4
 8004716:	d1db      	bne.n	80046d0 <_scanf_float+0x39c>
 8004718:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800471c:	f8cc 2000 	str.w	r2, [ip]
 8004720:	f8d3 8000 	ldr.w	r8, [r3]
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	f7fc f970 	bl	8000a0c <__aeabi_dcmpun>
 800472c:	b128      	cbz	r0, 800473a <_scanf_float+0x406>
 800472e:	4807      	ldr	r0, [pc, #28]	; (800474c <_scanf_float+0x418>)
 8004730:	f000 f9c2 	bl	8004ab8 <nanf>
 8004734:	f8c8 0000 	str.w	r0, [r8]
 8004738:	e7cf      	b.n	80046da <_scanf_float+0x3a6>
 800473a:	4630      	mov	r0, r6
 800473c:	4639      	mov	r1, r7
 800473e:	f7fc f9c3 	bl	8000ac8 <__aeabi_d2f>
 8004742:	e7f7      	b.n	8004734 <_scanf_float+0x400>
 8004744:	2500      	movs	r5, #0
 8004746:	e638      	b.n	80043ba <_scanf_float+0x86>
 8004748:	08008266 	.word	0x08008266
 800474c:	080085fd 	.word	0x080085fd

08004750 <std>:
 8004750:	2300      	movs	r3, #0
 8004752:	b510      	push	{r4, lr}
 8004754:	4604      	mov	r4, r0
 8004756:	e9c0 3300 	strd	r3, r3, [r0]
 800475a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800475e:	6083      	str	r3, [r0, #8]
 8004760:	8181      	strh	r1, [r0, #12]
 8004762:	6643      	str	r3, [r0, #100]	; 0x64
 8004764:	81c2      	strh	r2, [r0, #14]
 8004766:	6183      	str	r3, [r0, #24]
 8004768:	4619      	mov	r1, r3
 800476a:	2208      	movs	r2, #8
 800476c:	305c      	adds	r0, #92	; 0x5c
 800476e:	f000 f914 	bl	800499a <memset>
 8004772:	4b0d      	ldr	r3, [pc, #52]	; (80047a8 <std+0x58>)
 8004774:	6224      	str	r4, [r4, #32]
 8004776:	6263      	str	r3, [r4, #36]	; 0x24
 8004778:	4b0c      	ldr	r3, [pc, #48]	; (80047ac <std+0x5c>)
 800477a:	62a3      	str	r3, [r4, #40]	; 0x28
 800477c:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <std+0x60>)
 800477e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004780:	4b0c      	ldr	r3, [pc, #48]	; (80047b4 <std+0x64>)
 8004782:	6323      	str	r3, [r4, #48]	; 0x30
 8004784:	4b0c      	ldr	r3, [pc, #48]	; (80047b8 <std+0x68>)
 8004786:	429c      	cmp	r4, r3
 8004788:	d006      	beq.n	8004798 <std+0x48>
 800478a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800478e:	4294      	cmp	r4, r2
 8004790:	d002      	beq.n	8004798 <std+0x48>
 8004792:	33d0      	adds	r3, #208	; 0xd0
 8004794:	429c      	cmp	r4, r3
 8004796:	d105      	bne.n	80047a4 <std+0x54>
 8004798:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800479c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047a0:	f000 b978 	b.w	8004a94 <__retarget_lock_init_recursive>
 80047a4:	bd10      	pop	{r4, pc}
 80047a6:	bf00      	nop
 80047a8:	08004915 	.word	0x08004915
 80047ac:	08004937 	.word	0x08004937
 80047b0:	0800496f 	.word	0x0800496f
 80047b4:	08004993 	.word	0x08004993
 80047b8:	20000318 	.word	0x20000318

080047bc <stdio_exit_handler>:
 80047bc:	4a02      	ldr	r2, [pc, #8]	; (80047c8 <stdio_exit_handler+0xc>)
 80047be:	4903      	ldr	r1, [pc, #12]	; (80047cc <stdio_exit_handler+0x10>)
 80047c0:	4803      	ldr	r0, [pc, #12]	; (80047d0 <stdio_exit_handler+0x14>)
 80047c2:	f000 b869 	b.w	8004898 <_fwalk_sglue>
 80047c6:	bf00      	nop
 80047c8:	2000000c 	.word	0x2000000c
 80047cc:	080073c1 	.word	0x080073c1
 80047d0:	20000018 	.word	0x20000018

080047d4 <cleanup_stdio>:
 80047d4:	6841      	ldr	r1, [r0, #4]
 80047d6:	4b0c      	ldr	r3, [pc, #48]	; (8004808 <cleanup_stdio+0x34>)
 80047d8:	b510      	push	{r4, lr}
 80047da:	4299      	cmp	r1, r3
 80047dc:	4604      	mov	r4, r0
 80047de:	d001      	beq.n	80047e4 <cleanup_stdio+0x10>
 80047e0:	f002 fdee 	bl	80073c0 <_fflush_r>
 80047e4:	68a1      	ldr	r1, [r4, #8]
 80047e6:	4b09      	ldr	r3, [pc, #36]	; (800480c <cleanup_stdio+0x38>)
 80047e8:	4299      	cmp	r1, r3
 80047ea:	d002      	beq.n	80047f2 <cleanup_stdio+0x1e>
 80047ec:	4620      	mov	r0, r4
 80047ee:	f002 fde7 	bl	80073c0 <_fflush_r>
 80047f2:	68e1      	ldr	r1, [r4, #12]
 80047f4:	4b06      	ldr	r3, [pc, #24]	; (8004810 <cleanup_stdio+0x3c>)
 80047f6:	4299      	cmp	r1, r3
 80047f8:	d004      	beq.n	8004804 <cleanup_stdio+0x30>
 80047fa:	4620      	mov	r0, r4
 80047fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004800:	f002 bdde 	b.w	80073c0 <_fflush_r>
 8004804:	bd10      	pop	{r4, pc}
 8004806:	bf00      	nop
 8004808:	20000318 	.word	0x20000318
 800480c:	20000380 	.word	0x20000380
 8004810:	200003e8 	.word	0x200003e8

08004814 <global_stdio_init.part.0>:
 8004814:	b510      	push	{r4, lr}
 8004816:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <global_stdio_init.part.0+0x30>)
 8004818:	4c0b      	ldr	r4, [pc, #44]	; (8004848 <global_stdio_init.part.0+0x34>)
 800481a:	4a0c      	ldr	r2, [pc, #48]	; (800484c <global_stdio_init.part.0+0x38>)
 800481c:	4620      	mov	r0, r4
 800481e:	601a      	str	r2, [r3, #0]
 8004820:	2104      	movs	r1, #4
 8004822:	2200      	movs	r2, #0
 8004824:	f7ff ff94 	bl	8004750 <std>
 8004828:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800482c:	2201      	movs	r2, #1
 800482e:	2109      	movs	r1, #9
 8004830:	f7ff ff8e 	bl	8004750 <std>
 8004834:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004838:	2202      	movs	r2, #2
 800483a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800483e:	2112      	movs	r1, #18
 8004840:	f7ff bf86 	b.w	8004750 <std>
 8004844:	20000450 	.word	0x20000450
 8004848:	20000318 	.word	0x20000318
 800484c:	080047bd 	.word	0x080047bd

08004850 <__sfp_lock_acquire>:
 8004850:	4801      	ldr	r0, [pc, #4]	; (8004858 <__sfp_lock_acquire+0x8>)
 8004852:	f000 b920 	b.w	8004a96 <__retarget_lock_acquire_recursive>
 8004856:	bf00      	nop
 8004858:	20000459 	.word	0x20000459

0800485c <__sfp_lock_release>:
 800485c:	4801      	ldr	r0, [pc, #4]	; (8004864 <__sfp_lock_release+0x8>)
 800485e:	f000 b91b 	b.w	8004a98 <__retarget_lock_release_recursive>
 8004862:	bf00      	nop
 8004864:	20000459 	.word	0x20000459

08004868 <__sinit>:
 8004868:	b510      	push	{r4, lr}
 800486a:	4604      	mov	r4, r0
 800486c:	f7ff fff0 	bl	8004850 <__sfp_lock_acquire>
 8004870:	6a23      	ldr	r3, [r4, #32]
 8004872:	b11b      	cbz	r3, 800487c <__sinit+0x14>
 8004874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004878:	f7ff bff0 	b.w	800485c <__sfp_lock_release>
 800487c:	4b04      	ldr	r3, [pc, #16]	; (8004890 <__sinit+0x28>)
 800487e:	6223      	str	r3, [r4, #32]
 8004880:	4b04      	ldr	r3, [pc, #16]	; (8004894 <__sinit+0x2c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1f5      	bne.n	8004874 <__sinit+0xc>
 8004888:	f7ff ffc4 	bl	8004814 <global_stdio_init.part.0>
 800488c:	e7f2      	b.n	8004874 <__sinit+0xc>
 800488e:	bf00      	nop
 8004890:	080047d5 	.word	0x080047d5
 8004894:	20000450 	.word	0x20000450

08004898 <_fwalk_sglue>:
 8004898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800489c:	4607      	mov	r7, r0
 800489e:	4688      	mov	r8, r1
 80048a0:	4614      	mov	r4, r2
 80048a2:	2600      	movs	r6, #0
 80048a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048a8:	f1b9 0901 	subs.w	r9, r9, #1
 80048ac:	d505      	bpl.n	80048ba <_fwalk_sglue+0x22>
 80048ae:	6824      	ldr	r4, [r4, #0]
 80048b0:	2c00      	cmp	r4, #0
 80048b2:	d1f7      	bne.n	80048a4 <_fwalk_sglue+0xc>
 80048b4:	4630      	mov	r0, r6
 80048b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048ba:	89ab      	ldrh	r3, [r5, #12]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d907      	bls.n	80048d0 <_fwalk_sglue+0x38>
 80048c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048c4:	3301      	adds	r3, #1
 80048c6:	d003      	beq.n	80048d0 <_fwalk_sglue+0x38>
 80048c8:	4629      	mov	r1, r5
 80048ca:	4638      	mov	r0, r7
 80048cc:	47c0      	blx	r8
 80048ce:	4306      	orrs	r6, r0
 80048d0:	3568      	adds	r5, #104	; 0x68
 80048d2:	e7e9      	b.n	80048a8 <_fwalk_sglue+0x10>

080048d4 <siprintf>:
 80048d4:	b40e      	push	{r1, r2, r3}
 80048d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048da:	b500      	push	{lr}
 80048dc:	b09c      	sub	sp, #112	; 0x70
 80048de:	ab1d      	add	r3, sp, #116	; 0x74
 80048e0:	9002      	str	r0, [sp, #8]
 80048e2:	9006      	str	r0, [sp, #24]
 80048e4:	9107      	str	r1, [sp, #28]
 80048e6:	9104      	str	r1, [sp, #16]
 80048e8:	4808      	ldr	r0, [pc, #32]	; (800490c <siprintf+0x38>)
 80048ea:	4909      	ldr	r1, [pc, #36]	; (8004910 <siprintf+0x3c>)
 80048ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80048f0:	9105      	str	r1, [sp, #20]
 80048f2:	6800      	ldr	r0, [r0, #0]
 80048f4:	a902      	add	r1, sp, #8
 80048f6:	9301      	str	r3, [sp, #4]
 80048f8:	f002 fbe2 	bl	80070c0 <_svfiprintf_r>
 80048fc:	2200      	movs	r2, #0
 80048fe:	9b02      	ldr	r3, [sp, #8]
 8004900:	701a      	strb	r2, [r3, #0]
 8004902:	b01c      	add	sp, #112	; 0x70
 8004904:	f85d eb04 	ldr.w	lr, [sp], #4
 8004908:	b003      	add	sp, #12
 800490a:	4770      	bx	lr
 800490c:	20000064 	.word	0x20000064
 8004910:	ffff0208 	.word	0xffff0208

08004914 <__sread>:
 8004914:	b510      	push	{r4, lr}
 8004916:	460c      	mov	r4, r1
 8004918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800491c:	f000 f86c 	bl	80049f8 <_read_r>
 8004920:	2800      	cmp	r0, #0
 8004922:	bfab      	itete	ge
 8004924:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004926:	89a3      	ldrhlt	r3, [r4, #12]
 8004928:	181b      	addge	r3, r3, r0
 800492a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800492e:	bfac      	ite	ge
 8004930:	6563      	strge	r3, [r4, #84]	; 0x54
 8004932:	81a3      	strhlt	r3, [r4, #12]
 8004934:	bd10      	pop	{r4, pc}

08004936 <__swrite>:
 8004936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800493a:	461f      	mov	r7, r3
 800493c:	898b      	ldrh	r3, [r1, #12]
 800493e:	4605      	mov	r5, r0
 8004940:	05db      	lsls	r3, r3, #23
 8004942:	460c      	mov	r4, r1
 8004944:	4616      	mov	r6, r2
 8004946:	d505      	bpl.n	8004954 <__swrite+0x1e>
 8004948:	2302      	movs	r3, #2
 800494a:	2200      	movs	r2, #0
 800494c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004950:	f000 f840 	bl	80049d4 <_lseek_r>
 8004954:	89a3      	ldrh	r3, [r4, #12]
 8004956:	4632      	mov	r2, r6
 8004958:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800495c:	81a3      	strh	r3, [r4, #12]
 800495e:	4628      	mov	r0, r5
 8004960:	463b      	mov	r3, r7
 8004962:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800496a:	f000 b857 	b.w	8004a1c <_write_r>

0800496e <__sseek>:
 800496e:	b510      	push	{r4, lr}
 8004970:	460c      	mov	r4, r1
 8004972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004976:	f000 f82d 	bl	80049d4 <_lseek_r>
 800497a:	1c43      	adds	r3, r0, #1
 800497c:	89a3      	ldrh	r3, [r4, #12]
 800497e:	bf15      	itete	ne
 8004980:	6560      	strne	r0, [r4, #84]	; 0x54
 8004982:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004986:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800498a:	81a3      	strheq	r3, [r4, #12]
 800498c:	bf18      	it	ne
 800498e:	81a3      	strhne	r3, [r4, #12]
 8004990:	bd10      	pop	{r4, pc}

08004992 <__sclose>:
 8004992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004996:	f000 b80d 	b.w	80049b4 <_close_r>

0800499a <memset>:
 800499a:	4603      	mov	r3, r0
 800499c:	4402      	add	r2, r0
 800499e:	4293      	cmp	r3, r2
 80049a0:	d100      	bne.n	80049a4 <memset+0xa>
 80049a2:	4770      	bx	lr
 80049a4:	f803 1b01 	strb.w	r1, [r3], #1
 80049a8:	e7f9      	b.n	800499e <memset+0x4>
	...

080049ac <_localeconv_r>:
 80049ac:	4800      	ldr	r0, [pc, #0]	; (80049b0 <_localeconv_r+0x4>)
 80049ae:	4770      	bx	lr
 80049b0:	20000158 	.word	0x20000158

080049b4 <_close_r>:
 80049b4:	b538      	push	{r3, r4, r5, lr}
 80049b6:	2300      	movs	r3, #0
 80049b8:	4d05      	ldr	r5, [pc, #20]	; (80049d0 <_close_r+0x1c>)
 80049ba:	4604      	mov	r4, r0
 80049bc:	4608      	mov	r0, r1
 80049be:	602b      	str	r3, [r5, #0]
 80049c0:	f7fc ff3f 	bl	8001842 <_close>
 80049c4:	1c43      	adds	r3, r0, #1
 80049c6:	d102      	bne.n	80049ce <_close_r+0x1a>
 80049c8:	682b      	ldr	r3, [r5, #0]
 80049ca:	b103      	cbz	r3, 80049ce <_close_r+0x1a>
 80049cc:	6023      	str	r3, [r4, #0]
 80049ce:	bd38      	pop	{r3, r4, r5, pc}
 80049d0:	20000454 	.word	0x20000454

080049d4 <_lseek_r>:
 80049d4:	b538      	push	{r3, r4, r5, lr}
 80049d6:	4604      	mov	r4, r0
 80049d8:	4608      	mov	r0, r1
 80049da:	4611      	mov	r1, r2
 80049dc:	2200      	movs	r2, #0
 80049de:	4d05      	ldr	r5, [pc, #20]	; (80049f4 <_lseek_r+0x20>)
 80049e0:	602a      	str	r2, [r5, #0]
 80049e2:	461a      	mov	r2, r3
 80049e4:	f7fc ff51 	bl	800188a <_lseek>
 80049e8:	1c43      	adds	r3, r0, #1
 80049ea:	d102      	bne.n	80049f2 <_lseek_r+0x1e>
 80049ec:	682b      	ldr	r3, [r5, #0]
 80049ee:	b103      	cbz	r3, 80049f2 <_lseek_r+0x1e>
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	bd38      	pop	{r3, r4, r5, pc}
 80049f4:	20000454 	.word	0x20000454

080049f8 <_read_r>:
 80049f8:	b538      	push	{r3, r4, r5, lr}
 80049fa:	4604      	mov	r4, r0
 80049fc:	4608      	mov	r0, r1
 80049fe:	4611      	mov	r1, r2
 8004a00:	2200      	movs	r2, #0
 8004a02:	4d05      	ldr	r5, [pc, #20]	; (8004a18 <_read_r+0x20>)
 8004a04:	602a      	str	r2, [r5, #0]
 8004a06:	461a      	mov	r2, r3
 8004a08:	f7fc fee2 	bl	80017d0 <_read>
 8004a0c:	1c43      	adds	r3, r0, #1
 8004a0e:	d102      	bne.n	8004a16 <_read_r+0x1e>
 8004a10:	682b      	ldr	r3, [r5, #0]
 8004a12:	b103      	cbz	r3, 8004a16 <_read_r+0x1e>
 8004a14:	6023      	str	r3, [r4, #0]
 8004a16:	bd38      	pop	{r3, r4, r5, pc}
 8004a18:	20000454 	.word	0x20000454

08004a1c <_write_r>:
 8004a1c:	b538      	push	{r3, r4, r5, lr}
 8004a1e:	4604      	mov	r4, r0
 8004a20:	4608      	mov	r0, r1
 8004a22:	4611      	mov	r1, r2
 8004a24:	2200      	movs	r2, #0
 8004a26:	4d05      	ldr	r5, [pc, #20]	; (8004a3c <_write_r+0x20>)
 8004a28:	602a      	str	r2, [r5, #0]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	f7fc feed 	bl	800180a <_write>
 8004a30:	1c43      	adds	r3, r0, #1
 8004a32:	d102      	bne.n	8004a3a <_write_r+0x1e>
 8004a34:	682b      	ldr	r3, [r5, #0]
 8004a36:	b103      	cbz	r3, 8004a3a <_write_r+0x1e>
 8004a38:	6023      	str	r3, [r4, #0]
 8004a3a:	bd38      	pop	{r3, r4, r5, pc}
 8004a3c:	20000454 	.word	0x20000454

08004a40 <__errno>:
 8004a40:	4b01      	ldr	r3, [pc, #4]	; (8004a48 <__errno+0x8>)
 8004a42:	6818      	ldr	r0, [r3, #0]
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	20000064 	.word	0x20000064

08004a4c <__libc_init_array>:
 8004a4c:	b570      	push	{r4, r5, r6, lr}
 8004a4e:	2600      	movs	r6, #0
 8004a50:	4d0c      	ldr	r5, [pc, #48]	; (8004a84 <__libc_init_array+0x38>)
 8004a52:	4c0d      	ldr	r4, [pc, #52]	; (8004a88 <__libc_init_array+0x3c>)
 8004a54:	1b64      	subs	r4, r4, r5
 8004a56:	10a4      	asrs	r4, r4, #2
 8004a58:	42a6      	cmp	r6, r4
 8004a5a:	d109      	bne.n	8004a70 <__libc_init_array+0x24>
 8004a5c:	f003 fbc2 	bl	80081e4 <_init>
 8004a60:	2600      	movs	r6, #0
 8004a62:	4d0a      	ldr	r5, [pc, #40]	; (8004a8c <__libc_init_array+0x40>)
 8004a64:	4c0a      	ldr	r4, [pc, #40]	; (8004a90 <__libc_init_array+0x44>)
 8004a66:	1b64      	subs	r4, r4, r5
 8004a68:	10a4      	asrs	r4, r4, #2
 8004a6a:	42a6      	cmp	r6, r4
 8004a6c:	d105      	bne.n	8004a7a <__libc_init_array+0x2e>
 8004a6e:	bd70      	pop	{r4, r5, r6, pc}
 8004a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a74:	4798      	blx	r3
 8004a76:	3601      	adds	r6, #1
 8004a78:	e7ee      	b.n	8004a58 <__libc_init_array+0xc>
 8004a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a7e:	4798      	blx	r3
 8004a80:	3601      	adds	r6, #1
 8004a82:	e7f2      	b.n	8004a6a <__libc_init_array+0x1e>
 8004a84:	08008660 	.word	0x08008660
 8004a88:	08008660 	.word	0x08008660
 8004a8c:	08008660 	.word	0x08008660
 8004a90:	08008664 	.word	0x08008664

08004a94 <__retarget_lock_init_recursive>:
 8004a94:	4770      	bx	lr

08004a96 <__retarget_lock_acquire_recursive>:
 8004a96:	4770      	bx	lr

08004a98 <__retarget_lock_release_recursive>:
 8004a98:	4770      	bx	lr

08004a9a <memchr>:
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	b510      	push	{r4, lr}
 8004a9e:	b2c9      	uxtb	r1, r1
 8004aa0:	4402      	add	r2, r0
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	d101      	bne.n	8004aac <memchr+0x12>
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	e003      	b.n	8004ab4 <memchr+0x1a>
 8004aac:	7804      	ldrb	r4, [r0, #0]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	428c      	cmp	r4, r1
 8004ab2:	d1f6      	bne.n	8004aa2 <memchr+0x8>
 8004ab4:	bd10      	pop	{r4, pc}
	...

08004ab8 <nanf>:
 8004ab8:	4800      	ldr	r0, [pc, #0]	; (8004abc <nanf+0x4>)
 8004aba:	4770      	bx	lr
 8004abc:	7fc00000 	.word	0x7fc00000

08004ac0 <quorem>:
 8004ac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac4:	6903      	ldr	r3, [r0, #16]
 8004ac6:	690c      	ldr	r4, [r1, #16]
 8004ac8:	4607      	mov	r7, r0
 8004aca:	42a3      	cmp	r3, r4
 8004acc:	db7f      	blt.n	8004bce <quorem+0x10e>
 8004ace:	3c01      	subs	r4, #1
 8004ad0:	f100 0514 	add.w	r5, r0, #20
 8004ad4:	f101 0814 	add.w	r8, r1, #20
 8004ad8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004adc:	9301      	str	r3, [sp, #4]
 8004ade:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ae2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	fbb2 f6f3 	udiv	r6, r2, r3
 8004aee:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004af2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004af6:	d331      	bcc.n	8004b5c <quorem+0x9c>
 8004af8:	f04f 0e00 	mov.w	lr, #0
 8004afc:	4640      	mov	r0, r8
 8004afe:	46ac      	mov	ip, r5
 8004b00:	46f2      	mov	sl, lr
 8004b02:	f850 2b04 	ldr.w	r2, [r0], #4
 8004b06:	b293      	uxth	r3, r2
 8004b08:	fb06 e303 	mla	r3, r6, r3, lr
 8004b0c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004b10:	0c1a      	lsrs	r2, r3, #16
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	fb06 220e 	mla	r2, r6, lr, r2
 8004b18:	ebaa 0303 	sub.w	r3, sl, r3
 8004b1c:	f8dc a000 	ldr.w	sl, [ip]
 8004b20:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004b24:	fa1f fa8a 	uxth.w	sl, sl
 8004b28:	4453      	add	r3, sl
 8004b2a:	f8dc a000 	ldr.w	sl, [ip]
 8004b2e:	b292      	uxth	r2, r2
 8004b30:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004b34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b3e:	4581      	cmp	r9, r0
 8004b40:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004b44:	f84c 3b04 	str.w	r3, [ip], #4
 8004b48:	d2db      	bcs.n	8004b02 <quorem+0x42>
 8004b4a:	f855 300b 	ldr.w	r3, [r5, fp]
 8004b4e:	b92b      	cbnz	r3, 8004b5c <quorem+0x9c>
 8004b50:	9b01      	ldr	r3, [sp, #4]
 8004b52:	3b04      	subs	r3, #4
 8004b54:	429d      	cmp	r5, r3
 8004b56:	461a      	mov	r2, r3
 8004b58:	d32d      	bcc.n	8004bb6 <quorem+0xf6>
 8004b5a:	613c      	str	r4, [r7, #16]
 8004b5c:	4638      	mov	r0, r7
 8004b5e:	f001 f9df 	bl	8005f20 <__mcmp>
 8004b62:	2800      	cmp	r0, #0
 8004b64:	db23      	blt.n	8004bae <quorem+0xee>
 8004b66:	4629      	mov	r1, r5
 8004b68:	2000      	movs	r0, #0
 8004b6a:	3601      	adds	r6, #1
 8004b6c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004b70:	f8d1 c000 	ldr.w	ip, [r1]
 8004b74:	b293      	uxth	r3, r2
 8004b76:	1ac3      	subs	r3, r0, r3
 8004b78:	0c12      	lsrs	r2, r2, #16
 8004b7a:	fa1f f08c 	uxth.w	r0, ip
 8004b7e:	4403      	add	r3, r0
 8004b80:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004b84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b8e:	45c1      	cmp	r9, r8
 8004b90:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004b94:	f841 3b04 	str.w	r3, [r1], #4
 8004b98:	d2e8      	bcs.n	8004b6c <quorem+0xac>
 8004b9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ba2:	b922      	cbnz	r2, 8004bae <quorem+0xee>
 8004ba4:	3b04      	subs	r3, #4
 8004ba6:	429d      	cmp	r5, r3
 8004ba8:	461a      	mov	r2, r3
 8004baa:	d30a      	bcc.n	8004bc2 <quorem+0x102>
 8004bac:	613c      	str	r4, [r7, #16]
 8004bae:	4630      	mov	r0, r6
 8004bb0:	b003      	add	sp, #12
 8004bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bb6:	6812      	ldr	r2, [r2, #0]
 8004bb8:	3b04      	subs	r3, #4
 8004bba:	2a00      	cmp	r2, #0
 8004bbc:	d1cd      	bne.n	8004b5a <quorem+0x9a>
 8004bbe:	3c01      	subs	r4, #1
 8004bc0:	e7c8      	b.n	8004b54 <quorem+0x94>
 8004bc2:	6812      	ldr	r2, [r2, #0]
 8004bc4:	3b04      	subs	r3, #4
 8004bc6:	2a00      	cmp	r2, #0
 8004bc8:	d1f0      	bne.n	8004bac <quorem+0xec>
 8004bca:	3c01      	subs	r4, #1
 8004bcc:	e7eb      	b.n	8004ba6 <quorem+0xe6>
 8004bce:	2000      	movs	r0, #0
 8004bd0:	e7ee      	b.n	8004bb0 <quorem+0xf0>
 8004bd2:	0000      	movs	r0, r0
 8004bd4:	0000      	movs	r0, r0
	...

08004bd8 <_dtoa_r>:
 8004bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bdc:	4616      	mov	r6, r2
 8004bde:	461f      	mov	r7, r3
 8004be0:	69c4      	ldr	r4, [r0, #28]
 8004be2:	b099      	sub	sp, #100	; 0x64
 8004be4:	4605      	mov	r5, r0
 8004be6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004bea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004bee:	b974      	cbnz	r4, 8004c0e <_dtoa_r+0x36>
 8004bf0:	2010      	movs	r0, #16
 8004bf2:	f000 fe1d 	bl	8005830 <malloc>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	61e8      	str	r0, [r5, #28]
 8004bfa:	b920      	cbnz	r0, 8004c06 <_dtoa_r+0x2e>
 8004bfc:	21ef      	movs	r1, #239	; 0xef
 8004bfe:	4bac      	ldr	r3, [pc, #688]	; (8004eb0 <_dtoa_r+0x2d8>)
 8004c00:	48ac      	ldr	r0, [pc, #688]	; (8004eb4 <_dtoa_r+0x2dc>)
 8004c02:	f002 fc55 	bl	80074b0 <__assert_func>
 8004c06:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004c0a:	6004      	str	r4, [r0, #0]
 8004c0c:	60c4      	str	r4, [r0, #12]
 8004c0e:	69eb      	ldr	r3, [r5, #28]
 8004c10:	6819      	ldr	r1, [r3, #0]
 8004c12:	b151      	cbz	r1, 8004c2a <_dtoa_r+0x52>
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	2301      	movs	r3, #1
 8004c18:	4093      	lsls	r3, r2
 8004c1a:	604a      	str	r2, [r1, #4]
 8004c1c:	608b      	str	r3, [r1, #8]
 8004c1e:	4628      	mov	r0, r5
 8004c20:	f000 fefa 	bl	8005a18 <_Bfree>
 8004c24:	2200      	movs	r2, #0
 8004c26:	69eb      	ldr	r3, [r5, #28]
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	1e3b      	subs	r3, r7, #0
 8004c2c:	bfaf      	iteee	ge
 8004c2e:	2300      	movge	r3, #0
 8004c30:	2201      	movlt	r2, #1
 8004c32:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004c36:	9305      	strlt	r3, [sp, #20]
 8004c38:	bfa8      	it	ge
 8004c3a:	f8c8 3000 	strge.w	r3, [r8]
 8004c3e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004c42:	4b9d      	ldr	r3, [pc, #628]	; (8004eb8 <_dtoa_r+0x2e0>)
 8004c44:	bfb8      	it	lt
 8004c46:	f8c8 2000 	strlt.w	r2, [r8]
 8004c4a:	ea33 0309 	bics.w	r3, r3, r9
 8004c4e:	d119      	bne.n	8004c84 <_dtoa_r+0xac>
 8004c50:	f242 730f 	movw	r3, #9999	; 0x270f
 8004c54:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004c56:	6013      	str	r3, [r2, #0]
 8004c58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004c5c:	4333      	orrs	r3, r6
 8004c5e:	f000 8589 	beq.w	8005774 <_dtoa_r+0xb9c>
 8004c62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004c64:	b953      	cbnz	r3, 8004c7c <_dtoa_r+0xa4>
 8004c66:	4b95      	ldr	r3, [pc, #596]	; (8004ebc <_dtoa_r+0x2e4>)
 8004c68:	e023      	b.n	8004cb2 <_dtoa_r+0xda>
 8004c6a:	4b95      	ldr	r3, [pc, #596]	; (8004ec0 <_dtoa_r+0x2e8>)
 8004c6c:	9303      	str	r3, [sp, #12]
 8004c6e:	3308      	adds	r3, #8
 8004c70:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004c72:	6013      	str	r3, [r2, #0]
 8004c74:	9803      	ldr	r0, [sp, #12]
 8004c76:	b019      	add	sp, #100	; 0x64
 8004c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c7c:	4b8f      	ldr	r3, [pc, #572]	; (8004ebc <_dtoa_r+0x2e4>)
 8004c7e:	9303      	str	r3, [sp, #12]
 8004c80:	3303      	adds	r3, #3
 8004c82:	e7f5      	b.n	8004c70 <_dtoa_r+0x98>
 8004c84:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004c88:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004c8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c90:	2200      	movs	r2, #0
 8004c92:	2300      	movs	r3, #0
 8004c94:	f7fb fe88 	bl	80009a8 <__aeabi_dcmpeq>
 8004c98:	4680      	mov	r8, r0
 8004c9a:	b160      	cbz	r0, 8004cb6 <_dtoa_r+0xde>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 8562 	beq.w	800576e <_dtoa_r+0xb96>
 8004caa:	4b86      	ldr	r3, [pc, #536]	; (8004ec4 <_dtoa_r+0x2ec>)
 8004cac:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004cae:	6013      	str	r3, [r2, #0]
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	9303      	str	r3, [sp, #12]
 8004cb4:	e7de      	b.n	8004c74 <_dtoa_r+0x9c>
 8004cb6:	ab16      	add	r3, sp, #88	; 0x58
 8004cb8:	9301      	str	r3, [sp, #4]
 8004cba:	ab17      	add	r3, sp, #92	; 0x5c
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004cc4:	f001 fa3c 	bl	8006140 <__d2b>
 8004cc8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004ccc:	4682      	mov	sl, r0
 8004cce:	2c00      	cmp	r4, #0
 8004cd0:	d07e      	beq.n	8004dd0 <_dtoa_r+0x1f8>
 8004cd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004cd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cd8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004cdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ce0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004ce4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004ce8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004cec:	4619      	mov	r1, r3
 8004cee:	2200      	movs	r2, #0
 8004cf0:	4b75      	ldr	r3, [pc, #468]	; (8004ec8 <_dtoa_r+0x2f0>)
 8004cf2:	f7fb fa39 	bl	8000168 <__aeabi_dsub>
 8004cf6:	a368      	add	r3, pc, #416	; (adr r3, 8004e98 <_dtoa_r+0x2c0>)
 8004cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfc:	f7fb fbec 	bl	80004d8 <__aeabi_dmul>
 8004d00:	a367      	add	r3, pc, #412	; (adr r3, 8004ea0 <_dtoa_r+0x2c8>)
 8004d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d06:	f7fb fa31 	bl	800016c <__adddf3>
 8004d0a:	4606      	mov	r6, r0
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	460f      	mov	r7, r1
 8004d10:	f7fb fb78 	bl	8000404 <__aeabi_i2d>
 8004d14:	a364      	add	r3, pc, #400	; (adr r3, 8004ea8 <_dtoa_r+0x2d0>)
 8004d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1a:	f7fb fbdd 	bl	80004d8 <__aeabi_dmul>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	4630      	mov	r0, r6
 8004d24:	4639      	mov	r1, r7
 8004d26:	f7fb fa21 	bl	800016c <__adddf3>
 8004d2a:	4606      	mov	r6, r0
 8004d2c:	460f      	mov	r7, r1
 8004d2e:	f7fb fe83 	bl	8000a38 <__aeabi_d2iz>
 8004d32:	2200      	movs	r2, #0
 8004d34:	4683      	mov	fp, r0
 8004d36:	2300      	movs	r3, #0
 8004d38:	4630      	mov	r0, r6
 8004d3a:	4639      	mov	r1, r7
 8004d3c:	f7fb fe3e 	bl	80009bc <__aeabi_dcmplt>
 8004d40:	b148      	cbz	r0, 8004d56 <_dtoa_r+0x17e>
 8004d42:	4658      	mov	r0, fp
 8004d44:	f7fb fb5e 	bl	8000404 <__aeabi_i2d>
 8004d48:	4632      	mov	r2, r6
 8004d4a:	463b      	mov	r3, r7
 8004d4c:	f7fb fe2c 	bl	80009a8 <__aeabi_dcmpeq>
 8004d50:	b908      	cbnz	r0, 8004d56 <_dtoa_r+0x17e>
 8004d52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004d56:	f1bb 0f16 	cmp.w	fp, #22
 8004d5a:	d857      	bhi.n	8004e0c <_dtoa_r+0x234>
 8004d5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d60:	4b5a      	ldr	r3, [pc, #360]	; (8004ecc <_dtoa_r+0x2f4>)
 8004d62:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6a:	f7fb fe27 	bl	80009bc <__aeabi_dcmplt>
 8004d6e:	2800      	cmp	r0, #0
 8004d70:	d04e      	beq.n	8004e10 <_dtoa_r+0x238>
 8004d72:	2300      	movs	r3, #0
 8004d74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004d78:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d7a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004d7c:	1b1b      	subs	r3, r3, r4
 8004d7e:	1e5a      	subs	r2, r3, #1
 8004d80:	bf46      	itte	mi
 8004d82:	f1c3 0901 	rsbmi	r9, r3, #1
 8004d86:	2300      	movmi	r3, #0
 8004d88:	f04f 0900 	movpl.w	r9, #0
 8004d8c:	9209      	str	r2, [sp, #36]	; 0x24
 8004d8e:	bf48      	it	mi
 8004d90:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004d92:	f1bb 0f00 	cmp.w	fp, #0
 8004d96:	db3d      	blt.n	8004e14 <_dtoa_r+0x23c>
 8004d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d9a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8004d9e:	445b      	add	r3, fp
 8004da0:	9309      	str	r3, [sp, #36]	; 0x24
 8004da2:	2300      	movs	r3, #0
 8004da4:	930a      	str	r3, [sp, #40]	; 0x28
 8004da6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004da8:	2b09      	cmp	r3, #9
 8004daa:	d867      	bhi.n	8004e7c <_dtoa_r+0x2a4>
 8004dac:	2b05      	cmp	r3, #5
 8004dae:	bfc4      	itt	gt
 8004db0:	3b04      	subgt	r3, #4
 8004db2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004db4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004db6:	bfc8      	it	gt
 8004db8:	2400      	movgt	r4, #0
 8004dba:	f1a3 0302 	sub.w	r3, r3, #2
 8004dbe:	bfd8      	it	le
 8004dc0:	2401      	movle	r4, #1
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	f200 8086 	bhi.w	8004ed4 <_dtoa_r+0x2fc>
 8004dc8:	e8df f003 	tbb	[pc, r3]
 8004dcc:	5637392c 	.word	0x5637392c
 8004dd0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004dd4:	441c      	add	r4, r3
 8004dd6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004dda:	2b20      	cmp	r3, #32
 8004ddc:	bfc1      	itttt	gt
 8004dde:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004de2:	fa09 f903 	lslgt.w	r9, r9, r3
 8004de6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8004dea:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004dee:	bfd6      	itet	le
 8004df0:	f1c3 0320 	rsble	r3, r3, #32
 8004df4:	ea49 0003 	orrgt.w	r0, r9, r3
 8004df8:	fa06 f003 	lslle.w	r0, r6, r3
 8004dfc:	f7fb faf2 	bl	80003e4 <__aeabi_ui2d>
 8004e00:	2201      	movs	r2, #1
 8004e02:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004e06:	3c01      	subs	r4, #1
 8004e08:	9213      	str	r2, [sp, #76]	; 0x4c
 8004e0a:	e76f      	b.n	8004cec <_dtoa_r+0x114>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e7b3      	b.n	8004d78 <_dtoa_r+0x1a0>
 8004e10:	900f      	str	r0, [sp, #60]	; 0x3c
 8004e12:	e7b2      	b.n	8004d7a <_dtoa_r+0x1a2>
 8004e14:	f1cb 0300 	rsb	r3, fp, #0
 8004e18:	930a      	str	r3, [sp, #40]	; 0x28
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	eba9 090b 	sub.w	r9, r9, fp
 8004e20:	930e      	str	r3, [sp, #56]	; 0x38
 8004e22:	e7c0      	b.n	8004da6 <_dtoa_r+0x1ce>
 8004e24:	2300      	movs	r3, #0
 8004e26:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e28:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	dc55      	bgt.n	8004eda <_dtoa_r+0x302>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	461a      	mov	r2, r3
 8004e32:	9306      	str	r3, [sp, #24]
 8004e34:	9308      	str	r3, [sp, #32]
 8004e36:	9223      	str	r2, [sp, #140]	; 0x8c
 8004e38:	e00b      	b.n	8004e52 <_dtoa_r+0x27a>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e7f3      	b.n	8004e26 <_dtoa_r+0x24e>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004e44:	445b      	add	r3, fp
 8004e46:	9306      	str	r3, [sp, #24]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	9308      	str	r3, [sp, #32]
 8004e4e:	bfb8      	it	lt
 8004e50:	2301      	movlt	r3, #1
 8004e52:	2100      	movs	r1, #0
 8004e54:	2204      	movs	r2, #4
 8004e56:	69e8      	ldr	r0, [r5, #28]
 8004e58:	f102 0614 	add.w	r6, r2, #20
 8004e5c:	429e      	cmp	r6, r3
 8004e5e:	d940      	bls.n	8004ee2 <_dtoa_r+0x30a>
 8004e60:	6041      	str	r1, [r0, #4]
 8004e62:	4628      	mov	r0, r5
 8004e64:	f000 fd98 	bl	8005998 <_Balloc>
 8004e68:	9003      	str	r0, [sp, #12]
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	d13c      	bne.n	8004ee8 <_dtoa_r+0x310>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	f240 11af 	movw	r1, #431	; 0x1af
 8004e74:	4b16      	ldr	r3, [pc, #88]	; (8004ed0 <_dtoa_r+0x2f8>)
 8004e76:	e6c3      	b.n	8004c00 <_dtoa_r+0x28>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e7e1      	b.n	8004e40 <_dtoa_r+0x268>
 8004e7c:	2401      	movs	r4, #1
 8004e7e:	2300      	movs	r3, #0
 8004e80:	940b      	str	r4, [sp, #44]	; 0x2c
 8004e82:	9322      	str	r3, [sp, #136]	; 0x88
 8004e84:	f04f 33ff 	mov.w	r3, #4294967295
 8004e88:	2200      	movs	r2, #0
 8004e8a:	9306      	str	r3, [sp, #24]
 8004e8c:	9308      	str	r3, [sp, #32]
 8004e8e:	2312      	movs	r3, #18
 8004e90:	e7d1      	b.n	8004e36 <_dtoa_r+0x25e>
 8004e92:	bf00      	nop
 8004e94:	f3af 8000 	nop.w
 8004e98:	636f4361 	.word	0x636f4361
 8004e9c:	3fd287a7 	.word	0x3fd287a7
 8004ea0:	8b60c8b3 	.word	0x8b60c8b3
 8004ea4:	3fc68a28 	.word	0x3fc68a28
 8004ea8:	509f79fb 	.word	0x509f79fb
 8004eac:	3fd34413 	.word	0x3fd34413
 8004eb0:	08008278 	.word	0x08008278
 8004eb4:	0800828f 	.word	0x0800828f
 8004eb8:	7ff00000 	.word	0x7ff00000
 8004ebc:	08008274 	.word	0x08008274
 8004ec0:	0800826b 	.word	0x0800826b
 8004ec4:	08008243 	.word	0x08008243
 8004ec8:	3ff80000 	.word	0x3ff80000
 8004ecc:	08008380 	.word	0x08008380
 8004ed0:	080082e7 	.word	0x080082e7
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ed8:	e7d4      	b.n	8004e84 <_dtoa_r+0x2ac>
 8004eda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004edc:	9306      	str	r3, [sp, #24]
 8004ede:	9308      	str	r3, [sp, #32]
 8004ee0:	e7b7      	b.n	8004e52 <_dtoa_r+0x27a>
 8004ee2:	3101      	adds	r1, #1
 8004ee4:	0052      	lsls	r2, r2, #1
 8004ee6:	e7b7      	b.n	8004e58 <_dtoa_r+0x280>
 8004ee8:	69eb      	ldr	r3, [r5, #28]
 8004eea:	9a03      	ldr	r2, [sp, #12]
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	9b08      	ldr	r3, [sp, #32]
 8004ef0:	2b0e      	cmp	r3, #14
 8004ef2:	f200 80a8 	bhi.w	8005046 <_dtoa_r+0x46e>
 8004ef6:	2c00      	cmp	r4, #0
 8004ef8:	f000 80a5 	beq.w	8005046 <_dtoa_r+0x46e>
 8004efc:	f1bb 0f00 	cmp.w	fp, #0
 8004f00:	dd34      	ble.n	8004f6c <_dtoa_r+0x394>
 8004f02:	4b9a      	ldr	r3, [pc, #616]	; (800516c <_dtoa_r+0x594>)
 8004f04:	f00b 020f 	and.w	r2, fp, #15
 8004f08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f0c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004f10:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f14:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004f18:	ea4f 142b 	mov.w	r4, fp, asr #4
 8004f1c:	d016      	beq.n	8004f4c <_dtoa_r+0x374>
 8004f1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f22:	4b93      	ldr	r3, [pc, #588]	; (8005170 <_dtoa_r+0x598>)
 8004f24:	2703      	movs	r7, #3
 8004f26:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f2a:	f7fb fbff 	bl	800072c <__aeabi_ddiv>
 8004f2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f32:	f004 040f 	and.w	r4, r4, #15
 8004f36:	4e8e      	ldr	r6, [pc, #568]	; (8005170 <_dtoa_r+0x598>)
 8004f38:	b954      	cbnz	r4, 8004f50 <_dtoa_r+0x378>
 8004f3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004f3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f42:	f7fb fbf3 	bl	800072c <__aeabi_ddiv>
 8004f46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f4a:	e029      	b.n	8004fa0 <_dtoa_r+0x3c8>
 8004f4c:	2702      	movs	r7, #2
 8004f4e:	e7f2      	b.n	8004f36 <_dtoa_r+0x35e>
 8004f50:	07e1      	lsls	r1, r4, #31
 8004f52:	d508      	bpl.n	8004f66 <_dtoa_r+0x38e>
 8004f54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004f58:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004f5c:	f7fb fabc 	bl	80004d8 <__aeabi_dmul>
 8004f60:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004f64:	3701      	adds	r7, #1
 8004f66:	1064      	asrs	r4, r4, #1
 8004f68:	3608      	adds	r6, #8
 8004f6a:	e7e5      	b.n	8004f38 <_dtoa_r+0x360>
 8004f6c:	f000 80a5 	beq.w	80050ba <_dtoa_r+0x4e2>
 8004f70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f74:	f1cb 0400 	rsb	r4, fp, #0
 8004f78:	4b7c      	ldr	r3, [pc, #496]	; (800516c <_dtoa_r+0x594>)
 8004f7a:	f004 020f 	and.w	r2, r4, #15
 8004f7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f86:	f7fb faa7 	bl	80004d8 <__aeabi_dmul>
 8004f8a:	2702      	movs	r7, #2
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f92:	4e77      	ldr	r6, [pc, #476]	; (8005170 <_dtoa_r+0x598>)
 8004f94:	1124      	asrs	r4, r4, #4
 8004f96:	2c00      	cmp	r4, #0
 8004f98:	f040 8084 	bne.w	80050a4 <_dtoa_r+0x4cc>
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1d2      	bne.n	8004f46 <_dtoa_r+0x36e>
 8004fa0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004fa4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004fa8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f000 8087 	beq.w	80050be <_dtoa_r+0x4e6>
 8004fb0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	4b6f      	ldr	r3, [pc, #444]	; (8005174 <_dtoa_r+0x59c>)
 8004fb8:	f7fb fd00 	bl	80009bc <__aeabi_dcmplt>
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	d07e      	beq.n	80050be <_dtoa_r+0x4e6>
 8004fc0:	9b08      	ldr	r3, [sp, #32]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d07b      	beq.n	80050be <_dtoa_r+0x4e6>
 8004fc6:	9b06      	ldr	r3, [sp, #24]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	dd38      	ble.n	800503e <_dtoa_r+0x466>
 8004fcc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	4b69      	ldr	r3, [pc, #420]	; (8005178 <_dtoa_r+0x5a0>)
 8004fd4:	f7fb fa80 	bl	80004d8 <__aeabi_dmul>
 8004fd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fdc:	9c06      	ldr	r4, [sp, #24]
 8004fde:	f10b 38ff 	add.w	r8, fp, #4294967295
 8004fe2:	3701      	adds	r7, #1
 8004fe4:	4638      	mov	r0, r7
 8004fe6:	f7fb fa0d 	bl	8000404 <__aeabi_i2d>
 8004fea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fee:	f7fb fa73 	bl	80004d8 <__aeabi_dmul>
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	4b61      	ldr	r3, [pc, #388]	; (800517c <_dtoa_r+0x5a4>)
 8004ff6:	f7fb f8b9 	bl	800016c <__adddf3>
 8004ffa:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004ffe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005002:	9611      	str	r6, [sp, #68]	; 0x44
 8005004:	2c00      	cmp	r4, #0
 8005006:	d15d      	bne.n	80050c4 <_dtoa_r+0x4ec>
 8005008:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800500c:	2200      	movs	r2, #0
 800500e:	4b5c      	ldr	r3, [pc, #368]	; (8005180 <_dtoa_r+0x5a8>)
 8005010:	f7fb f8aa 	bl	8000168 <__aeabi_dsub>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800501c:	4633      	mov	r3, r6
 800501e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005020:	f7fb fcea 	bl	80009f8 <__aeabi_dcmpgt>
 8005024:	2800      	cmp	r0, #0
 8005026:	f040 8295 	bne.w	8005554 <_dtoa_r+0x97c>
 800502a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800502e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005030:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005034:	f7fb fcc2 	bl	80009bc <__aeabi_dcmplt>
 8005038:	2800      	cmp	r0, #0
 800503a:	f040 8289 	bne.w	8005550 <_dtoa_r+0x978>
 800503e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005042:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005046:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005048:	2b00      	cmp	r3, #0
 800504a:	f2c0 8151 	blt.w	80052f0 <_dtoa_r+0x718>
 800504e:	f1bb 0f0e 	cmp.w	fp, #14
 8005052:	f300 814d 	bgt.w	80052f0 <_dtoa_r+0x718>
 8005056:	4b45      	ldr	r3, [pc, #276]	; (800516c <_dtoa_r+0x594>)
 8005058:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800505c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005060:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005064:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005066:	2b00      	cmp	r3, #0
 8005068:	f280 80da 	bge.w	8005220 <_dtoa_r+0x648>
 800506c:	9b08      	ldr	r3, [sp, #32]
 800506e:	2b00      	cmp	r3, #0
 8005070:	f300 80d6 	bgt.w	8005220 <_dtoa_r+0x648>
 8005074:	f040 826b 	bne.w	800554e <_dtoa_r+0x976>
 8005078:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800507c:	2200      	movs	r2, #0
 800507e:	4b40      	ldr	r3, [pc, #256]	; (8005180 <_dtoa_r+0x5a8>)
 8005080:	f7fb fa2a 	bl	80004d8 <__aeabi_dmul>
 8005084:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005088:	f7fb fcac 	bl	80009e4 <__aeabi_dcmpge>
 800508c:	9c08      	ldr	r4, [sp, #32]
 800508e:	4626      	mov	r6, r4
 8005090:	2800      	cmp	r0, #0
 8005092:	f040 8241 	bne.w	8005518 <_dtoa_r+0x940>
 8005096:	2331      	movs	r3, #49	; 0x31
 8005098:	9f03      	ldr	r7, [sp, #12]
 800509a:	f10b 0b01 	add.w	fp, fp, #1
 800509e:	f807 3b01 	strb.w	r3, [r7], #1
 80050a2:	e23d      	b.n	8005520 <_dtoa_r+0x948>
 80050a4:	07e2      	lsls	r2, r4, #31
 80050a6:	d505      	bpl.n	80050b4 <_dtoa_r+0x4dc>
 80050a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80050ac:	f7fb fa14 	bl	80004d8 <__aeabi_dmul>
 80050b0:	2301      	movs	r3, #1
 80050b2:	3701      	adds	r7, #1
 80050b4:	1064      	asrs	r4, r4, #1
 80050b6:	3608      	adds	r6, #8
 80050b8:	e76d      	b.n	8004f96 <_dtoa_r+0x3be>
 80050ba:	2702      	movs	r7, #2
 80050bc:	e770      	b.n	8004fa0 <_dtoa_r+0x3c8>
 80050be:	46d8      	mov	r8, fp
 80050c0:	9c08      	ldr	r4, [sp, #32]
 80050c2:	e78f      	b.n	8004fe4 <_dtoa_r+0x40c>
 80050c4:	9903      	ldr	r1, [sp, #12]
 80050c6:	4b29      	ldr	r3, [pc, #164]	; (800516c <_dtoa_r+0x594>)
 80050c8:	4421      	add	r1, r4
 80050ca:	9112      	str	r1, [sp, #72]	; 0x48
 80050cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80050ce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80050d2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80050d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80050da:	2900      	cmp	r1, #0
 80050dc:	d054      	beq.n	8005188 <_dtoa_r+0x5b0>
 80050de:	2000      	movs	r0, #0
 80050e0:	4928      	ldr	r1, [pc, #160]	; (8005184 <_dtoa_r+0x5ac>)
 80050e2:	f7fb fb23 	bl	800072c <__aeabi_ddiv>
 80050e6:	463b      	mov	r3, r7
 80050e8:	4632      	mov	r2, r6
 80050ea:	f7fb f83d 	bl	8000168 <__aeabi_dsub>
 80050ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80050f2:	9f03      	ldr	r7, [sp, #12]
 80050f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050f8:	f7fb fc9e 	bl	8000a38 <__aeabi_d2iz>
 80050fc:	4604      	mov	r4, r0
 80050fe:	f7fb f981 	bl	8000404 <__aeabi_i2d>
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800510a:	f7fb f82d 	bl	8000168 <__aeabi_dsub>
 800510e:	4602      	mov	r2, r0
 8005110:	460b      	mov	r3, r1
 8005112:	3430      	adds	r4, #48	; 0x30
 8005114:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005118:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800511c:	f807 4b01 	strb.w	r4, [r7], #1
 8005120:	f7fb fc4c 	bl	80009bc <__aeabi_dcmplt>
 8005124:	2800      	cmp	r0, #0
 8005126:	d173      	bne.n	8005210 <_dtoa_r+0x638>
 8005128:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800512c:	2000      	movs	r0, #0
 800512e:	4911      	ldr	r1, [pc, #68]	; (8005174 <_dtoa_r+0x59c>)
 8005130:	f7fb f81a 	bl	8000168 <__aeabi_dsub>
 8005134:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005138:	f7fb fc40 	bl	80009bc <__aeabi_dcmplt>
 800513c:	2800      	cmp	r0, #0
 800513e:	f040 80b6 	bne.w	80052ae <_dtoa_r+0x6d6>
 8005142:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005144:	429f      	cmp	r7, r3
 8005146:	f43f af7a 	beq.w	800503e <_dtoa_r+0x466>
 800514a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800514e:	2200      	movs	r2, #0
 8005150:	4b09      	ldr	r3, [pc, #36]	; (8005178 <_dtoa_r+0x5a0>)
 8005152:	f7fb f9c1 	bl	80004d8 <__aeabi_dmul>
 8005156:	2200      	movs	r2, #0
 8005158:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800515c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005160:	4b05      	ldr	r3, [pc, #20]	; (8005178 <_dtoa_r+0x5a0>)
 8005162:	f7fb f9b9 	bl	80004d8 <__aeabi_dmul>
 8005166:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800516a:	e7c3      	b.n	80050f4 <_dtoa_r+0x51c>
 800516c:	08008380 	.word	0x08008380
 8005170:	08008358 	.word	0x08008358
 8005174:	3ff00000 	.word	0x3ff00000
 8005178:	40240000 	.word	0x40240000
 800517c:	401c0000 	.word	0x401c0000
 8005180:	40140000 	.word	0x40140000
 8005184:	3fe00000 	.word	0x3fe00000
 8005188:	4630      	mov	r0, r6
 800518a:	4639      	mov	r1, r7
 800518c:	f7fb f9a4 	bl	80004d8 <__aeabi_dmul>
 8005190:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005192:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005196:	9c03      	ldr	r4, [sp, #12]
 8005198:	9314      	str	r3, [sp, #80]	; 0x50
 800519a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800519e:	f7fb fc4b 	bl	8000a38 <__aeabi_d2iz>
 80051a2:	9015      	str	r0, [sp, #84]	; 0x54
 80051a4:	f7fb f92e 	bl	8000404 <__aeabi_i2d>
 80051a8:	4602      	mov	r2, r0
 80051aa:	460b      	mov	r3, r1
 80051ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051b0:	f7fa ffda 	bl	8000168 <__aeabi_dsub>
 80051b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80051b6:	4606      	mov	r6, r0
 80051b8:	3330      	adds	r3, #48	; 0x30
 80051ba:	f804 3b01 	strb.w	r3, [r4], #1
 80051be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80051c0:	460f      	mov	r7, r1
 80051c2:	429c      	cmp	r4, r3
 80051c4:	f04f 0200 	mov.w	r2, #0
 80051c8:	d124      	bne.n	8005214 <_dtoa_r+0x63c>
 80051ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80051ce:	4baf      	ldr	r3, [pc, #700]	; (800548c <_dtoa_r+0x8b4>)
 80051d0:	f7fa ffcc 	bl	800016c <__adddf3>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	4630      	mov	r0, r6
 80051da:	4639      	mov	r1, r7
 80051dc:	f7fb fc0c 	bl	80009f8 <__aeabi_dcmpgt>
 80051e0:	2800      	cmp	r0, #0
 80051e2:	d163      	bne.n	80052ac <_dtoa_r+0x6d4>
 80051e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051e8:	2000      	movs	r0, #0
 80051ea:	49a8      	ldr	r1, [pc, #672]	; (800548c <_dtoa_r+0x8b4>)
 80051ec:	f7fa ffbc 	bl	8000168 <__aeabi_dsub>
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	4630      	mov	r0, r6
 80051f6:	4639      	mov	r1, r7
 80051f8:	f7fb fbe0 	bl	80009bc <__aeabi_dcmplt>
 80051fc:	2800      	cmp	r0, #0
 80051fe:	f43f af1e 	beq.w	800503e <_dtoa_r+0x466>
 8005202:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005204:	1e7b      	subs	r3, r7, #1
 8005206:	9314      	str	r3, [sp, #80]	; 0x50
 8005208:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800520c:	2b30      	cmp	r3, #48	; 0x30
 800520e:	d0f8      	beq.n	8005202 <_dtoa_r+0x62a>
 8005210:	46c3      	mov	fp, r8
 8005212:	e03b      	b.n	800528c <_dtoa_r+0x6b4>
 8005214:	4b9e      	ldr	r3, [pc, #632]	; (8005490 <_dtoa_r+0x8b8>)
 8005216:	f7fb f95f 	bl	80004d8 <__aeabi_dmul>
 800521a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800521e:	e7bc      	b.n	800519a <_dtoa_r+0x5c2>
 8005220:	9f03      	ldr	r7, [sp, #12]
 8005222:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005226:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800522a:	4640      	mov	r0, r8
 800522c:	4649      	mov	r1, r9
 800522e:	f7fb fa7d 	bl	800072c <__aeabi_ddiv>
 8005232:	f7fb fc01 	bl	8000a38 <__aeabi_d2iz>
 8005236:	4604      	mov	r4, r0
 8005238:	f7fb f8e4 	bl	8000404 <__aeabi_i2d>
 800523c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005240:	f7fb f94a 	bl	80004d8 <__aeabi_dmul>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	4640      	mov	r0, r8
 800524a:	4649      	mov	r1, r9
 800524c:	f7fa ff8c 	bl	8000168 <__aeabi_dsub>
 8005250:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005254:	f807 6b01 	strb.w	r6, [r7], #1
 8005258:	9e03      	ldr	r6, [sp, #12]
 800525a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800525e:	1bbe      	subs	r6, r7, r6
 8005260:	45b4      	cmp	ip, r6
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	d136      	bne.n	80052d6 <_dtoa_r+0x6fe>
 8005268:	f7fa ff80 	bl	800016c <__adddf3>
 800526c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005270:	4680      	mov	r8, r0
 8005272:	4689      	mov	r9, r1
 8005274:	f7fb fbc0 	bl	80009f8 <__aeabi_dcmpgt>
 8005278:	bb58      	cbnz	r0, 80052d2 <_dtoa_r+0x6fa>
 800527a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800527e:	4640      	mov	r0, r8
 8005280:	4649      	mov	r1, r9
 8005282:	f7fb fb91 	bl	80009a8 <__aeabi_dcmpeq>
 8005286:	b108      	cbz	r0, 800528c <_dtoa_r+0x6b4>
 8005288:	07e3      	lsls	r3, r4, #31
 800528a:	d422      	bmi.n	80052d2 <_dtoa_r+0x6fa>
 800528c:	4651      	mov	r1, sl
 800528e:	4628      	mov	r0, r5
 8005290:	f000 fbc2 	bl	8005a18 <_Bfree>
 8005294:	2300      	movs	r3, #0
 8005296:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005298:	703b      	strb	r3, [r7, #0]
 800529a:	f10b 0301 	add.w	r3, fp, #1
 800529e:	6013      	str	r3, [r2, #0]
 80052a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f43f ace6 	beq.w	8004c74 <_dtoa_r+0x9c>
 80052a8:	601f      	str	r7, [r3, #0]
 80052aa:	e4e3      	b.n	8004c74 <_dtoa_r+0x9c>
 80052ac:	4627      	mov	r7, r4
 80052ae:	463b      	mov	r3, r7
 80052b0:	461f      	mov	r7, r3
 80052b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80052b6:	2a39      	cmp	r2, #57	; 0x39
 80052b8:	d107      	bne.n	80052ca <_dtoa_r+0x6f2>
 80052ba:	9a03      	ldr	r2, [sp, #12]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d1f7      	bne.n	80052b0 <_dtoa_r+0x6d8>
 80052c0:	2230      	movs	r2, #48	; 0x30
 80052c2:	9903      	ldr	r1, [sp, #12]
 80052c4:	f108 0801 	add.w	r8, r8, #1
 80052c8:	700a      	strb	r2, [r1, #0]
 80052ca:	781a      	ldrb	r2, [r3, #0]
 80052cc:	3201      	adds	r2, #1
 80052ce:	701a      	strb	r2, [r3, #0]
 80052d0:	e79e      	b.n	8005210 <_dtoa_r+0x638>
 80052d2:	46d8      	mov	r8, fp
 80052d4:	e7eb      	b.n	80052ae <_dtoa_r+0x6d6>
 80052d6:	2200      	movs	r2, #0
 80052d8:	4b6d      	ldr	r3, [pc, #436]	; (8005490 <_dtoa_r+0x8b8>)
 80052da:	f7fb f8fd 	bl	80004d8 <__aeabi_dmul>
 80052de:	2200      	movs	r2, #0
 80052e0:	2300      	movs	r3, #0
 80052e2:	4680      	mov	r8, r0
 80052e4:	4689      	mov	r9, r1
 80052e6:	f7fb fb5f 	bl	80009a8 <__aeabi_dcmpeq>
 80052ea:	2800      	cmp	r0, #0
 80052ec:	d09b      	beq.n	8005226 <_dtoa_r+0x64e>
 80052ee:	e7cd      	b.n	800528c <_dtoa_r+0x6b4>
 80052f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80052f2:	2a00      	cmp	r2, #0
 80052f4:	f000 80c4 	beq.w	8005480 <_dtoa_r+0x8a8>
 80052f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80052fa:	2a01      	cmp	r2, #1
 80052fc:	f300 80a8 	bgt.w	8005450 <_dtoa_r+0x878>
 8005300:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005302:	2a00      	cmp	r2, #0
 8005304:	f000 80a0 	beq.w	8005448 <_dtoa_r+0x870>
 8005308:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800530c:	464f      	mov	r7, r9
 800530e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005310:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005312:	2101      	movs	r1, #1
 8005314:	441a      	add	r2, r3
 8005316:	4628      	mov	r0, r5
 8005318:	4499      	add	r9, r3
 800531a:	9209      	str	r2, [sp, #36]	; 0x24
 800531c:	f000 fc7c 	bl	8005c18 <__i2b>
 8005320:	4606      	mov	r6, r0
 8005322:	b15f      	cbz	r7, 800533c <_dtoa_r+0x764>
 8005324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005326:	2b00      	cmp	r3, #0
 8005328:	dd08      	ble.n	800533c <_dtoa_r+0x764>
 800532a:	42bb      	cmp	r3, r7
 800532c:	bfa8      	it	ge
 800532e:	463b      	movge	r3, r7
 8005330:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005332:	eba9 0903 	sub.w	r9, r9, r3
 8005336:	1aff      	subs	r7, r7, r3
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	9309      	str	r3, [sp, #36]	; 0x24
 800533c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800533e:	b1f3      	cbz	r3, 800537e <_dtoa_r+0x7a6>
 8005340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005342:	2b00      	cmp	r3, #0
 8005344:	f000 80a0 	beq.w	8005488 <_dtoa_r+0x8b0>
 8005348:	2c00      	cmp	r4, #0
 800534a:	dd10      	ble.n	800536e <_dtoa_r+0x796>
 800534c:	4631      	mov	r1, r6
 800534e:	4622      	mov	r2, r4
 8005350:	4628      	mov	r0, r5
 8005352:	f000 fd1f 	bl	8005d94 <__pow5mult>
 8005356:	4652      	mov	r2, sl
 8005358:	4601      	mov	r1, r0
 800535a:	4606      	mov	r6, r0
 800535c:	4628      	mov	r0, r5
 800535e:	f000 fc71 	bl	8005c44 <__multiply>
 8005362:	4680      	mov	r8, r0
 8005364:	4651      	mov	r1, sl
 8005366:	4628      	mov	r0, r5
 8005368:	f000 fb56 	bl	8005a18 <_Bfree>
 800536c:	46c2      	mov	sl, r8
 800536e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005370:	1b1a      	subs	r2, r3, r4
 8005372:	d004      	beq.n	800537e <_dtoa_r+0x7a6>
 8005374:	4651      	mov	r1, sl
 8005376:	4628      	mov	r0, r5
 8005378:	f000 fd0c 	bl	8005d94 <__pow5mult>
 800537c:	4682      	mov	sl, r0
 800537e:	2101      	movs	r1, #1
 8005380:	4628      	mov	r0, r5
 8005382:	f000 fc49 	bl	8005c18 <__i2b>
 8005386:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005388:	4604      	mov	r4, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	f340 8082 	ble.w	8005494 <_dtoa_r+0x8bc>
 8005390:	461a      	mov	r2, r3
 8005392:	4601      	mov	r1, r0
 8005394:	4628      	mov	r0, r5
 8005396:	f000 fcfd 	bl	8005d94 <__pow5mult>
 800539a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800539c:	4604      	mov	r4, r0
 800539e:	2b01      	cmp	r3, #1
 80053a0:	dd7b      	ble.n	800549a <_dtoa_r+0x8c2>
 80053a2:	f04f 0800 	mov.w	r8, #0
 80053a6:	6923      	ldr	r3, [r4, #16]
 80053a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80053ac:	6918      	ldr	r0, [r3, #16]
 80053ae:	f000 fbe5 	bl	8005b7c <__hi0bits>
 80053b2:	f1c0 0020 	rsb	r0, r0, #32
 80053b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053b8:	4418      	add	r0, r3
 80053ba:	f010 001f 	ands.w	r0, r0, #31
 80053be:	f000 8092 	beq.w	80054e6 <_dtoa_r+0x90e>
 80053c2:	f1c0 0320 	rsb	r3, r0, #32
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	f340 8085 	ble.w	80054d6 <_dtoa_r+0x8fe>
 80053cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053ce:	f1c0 001c 	rsb	r0, r0, #28
 80053d2:	4403      	add	r3, r0
 80053d4:	4481      	add	r9, r0
 80053d6:	4407      	add	r7, r0
 80053d8:	9309      	str	r3, [sp, #36]	; 0x24
 80053da:	f1b9 0f00 	cmp.w	r9, #0
 80053de:	dd05      	ble.n	80053ec <_dtoa_r+0x814>
 80053e0:	4651      	mov	r1, sl
 80053e2:	464a      	mov	r2, r9
 80053e4:	4628      	mov	r0, r5
 80053e6:	f000 fd2f 	bl	8005e48 <__lshift>
 80053ea:	4682      	mov	sl, r0
 80053ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	dd05      	ble.n	80053fe <_dtoa_r+0x826>
 80053f2:	4621      	mov	r1, r4
 80053f4:	461a      	mov	r2, r3
 80053f6:	4628      	mov	r0, r5
 80053f8:	f000 fd26 	bl	8005e48 <__lshift>
 80053fc:	4604      	mov	r4, r0
 80053fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005400:	2b00      	cmp	r3, #0
 8005402:	d072      	beq.n	80054ea <_dtoa_r+0x912>
 8005404:	4621      	mov	r1, r4
 8005406:	4650      	mov	r0, sl
 8005408:	f000 fd8a 	bl	8005f20 <__mcmp>
 800540c:	2800      	cmp	r0, #0
 800540e:	da6c      	bge.n	80054ea <_dtoa_r+0x912>
 8005410:	2300      	movs	r3, #0
 8005412:	4651      	mov	r1, sl
 8005414:	220a      	movs	r2, #10
 8005416:	4628      	mov	r0, r5
 8005418:	f000 fb20 	bl	8005a5c <__multadd>
 800541c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800541e:	4682      	mov	sl, r0
 8005420:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 81ac 	beq.w	8005782 <_dtoa_r+0xbaa>
 800542a:	2300      	movs	r3, #0
 800542c:	4631      	mov	r1, r6
 800542e:	220a      	movs	r2, #10
 8005430:	4628      	mov	r0, r5
 8005432:	f000 fb13 	bl	8005a5c <__multadd>
 8005436:	9b06      	ldr	r3, [sp, #24]
 8005438:	4606      	mov	r6, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	f300 8093 	bgt.w	8005566 <_dtoa_r+0x98e>
 8005440:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005442:	2b02      	cmp	r3, #2
 8005444:	dc59      	bgt.n	80054fa <_dtoa_r+0x922>
 8005446:	e08e      	b.n	8005566 <_dtoa_r+0x98e>
 8005448:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800544a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800544e:	e75d      	b.n	800530c <_dtoa_r+0x734>
 8005450:	9b08      	ldr	r3, [sp, #32]
 8005452:	1e5c      	subs	r4, r3, #1
 8005454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005456:	42a3      	cmp	r3, r4
 8005458:	bfbf      	itttt	lt
 800545a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800545c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800545e:	1ae3      	sublt	r3, r4, r3
 8005460:	18d2      	addlt	r2, r2, r3
 8005462:	bfa8      	it	ge
 8005464:	1b1c      	subge	r4, r3, r4
 8005466:	9b08      	ldr	r3, [sp, #32]
 8005468:	bfbe      	ittt	lt
 800546a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800546c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800546e:	2400      	movlt	r4, #0
 8005470:	2b00      	cmp	r3, #0
 8005472:	bfb5      	itete	lt
 8005474:	eba9 0703 	sublt.w	r7, r9, r3
 8005478:	464f      	movge	r7, r9
 800547a:	2300      	movlt	r3, #0
 800547c:	9b08      	ldrge	r3, [sp, #32]
 800547e:	e747      	b.n	8005310 <_dtoa_r+0x738>
 8005480:	464f      	mov	r7, r9
 8005482:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005484:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005486:	e74c      	b.n	8005322 <_dtoa_r+0x74a>
 8005488:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800548a:	e773      	b.n	8005374 <_dtoa_r+0x79c>
 800548c:	3fe00000 	.word	0x3fe00000
 8005490:	40240000 	.word	0x40240000
 8005494:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005496:	2b01      	cmp	r3, #1
 8005498:	dc18      	bgt.n	80054cc <_dtoa_r+0x8f4>
 800549a:	9b04      	ldr	r3, [sp, #16]
 800549c:	b9b3      	cbnz	r3, 80054cc <_dtoa_r+0x8f4>
 800549e:	9b05      	ldr	r3, [sp, #20]
 80054a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054a4:	b993      	cbnz	r3, 80054cc <_dtoa_r+0x8f4>
 80054a6:	9b05      	ldr	r3, [sp, #20]
 80054a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054ac:	0d1b      	lsrs	r3, r3, #20
 80054ae:	051b      	lsls	r3, r3, #20
 80054b0:	b17b      	cbz	r3, 80054d2 <_dtoa_r+0x8fa>
 80054b2:	f04f 0801 	mov.w	r8, #1
 80054b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054b8:	f109 0901 	add.w	r9, r9, #1
 80054bc:	3301      	adds	r3, #1
 80054be:	9309      	str	r3, [sp, #36]	; 0x24
 80054c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f47f af6f 	bne.w	80053a6 <_dtoa_r+0x7ce>
 80054c8:	2001      	movs	r0, #1
 80054ca:	e774      	b.n	80053b6 <_dtoa_r+0x7de>
 80054cc:	f04f 0800 	mov.w	r8, #0
 80054d0:	e7f6      	b.n	80054c0 <_dtoa_r+0x8e8>
 80054d2:	4698      	mov	r8, r3
 80054d4:	e7f4      	b.n	80054c0 <_dtoa_r+0x8e8>
 80054d6:	d080      	beq.n	80053da <_dtoa_r+0x802>
 80054d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054da:	331c      	adds	r3, #28
 80054dc:	441a      	add	r2, r3
 80054de:	4499      	add	r9, r3
 80054e0:	441f      	add	r7, r3
 80054e2:	9209      	str	r2, [sp, #36]	; 0x24
 80054e4:	e779      	b.n	80053da <_dtoa_r+0x802>
 80054e6:	4603      	mov	r3, r0
 80054e8:	e7f6      	b.n	80054d8 <_dtoa_r+0x900>
 80054ea:	9b08      	ldr	r3, [sp, #32]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	dc34      	bgt.n	800555a <_dtoa_r+0x982>
 80054f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	dd31      	ble.n	800555a <_dtoa_r+0x982>
 80054f6:	9b08      	ldr	r3, [sp, #32]
 80054f8:	9306      	str	r3, [sp, #24]
 80054fa:	9b06      	ldr	r3, [sp, #24]
 80054fc:	b963      	cbnz	r3, 8005518 <_dtoa_r+0x940>
 80054fe:	4621      	mov	r1, r4
 8005500:	2205      	movs	r2, #5
 8005502:	4628      	mov	r0, r5
 8005504:	f000 faaa 	bl	8005a5c <__multadd>
 8005508:	4601      	mov	r1, r0
 800550a:	4604      	mov	r4, r0
 800550c:	4650      	mov	r0, sl
 800550e:	f000 fd07 	bl	8005f20 <__mcmp>
 8005512:	2800      	cmp	r0, #0
 8005514:	f73f adbf 	bgt.w	8005096 <_dtoa_r+0x4be>
 8005518:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800551a:	9f03      	ldr	r7, [sp, #12]
 800551c:	ea6f 0b03 	mvn.w	fp, r3
 8005520:	f04f 0800 	mov.w	r8, #0
 8005524:	4621      	mov	r1, r4
 8005526:	4628      	mov	r0, r5
 8005528:	f000 fa76 	bl	8005a18 <_Bfree>
 800552c:	2e00      	cmp	r6, #0
 800552e:	f43f aead 	beq.w	800528c <_dtoa_r+0x6b4>
 8005532:	f1b8 0f00 	cmp.w	r8, #0
 8005536:	d005      	beq.n	8005544 <_dtoa_r+0x96c>
 8005538:	45b0      	cmp	r8, r6
 800553a:	d003      	beq.n	8005544 <_dtoa_r+0x96c>
 800553c:	4641      	mov	r1, r8
 800553e:	4628      	mov	r0, r5
 8005540:	f000 fa6a 	bl	8005a18 <_Bfree>
 8005544:	4631      	mov	r1, r6
 8005546:	4628      	mov	r0, r5
 8005548:	f000 fa66 	bl	8005a18 <_Bfree>
 800554c:	e69e      	b.n	800528c <_dtoa_r+0x6b4>
 800554e:	2400      	movs	r4, #0
 8005550:	4626      	mov	r6, r4
 8005552:	e7e1      	b.n	8005518 <_dtoa_r+0x940>
 8005554:	46c3      	mov	fp, r8
 8005556:	4626      	mov	r6, r4
 8005558:	e59d      	b.n	8005096 <_dtoa_r+0x4be>
 800555a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 80c8 	beq.w	80056f2 <_dtoa_r+0xb1a>
 8005562:	9b08      	ldr	r3, [sp, #32]
 8005564:	9306      	str	r3, [sp, #24]
 8005566:	2f00      	cmp	r7, #0
 8005568:	dd05      	ble.n	8005576 <_dtoa_r+0x99e>
 800556a:	4631      	mov	r1, r6
 800556c:	463a      	mov	r2, r7
 800556e:	4628      	mov	r0, r5
 8005570:	f000 fc6a 	bl	8005e48 <__lshift>
 8005574:	4606      	mov	r6, r0
 8005576:	f1b8 0f00 	cmp.w	r8, #0
 800557a:	d05b      	beq.n	8005634 <_dtoa_r+0xa5c>
 800557c:	4628      	mov	r0, r5
 800557e:	6871      	ldr	r1, [r6, #4]
 8005580:	f000 fa0a 	bl	8005998 <_Balloc>
 8005584:	4607      	mov	r7, r0
 8005586:	b928      	cbnz	r0, 8005594 <_dtoa_r+0x9bc>
 8005588:	4602      	mov	r2, r0
 800558a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800558e:	4b81      	ldr	r3, [pc, #516]	; (8005794 <_dtoa_r+0xbbc>)
 8005590:	f7ff bb36 	b.w	8004c00 <_dtoa_r+0x28>
 8005594:	6932      	ldr	r2, [r6, #16]
 8005596:	f106 010c 	add.w	r1, r6, #12
 800559a:	3202      	adds	r2, #2
 800559c:	0092      	lsls	r2, r2, #2
 800559e:	300c      	adds	r0, #12
 80055a0:	f001 ff72 	bl	8007488 <memcpy>
 80055a4:	2201      	movs	r2, #1
 80055a6:	4639      	mov	r1, r7
 80055a8:	4628      	mov	r0, r5
 80055aa:	f000 fc4d 	bl	8005e48 <__lshift>
 80055ae:	46b0      	mov	r8, r6
 80055b0:	4606      	mov	r6, r0
 80055b2:	9b03      	ldr	r3, [sp, #12]
 80055b4:	9a03      	ldr	r2, [sp, #12]
 80055b6:	3301      	adds	r3, #1
 80055b8:	9308      	str	r3, [sp, #32]
 80055ba:	9b06      	ldr	r3, [sp, #24]
 80055bc:	4413      	add	r3, r2
 80055be:	930b      	str	r3, [sp, #44]	; 0x2c
 80055c0:	9b04      	ldr	r3, [sp, #16]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	930a      	str	r3, [sp, #40]	; 0x28
 80055c8:	9b08      	ldr	r3, [sp, #32]
 80055ca:	4621      	mov	r1, r4
 80055cc:	3b01      	subs	r3, #1
 80055ce:	4650      	mov	r0, sl
 80055d0:	9304      	str	r3, [sp, #16]
 80055d2:	f7ff fa75 	bl	8004ac0 <quorem>
 80055d6:	4641      	mov	r1, r8
 80055d8:	9006      	str	r0, [sp, #24]
 80055da:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80055de:	4650      	mov	r0, sl
 80055e0:	f000 fc9e 	bl	8005f20 <__mcmp>
 80055e4:	4632      	mov	r2, r6
 80055e6:	9009      	str	r0, [sp, #36]	; 0x24
 80055e8:	4621      	mov	r1, r4
 80055ea:	4628      	mov	r0, r5
 80055ec:	f000 fcb4 	bl	8005f58 <__mdiff>
 80055f0:	68c2      	ldr	r2, [r0, #12]
 80055f2:	4607      	mov	r7, r0
 80055f4:	bb02      	cbnz	r2, 8005638 <_dtoa_r+0xa60>
 80055f6:	4601      	mov	r1, r0
 80055f8:	4650      	mov	r0, sl
 80055fa:	f000 fc91 	bl	8005f20 <__mcmp>
 80055fe:	4602      	mov	r2, r0
 8005600:	4639      	mov	r1, r7
 8005602:	4628      	mov	r0, r5
 8005604:	920c      	str	r2, [sp, #48]	; 0x30
 8005606:	f000 fa07 	bl	8005a18 <_Bfree>
 800560a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800560c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800560e:	9f08      	ldr	r7, [sp, #32]
 8005610:	ea43 0102 	orr.w	r1, r3, r2
 8005614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005616:	4319      	orrs	r1, r3
 8005618:	d110      	bne.n	800563c <_dtoa_r+0xa64>
 800561a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800561e:	d029      	beq.n	8005674 <_dtoa_r+0xa9c>
 8005620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005622:	2b00      	cmp	r3, #0
 8005624:	dd02      	ble.n	800562c <_dtoa_r+0xa54>
 8005626:	9b06      	ldr	r3, [sp, #24]
 8005628:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800562c:	9b04      	ldr	r3, [sp, #16]
 800562e:	f883 9000 	strb.w	r9, [r3]
 8005632:	e777      	b.n	8005524 <_dtoa_r+0x94c>
 8005634:	4630      	mov	r0, r6
 8005636:	e7ba      	b.n	80055ae <_dtoa_r+0x9d6>
 8005638:	2201      	movs	r2, #1
 800563a:	e7e1      	b.n	8005600 <_dtoa_r+0xa28>
 800563c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800563e:	2b00      	cmp	r3, #0
 8005640:	db04      	blt.n	800564c <_dtoa_r+0xa74>
 8005642:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005644:	430b      	orrs	r3, r1
 8005646:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005648:	430b      	orrs	r3, r1
 800564a:	d120      	bne.n	800568e <_dtoa_r+0xab6>
 800564c:	2a00      	cmp	r2, #0
 800564e:	dded      	ble.n	800562c <_dtoa_r+0xa54>
 8005650:	4651      	mov	r1, sl
 8005652:	2201      	movs	r2, #1
 8005654:	4628      	mov	r0, r5
 8005656:	f000 fbf7 	bl	8005e48 <__lshift>
 800565a:	4621      	mov	r1, r4
 800565c:	4682      	mov	sl, r0
 800565e:	f000 fc5f 	bl	8005f20 <__mcmp>
 8005662:	2800      	cmp	r0, #0
 8005664:	dc03      	bgt.n	800566e <_dtoa_r+0xa96>
 8005666:	d1e1      	bne.n	800562c <_dtoa_r+0xa54>
 8005668:	f019 0f01 	tst.w	r9, #1
 800566c:	d0de      	beq.n	800562c <_dtoa_r+0xa54>
 800566e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005672:	d1d8      	bne.n	8005626 <_dtoa_r+0xa4e>
 8005674:	2339      	movs	r3, #57	; 0x39
 8005676:	9a04      	ldr	r2, [sp, #16]
 8005678:	7013      	strb	r3, [r2, #0]
 800567a:	463b      	mov	r3, r7
 800567c:	461f      	mov	r7, r3
 800567e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005682:	3b01      	subs	r3, #1
 8005684:	2a39      	cmp	r2, #57	; 0x39
 8005686:	d06b      	beq.n	8005760 <_dtoa_r+0xb88>
 8005688:	3201      	adds	r2, #1
 800568a:	701a      	strb	r2, [r3, #0]
 800568c:	e74a      	b.n	8005524 <_dtoa_r+0x94c>
 800568e:	2a00      	cmp	r2, #0
 8005690:	dd07      	ble.n	80056a2 <_dtoa_r+0xaca>
 8005692:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005696:	d0ed      	beq.n	8005674 <_dtoa_r+0xa9c>
 8005698:	9a04      	ldr	r2, [sp, #16]
 800569a:	f109 0301 	add.w	r3, r9, #1
 800569e:	7013      	strb	r3, [r2, #0]
 80056a0:	e740      	b.n	8005524 <_dtoa_r+0x94c>
 80056a2:	9b08      	ldr	r3, [sp, #32]
 80056a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80056a6:	f803 9c01 	strb.w	r9, [r3, #-1]
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d042      	beq.n	8005734 <_dtoa_r+0xb5c>
 80056ae:	4651      	mov	r1, sl
 80056b0:	2300      	movs	r3, #0
 80056b2:	220a      	movs	r2, #10
 80056b4:	4628      	mov	r0, r5
 80056b6:	f000 f9d1 	bl	8005a5c <__multadd>
 80056ba:	45b0      	cmp	r8, r6
 80056bc:	4682      	mov	sl, r0
 80056be:	f04f 0300 	mov.w	r3, #0
 80056c2:	f04f 020a 	mov.w	r2, #10
 80056c6:	4641      	mov	r1, r8
 80056c8:	4628      	mov	r0, r5
 80056ca:	d107      	bne.n	80056dc <_dtoa_r+0xb04>
 80056cc:	f000 f9c6 	bl	8005a5c <__multadd>
 80056d0:	4680      	mov	r8, r0
 80056d2:	4606      	mov	r6, r0
 80056d4:	9b08      	ldr	r3, [sp, #32]
 80056d6:	3301      	adds	r3, #1
 80056d8:	9308      	str	r3, [sp, #32]
 80056da:	e775      	b.n	80055c8 <_dtoa_r+0x9f0>
 80056dc:	f000 f9be 	bl	8005a5c <__multadd>
 80056e0:	4631      	mov	r1, r6
 80056e2:	4680      	mov	r8, r0
 80056e4:	2300      	movs	r3, #0
 80056e6:	220a      	movs	r2, #10
 80056e8:	4628      	mov	r0, r5
 80056ea:	f000 f9b7 	bl	8005a5c <__multadd>
 80056ee:	4606      	mov	r6, r0
 80056f0:	e7f0      	b.n	80056d4 <_dtoa_r+0xafc>
 80056f2:	9b08      	ldr	r3, [sp, #32]
 80056f4:	9306      	str	r3, [sp, #24]
 80056f6:	9f03      	ldr	r7, [sp, #12]
 80056f8:	4621      	mov	r1, r4
 80056fa:	4650      	mov	r0, sl
 80056fc:	f7ff f9e0 	bl	8004ac0 <quorem>
 8005700:	9b03      	ldr	r3, [sp, #12]
 8005702:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005706:	f807 9b01 	strb.w	r9, [r7], #1
 800570a:	1afa      	subs	r2, r7, r3
 800570c:	9b06      	ldr	r3, [sp, #24]
 800570e:	4293      	cmp	r3, r2
 8005710:	dd07      	ble.n	8005722 <_dtoa_r+0xb4a>
 8005712:	4651      	mov	r1, sl
 8005714:	2300      	movs	r3, #0
 8005716:	220a      	movs	r2, #10
 8005718:	4628      	mov	r0, r5
 800571a:	f000 f99f 	bl	8005a5c <__multadd>
 800571e:	4682      	mov	sl, r0
 8005720:	e7ea      	b.n	80056f8 <_dtoa_r+0xb20>
 8005722:	9b06      	ldr	r3, [sp, #24]
 8005724:	f04f 0800 	mov.w	r8, #0
 8005728:	2b00      	cmp	r3, #0
 800572a:	bfcc      	ite	gt
 800572c:	461f      	movgt	r7, r3
 800572e:	2701      	movle	r7, #1
 8005730:	9b03      	ldr	r3, [sp, #12]
 8005732:	441f      	add	r7, r3
 8005734:	4651      	mov	r1, sl
 8005736:	2201      	movs	r2, #1
 8005738:	4628      	mov	r0, r5
 800573a:	f000 fb85 	bl	8005e48 <__lshift>
 800573e:	4621      	mov	r1, r4
 8005740:	4682      	mov	sl, r0
 8005742:	f000 fbed 	bl	8005f20 <__mcmp>
 8005746:	2800      	cmp	r0, #0
 8005748:	dc97      	bgt.n	800567a <_dtoa_r+0xaa2>
 800574a:	d102      	bne.n	8005752 <_dtoa_r+0xb7a>
 800574c:	f019 0f01 	tst.w	r9, #1
 8005750:	d193      	bne.n	800567a <_dtoa_r+0xaa2>
 8005752:	463b      	mov	r3, r7
 8005754:	461f      	mov	r7, r3
 8005756:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800575a:	2a30      	cmp	r2, #48	; 0x30
 800575c:	d0fa      	beq.n	8005754 <_dtoa_r+0xb7c>
 800575e:	e6e1      	b.n	8005524 <_dtoa_r+0x94c>
 8005760:	9a03      	ldr	r2, [sp, #12]
 8005762:	429a      	cmp	r2, r3
 8005764:	d18a      	bne.n	800567c <_dtoa_r+0xaa4>
 8005766:	2331      	movs	r3, #49	; 0x31
 8005768:	f10b 0b01 	add.w	fp, fp, #1
 800576c:	e797      	b.n	800569e <_dtoa_r+0xac6>
 800576e:	4b0a      	ldr	r3, [pc, #40]	; (8005798 <_dtoa_r+0xbc0>)
 8005770:	f7ff ba9f 	b.w	8004cb2 <_dtoa_r+0xda>
 8005774:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005776:	2b00      	cmp	r3, #0
 8005778:	f47f aa77 	bne.w	8004c6a <_dtoa_r+0x92>
 800577c:	4b07      	ldr	r3, [pc, #28]	; (800579c <_dtoa_r+0xbc4>)
 800577e:	f7ff ba98 	b.w	8004cb2 <_dtoa_r+0xda>
 8005782:	9b06      	ldr	r3, [sp, #24]
 8005784:	2b00      	cmp	r3, #0
 8005786:	dcb6      	bgt.n	80056f6 <_dtoa_r+0xb1e>
 8005788:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800578a:	2b02      	cmp	r3, #2
 800578c:	f73f aeb5 	bgt.w	80054fa <_dtoa_r+0x922>
 8005790:	e7b1      	b.n	80056f6 <_dtoa_r+0xb1e>
 8005792:	bf00      	nop
 8005794:	080082e7 	.word	0x080082e7
 8005798:	08008242 	.word	0x08008242
 800579c:	0800826b 	.word	0x0800826b

080057a0 <_free_r>:
 80057a0:	b538      	push	{r3, r4, r5, lr}
 80057a2:	4605      	mov	r5, r0
 80057a4:	2900      	cmp	r1, #0
 80057a6:	d040      	beq.n	800582a <_free_r+0x8a>
 80057a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057ac:	1f0c      	subs	r4, r1, #4
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	bfb8      	it	lt
 80057b2:	18e4      	addlt	r4, r4, r3
 80057b4:	f000 f8e4 	bl	8005980 <__malloc_lock>
 80057b8:	4a1c      	ldr	r2, [pc, #112]	; (800582c <_free_r+0x8c>)
 80057ba:	6813      	ldr	r3, [r2, #0]
 80057bc:	b933      	cbnz	r3, 80057cc <_free_r+0x2c>
 80057be:	6063      	str	r3, [r4, #4]
 80057c0:	6014      	str	r4, [r2, #0]
 80057c2:	4628      	mov	r0, r5
 80057c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057c8:	f000 b8e0 	b.w	800598c <__malloc_unlock>
 80057cc:	42a3      	cmp	r3, r4
 80057ce:	d908      	bls.n	80057e2 <_free_r+0x42>
 80057d0:	6820      	ldr	r0, [r4, #0]
 80057d2:	1821      	adds	r1, r4, r0
 80057d4:	428b      	cmp	r3, r1
 80057d6:	bf01      	itttt	eq
 80057d8:	6819      	ldreq	r1, [r3, #0]
 80057da:	685b      	ldreq	r3, [r3, #4]
 80057dc:	1809      	addeq	r1, r1, r0
 80057de:	6021      	streq	r1, [r4, #0]
 80057e0:	e7ed      	b.n	80057be <_free_r+0x1e>
 80057e2:	461a      	mov	r2, r3
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	b10b      	cbz	r3, 80057ec <_free_r+0x4c>
 80057e8:	42a3      	cmp	r3, r4
 80057ea:	d9fa      	bls.n	80057e2 <_free_r+0x42>
 80057ec:	6811      	ldr	r1, [r2, #0]
 80057ee:	1850      	adds	r0, r2, r1
 80057f0:	42a0      	cmp	r0, r4
 80057f2:	d10b      	bne.n	800580c <_free_r+0x6c>
 80057f4:	6820      	ldr	r0, [r4, #0]
 80057f6:	4401      	add	r1, r0
 80057f8:	1850      	adds	r0, r2, r1
 80057fa:	4283      	cmp	r3, r0
 80057fc:	6011      	str	r1, [r2, #0]
 80057fe:	d1e0      	bne.n	80057c2 <_free_r+0x22>
 8005800:	6818      	ldr	r0, [r3, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	4408      	add	r0, r1
 8005806:	6010      	str	r0, [r2, #0]
 8005808:	6053      	str	r3, [r2, #4]
 800580a:	e7da      	b.n	80057c2 <_free_r+0x22>
 800580c:	d902      	bls.n	8005814 <_free_r+0x74>
 800580e:	230c      	movs	r3, #12
 8005810:	602b      	str	r3, [r5, #0]
 8005812:	e7d6      	b.n	80057c2 <_free_r+0x22>
 8005814:	6820      	ldr	r0, [r4, #0]
 8005816:	1821      	adds	r1, r4, r0
 8005818:	428b      	cmp	r3, r1
 800581a:	bf01      	itttt	eq
 800581c:	6819      	ldreq	r1, [r3, #0]
 800581e:	685b      	ldreq	r3, [r3, #4]
 8005820:	1809      	addeq	r1, r1, r0
 8005822:	6021      	streq	r1, [r4, #0]
 8005824:	6063      	str	r3, [r4, #4]
 8005826:	6054      	str	r4, [r2, #4]
 8005828:	e7cb      	b.n	80057c2 <_free_r+0x22>
 800582a:	bd38      	pop	{r3, r4, r5, pc}
 800582c:	2000045c 	.word	0x2000045c

08005830 <malloc>:
 8005830:	4b02      	ldr	r3, [pc, #8]	; (800583c <malloc+0xc>)
 8005832:	4601      	mov	r1, r0
 8005834:	6818      	ldr	r0, [r3, #0]
 8005836:	f000 b823 	b.w	8005880 <_malloc_r>
 800583a:	bf00      	nop
 800583c:	20000064 	.word	0x20000064

08005840 <sbrk_aligned>:
 8005840:	b570      	push	{r4, r5, r6, lr}
 8005842:	4e0e      	ldr	r6, [pc, #56]	; (800587c <sbrk_aligned+0x3c>)
 8005844:	460c      	mov	r4, r1
 8005846:	6831      	ldr	r1, [r6, #0]
 8005848:	4605      	mov	r5, r0
 800584a:	b911      	cbnz	r1, 8005852 <sbrk_aligned+0x12>
 800584c:	f001 fe0c 	bl	8007468 <_sbrk_r>
 8005850:	6030      	str	r0, [r6, #0]
 8005852:	4621      	mov	r1, r4
 8005854:	4628      	mov	r0, r5
 8005856:	f001 fe07 	bl	8007468 <_sbrk_r>
 800585a:	1c43      	adds	r3, r0, #1
 800585c:	d00a      	beq.n	8005874 <sbrk_aligned+0x34>
 800585e:	1cc4      	adds	r4, r0, #3
 8005860:	f024 0403 	bic.w	r4, r4, #3
 8005864:	42a0      	cmp	r0, r4
 8005866:	d007      	beq.n	8005878 <sbrk_aligned+0x38>
 8005868:	1a21      	subs	r1, r4, r0
 800586a:	4628      	mov	r0, r5
 800586c:	f001 fdfc 	bl	8007468 <_sbrk_r>
 8005870:	3001      	adds	r0, #1
 8005872:	d101      	bne.n	8005878 <sbrk_aligned+0x38>
 8005874:	f04f 34ff 	mov.w	r4, #4294967295
 8005878:	4620      	mov	r0, r4
 800587a:	bd70      	pop	{r4, r5, r6, pc}
 800587c:	20000460 	.word	0x20000460

08005880 <_malloc_r>:
 8005880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005884:	1ccd      	adds	r5, r1, #3
 8005886:	f025 0503 	bic.w	r5, r5, #3
 800588a:	3508      	adds	r5, #8
 800588c:	2d0c      	cmp	r5, #12
 800588e:	bf38      	it	cc
 8005890:	250c      	movcc	r5, #12
 8005892:	2d00      	cmp	r5, #0
 8005894:	4607      	mov	r7, r0
 8005896:	db01      	blt.n	800589c <_malloc_r+0x1c>
 8005898:	42a9      	cmp	r1, r5
 800589a:	d905      	bls.n	80058a8 <_malloc_r+0x28>
 800589c:	230c      	movs	r3, #12
 800589e:	2600      	movs	r6, #0
 80058a0:	603b      	str	r3, [r7, #0]
 80058a2:	4630      	mov	r0, r6
 80058a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800597c <_malloc_r+0xfc>
 80058ac:	f000 f868 	bl	8005980 <__malloc_lock>
 80058b0:	f8d8 3000 	ldr.w	r3, [r8]
 80058b4:	461c      	mov	r4, r3
 80058b6:	bb5c      	cbnz	r4, 8005910 <_malloc_r+0x90>
 80058b8:	4629      	mov	r1, r5
 80058ba:	4638      	mov	r0, r7
 80058bc:	f7ff ffc0 	bl	8005840 <sbrk_aligned>
 80058c0:	1c43      	adds	r3, r0, #1
 80058c2:	4604      	mov	r4, r0
 80058c4:	d155      	bne.n	8005972 <_malloc_r+0xf2>
 80058c6:	f8d8 4000 	ldr.w	r4, [r8]
 80058ca:	4626      	mov	r6, r4
 80058cc:	2e00      	cmp	r6, #0
 80058ce:	d145      	bne.n	800595c <_malloc_r+0xdc>
 80058d0:	2c00      	cmp	r4, #0
 80058d2:	d048      	beq.n	8005966 <_malloc_r+0xe6>
 80058d4:	6823      	ldr	r3, [r4, #0]
 80058d6:	4631      	mov	r1, r6
 80058d8:	4638      	mov	r0, r7
 80058da:	eb04 0903 	add.w	r9, r4, r3
 80058de:	f001 fdc3 	bl	8007468 <_sbrk_r>
 80058e2:	4581      	cmp	r9, r0
 80058e4:	d13f      	bne.n	8005966 <_malloc_r+0xe6>
 80058e6:	6821      	ldr	r1, [r4, #0]
 80058e8:	4638      	mov	r0, r7
 80058ea:	1a6d      	subs	r5, r5, r1
 80058ec:	4629      	mov	r1, r5
 80058ee:	f7ff ffa7 	bl	8005840 <sbrk_aligned>
 80058f2:	3001      	adds	r0, #1
 80058f4:	d037      	beq.n	8005966 <_malloc_r+0xe6>
 80058f6:	6823      	ldr	r3, [r4, #0]
 80058f8:	442b      	add	r3, r5
 80058fa:	6023      	str	r3, [r4, #0]
 80058fc:	f8d8 3000 	ldr.w	r3, [r8]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d038      	beq.n	8005976 <_malloc_r+0xf6>
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	42a2      	cmp	r2, r4
 8005908:	d12b      	bne.n	8005962 <_malloc_r+0xe2>
 800590a:	2200      	movs	r2, #0
 800590c:	605a      	str	r2, [r3, #4]
 800590e:	e00f      	b.n	8005930 <_malloc_r+0xb0>
 8005910:	6822      	ldr	r2, [r4, #0]
 8005912:	1b52      	subs	r2, r2, r5
 8005914:	d41f      	bmi.n	8005956 <_malloc_r+0xd6>
 8005916:	2a0b      	cmp	r2, #11
 8005918:	d917      	bls.n	800594a <_malloc_r+0xca>
 800591a:	1961      	adds	r1, r4, r5
 800591c:	42a3      	cmp	r3, r4
 800591e:	6025      	str	r5, [r4, #0]
 8005920:	bf18      	it	ne
 8005922:	6059      	strne	r1, [r3, #4]
 8005924:	6863      	ldr	r3, [r4, #4]
 8005926:	bf08      	it	eq
 8005928:	f8c8 1000 	streq.w	r1, [r8]
 800592c:	5162      	str	r2, [r4, r5]
 800592e:	604b      	str	r3, [r1, #4]
 8005930:	4638      	mov	r0, r7
 8005932:	f104 060b 	add.w	r6, r4, #11
 8005936:	f000 f829 	bl	800598c <__malloc_unlock>
 800593a:	f026 0607 	bic.w	r6, r6, #7
 800593e:	1d23      	adds	r3, r4, #4
 8005940:	1af2      	subs	r2, r6, r3
 8005942:	d0ae      	beq.n	80058a2 <_malloc_r+0x22>
 8005944:	1b9b      	subs	r3, r3, r6
 8005946:	50a3      	str	r3, [r4, r2]
 8005948:	e7ab      	b.n	80058a2 <_malloc_r+0x22>
 800594a:	42a3      	cmp	r3, r4
 800594c:	6862      	ldr	r2, [r4, #4]
 800594e:	d1dd      	bne.n	800590c <_malloc_r+0x8c>
 8005950:	f8c8 2000 	str.w	r2, [r8]
 8005954:	e7ec      	b.n	8005930 <_malloc_r+0xb0>
 8005956:	4623      	mov	r3, r4
 8005958:	6864      	ldr	r4, [r4, #4]
 800595a:	e7ac      	b.n	80058b6 <_malloc_r+0x36>
 800595c:	4634      	mov	r4, r6
 800595e:	6876      	ldr	r6, [r6, #4]
 8005960:	e7b4      	b.n	80058cc <_malloc_r+0x4c>
 8005962:	4613      	mov	r3, r2
 8005964:	e7cc      	b.n	8005900 <_malloc_r+0x80>
 8005966:	230c      	movs	r3, #12
 8005968:	4638      	mov	r0, r7
 800596a:	603b      	str	r3, [r7, #0]
 800596c:	f000 f80e 	bl	800598c <__malloc_unlock>
 8005970:	e797      	b.n	80058a2 <_malloc_r+0x22>
 8005972:	6025      	str	r5, [r4, #0]
 8005974:	e7dc      	b.n	8005930 <_malloc_r+0xb0>
 8005976:	605b      	str	r3, [r3, #4]
 8005978:	deff      	udf	#255	; 0xff
 800597a:	bf00      	nop
 800597c:	2000045c 	.word	0x2000045c

08005980 <__malloc_lock>:
 8005980:	4801      	ldr	r0, [pc, #4]	; (8005988 <__malloc_lock+0x8>)
 8005982:	f7ff b888 	b.w	8004a96 <__retarget_lock_acquire_recursive>
 8005986:	bf00      	nop
 8005988:	20000458 	.word	0x20000458

0800598c <__malloc_unlock>:
 800598c:	4801      	ldr	r0, [pc, #4]	; (8005994 <__malloc_unlock+0x8>)
 800598e:	f7ff b883 	b.w	8004a98 <__retarget_lock_release_recursive>
 8005992:	bf00      	nop
 8005994:	20000458 	.word	0x20000458

08005998 <_Balloc>:
 8005998:	b570      	push	{r4, r5, r6, lr}
 800599a:	69c6      	ldr	r6, [r0, #28]
 800599c:	4604      	mov	r4, r0
 800599e:	460d      	mov	r5, r1
 80059a0:	b976      	cbnz	r6, 80059c0 <_Balloc+0x28>
 80059a2:	2010      	movs	r0, #16
 80059a4:	f7ff ff44 	bl	8005830 <malloc>
 80059a8:	4602      	mov	r2, r0
 80059aa:	61e0      	str	r0, [r4, #28]
 80059ac:	b920      	cbnz	r0, 80059b8 <_Balloc+0x20>
 80059ae:	216b      	movs	r1, #107	; 0x6b
 80059b0:	4b17      	ldr	r3, [pc, #92]	; (8005a10 <_Balloc+0x78>)
 80059b2:	4818      	ldr	r0, [pc, #96]	; (8005a14 <_Balloc+0x7c>)
 80059b4:	f001 fd7c 	bl	80074b0 <__assert_func>
 80059b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059bc:	6006      	str	r6, [r0, #0]
 80059be:	60c6      	str	r6, [r0, #12]
 80059c0:	69e6      	ldr	r6, [r4, #28]
 80059c2:	68f3      	ldr	r3, [r6, #12]
 80059c4:	b183      	cbz	r3, 80059e8 <_Balloc+0x50>
 80059c6:	69e3      	ldr	r3, [r4, #28]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80059ce:	b9b8      	cbnz	r0, 8005a00 <_Balloc+0x68>
 80059d0:	2101      	movs	r1, #1
 80059d2:	fa01 f605 	lsl.w	r6, r1, r5
 80059d6:	1d72      	adds	r2, r6, #5
 80059d8:	4620      	mov	r0, r4
 80059da:	0092      	lsls	r2, r2, #2
 80059dc:	f001 fd86 	bl	80074ec <_calloc_r>
 80059e0:	b160      	cbz	r0, 80059fc <_Balloc+0x64>
 80059e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80059e6:	e00e      	b.n	8005a06 <_Balloc+0x6e>
 80059e8:	2221      	movs	r2, #33	; 0x21
 80059ea:	2104      	movs	r1, #4
 80059ec:	4620      	mov	r0, r4
 80059ee:	f001 fd7d 	bl	80074ec <_calloc_r>
 80059f2:	69e3      	ldr	r3, [r4, #28]
 80059f4:	60f0      	str	r0, [r6, #12]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1e4      	bne.n	80059c6 <_Balloc+0x2e>
 80059fc:	2000      	movs	r0, #0
 80059fe:	bd70      	pop	{r4, r5, r6, pc}
 8005a00:	6802      	ldr	r2, [r0, #0]
 8005a02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005a06:	2300      	movs	r3, #0
 8005a08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a0c:	e7f7      	b.n	80059fe <_Balloc+0x66>
 8005a0e:	bf00      	nop
 8005a10:	08008278 	.word	0x08008278
 8005a14:	080082f8 	.word	0x080082f8

08005a18 <_Bfree>:
 8005a18:	b570      	push	{r4, r5, r6, lr}
 8005a1a:	69c6      	ldr	r6, [r0, #28]
 8005a1c:	4605      	mov	r5, r0
 8005a1e:	460c      	mov	r4, r1
 8005a20:	b976      	cbnz	r6, 8005a40 <_Bfree+0x28>
 8005a22:	2010      	movs	r0, #16
 8005a24:	f7ff ff04 	bl	8005830 <malloc>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	61e8      	str	r0, [r5, #28]
 8005a2c:	b920      	cbnz	r0, 8005a38 <_Bfree+0x20>
 8005a2e:	218f      	movs	r1, #143	; 0x8f
 8005a30:	4b08      	ldr	r3, [pc, #32]	; (8005a54 <_Bfree+0x3c>)
 8005a32:	4809      	ldr	r0, [pc, #36]	; (8005a58 <_Bfree+0x40>)
 8005a34:	f001 fd3c 	bl	80074b0 <__assert_func>
 8005a38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a3c:	6006      	str	r6, [r0, #0]
 8005a3e:	60c6      	str	r6, [r0, #12]
 8005a40:	b13c      	cbz	r4, 8005a52 <_Bfree+0x3a>
 8005a42:	69eb      	ldr	r3, [r5, #28]
 8005a44:	6862      	ldr	r2, [r4, #4]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a4c:	6021      	str	r1, [r4, #0]
 8005a4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a52:	bd70      	pop	{r4, r5, r6, pc}
 8005a54:	08008278 	.word	0x08008278
 8005a58:	080082f8 	.word	0x080082f8

08005a5c <__multadd>:
 8005a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a60:	4607      	mov	r7, r0
 8005a62:	460c      	mov	r4, r1
 8005a64:	461e      	mov	r6, r3
 8005a66:	2000      	movs	r0, #0
 8005a68:	690d      	ldr	r5, [r1, #16]
 8005a6a:	f101 0c14 	add.w	ip, r1, #20
 8005a6e:	f8dc 3000 	ldr.w	r3, [ip]
 8005a72:	3001      	adds	r0, #1
 8005a74:	b299      	uxth	r1, r3
 8005a76:	fb02 6101 	mla	r1, r2, r1, r6
 8005a7a:	0c1e      	lsrs	r6, r3, #16
 8005a7c:	0c0b      	lsrs	r3, r1, #16
 8005a7e:	fb02 3306 	mla	r3, r2, r6, r3
 8005a82:	b289      	uxth	r1, r1
 8005a84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005a88:	4285      	cmp	r5, r0
 8005a8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005a8e:	f84c 1b04 	str.w	r1, [ip], #4
 8005a92:	dcec      	bgt.n	8005a6e <__multadd+0x12>
 8005a94:	b30e      	cbz	r6, 8005ada <__multadd+0x7e>
 8005a96:	68a3      	ldr	r3, [r4, #8]
 8005a98:	42ab      	cmp	r3, r5
 8005a9a:	dc19      	bgt.n	8005ad0 <__multadd+0x74>
 8005a9c:	6861      	ldr	r1, [r4, #4]
 8005a9e:	4638      	mov	r0, r7
 8005aa0:	3101      	adds	r1, #1
 8005aa2:	f7ff ff79 	bl	8005998 <_Balloc>
 8005aa6:	4680      	mov	r8, r0
 8005aa8:	b928      	cbnz	r0, 8005ab6 <__multadd+0x5a>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	21ba      	movs	r1, #186	; 0xba
 8005aae:	4b0c      	ldr	r3, [pc, #48]	; (8005ae0 <__multadd+0x84>)
 8005ab0:	480c      	ldr	r0, [pc, #48]	; (8005ae4 <__multadd+0x88>)
 8005ab2:	f001 fcfd 	bl	80074b0 <__assert_func>
 8005ab6:	6922      	ldr	r2, [r4, #16]
 8005ab8:	f104 010c 	add.w	r1, r4, #12
 8005abc:	3202      	adds	r2, #2
 8005abe:	0092      	lsls	r2, r2, #2
 8005ac0:	300c      	adds	r0, #12
 8005ac2:	f001 fce1 	bl	8007488 <memcpy>
 8005ac6:	4621      	mov	r1, r4
 8005ac8:	4638      	mov	r0, r7
 8005aca:	f7ff ffa5 	bl	8005a18 <_Bfree>
 8005ace:	4644      	mov	r4, r8
 8005ad0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ad4:	3501      	adds	r5, #1
 8005ad6:	615e      	str	r6, [r3, #20]
 8005ad8:	6125      	str	r5, [r4, #16]
 8005ada:	4620      	mov	r0, r4
 8005adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ae0:	080082e7 	.word	0x080082e7
 8005ae4:	080082f8 	.word	0x080082f8

08005ae8 <__s2b>:
 8005ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005aec:	4615      	mov	r5, r2
 8005aee:	2209      	movs	r2, #9
 8005af0:	461f      	mov	r7, r3
 8005af2:	3308      	adds	r3, #8
 8005af4:	460c      	mov	r4, r1
 8005af6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005afa:	4606      	mov	r6, r0
 8005afc:	2201      	movs	r2, #1
 8005afe:	2100      	movs	r1, #0
 8005b00:	429a      	cmp	r2, r3
 8005b02:	db09      	blt.n	8005b18 <__s2b+0x30>
 8005b04:	4630      	mov	r0, r6
 8005b06:	f7ff ff47 	bl	8005998 <_Balloc>
 8005b0a:	b940      	cbnz	r0, 8005b1e <__s2b+0x36>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	21d3      	movs	r1, #211	; 0xd3
 8005b10:	4b18      	ldr	r3, [pc, #96]	; (8005b74 <__s2b+0x8c>)
 8005b12:	4819      	ldr	r0, [pc, #100]	; (8005b78 <__s2b+0x90>)
 8005b14:	f001 fccc 	bl	80074b0 <__assert_func>
 8005b18:	0052      	lsls	r2, r2, #1
 8005b1a:	3101      	adds	r1, #1
 8005b1c:	e7f0      	b.n	8005b00 <__s2b+0x18>
 8005b1e:	9b08      	ldr	r3, [sp, #32]
 8005b20:	2d09      	cmp	r5, #9
 8005b22:	6143      	str	r3, [r0, #20]
 8005b24:	f04f 0301 	mov.w	r3, #1
 8005b28:	6103      	str	r3, [r0, #16]
 8005b2a:	dd16      	ble.n	8005b5a <__s2b+0x72>
 8005b2c:	f104 0909 	add.w	r9, r4, #9
 8005b30:	46c8      	mov	r8, r9
 8005b32:	442c      	add	r4, r5
 8005b34:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005b38:	4601      	mov	r1, r0
 8005b3a:	220a      	movs	r2, #10
 8005b3c:	4630      	mov	r0, r6
 8005b3e:	3b30      	subs	r3, #48	; 0x30
 8005b40:	f7ff ff8c 	bl	8005a5c <__multadd>
 8005b44:	45a0      	cmp	r8, r4
 8005b46:	d1f5      	bne.n	8005b34 <__s2b+0x4c>
 8005b48:	f1a5 0408 	sub.w	r4, r5, #8
 8005b4c:	444c      	add	r4, r9
 8005b4e:	1b2d      	subs	r5, r5, r4
 8005b50:	1963      	adds	r3, r4, r5
 8005b52:	42bb      	cmp	r3, r7
 8005b54:	db04      	blt.n	8005b60 <__s2b+0x78>
 8005b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b5a:	2509      	movs	r5, #9
 8005b5c:	340a      	adds	r4, #10
 8005b5e:	e7f6      	b.n	8005b4e <__s2b+0x66>
 8005b60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005b64:	4601      	mov	r1, r0
 8005b66:	220a      	movs	r2, #10
 8005b68:	4630      	mov	r0, r6
 8005b6a:	3b30      	subs	r3, #48	; 0x30
 8005b6c:	f7ff ff76 	bl	8005a5c <__multadd>
 8005b70:	e7ee      	b.n	8005b50 <__s2b+0x68>
 8005b72:	bf00      	nop
 8005b74:	080082e7 	.word	0x080082e7
 8005b78:	080082f8 	.word	0x080082f8

08005b7c <__hi0bits>:
 8005b7c:	0c02      	lsrs	r2, r0, #16
 8005b7e:	0412      	lsls	r2, r2, #16
 8005b80:	4603      	mov	r3, r0
 8005b82:	b9ca      	cbnz	r2, 8005bb8 <__hi0bits+0x3c>
 8005b84:	0403      	lsls	r3, r0, #16
 8005b86:	2010      	movs	r0, #16
 8005b88:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005b8c:	bf04      	itt	eq
 8005b8e:	021b      	lsleq	r3, r3, #8
 8005b90:	3008      	addeq	r0, #8
 8005b92:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005b96:	bf04      	itt	eq
 8005b98:	011b      	lsleq	r3, r3, #4
 8005b9a:	3004      	addeq	r0, #4
 8005b9c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005ba0:	bf04      	itt	eq
 8005ba2:	009b      	lsleq	r3, r3, #2
 8005ba4:	3002      	addeq	r0, #2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	db05      	blt.n	8005bb6 <__hi0bits+0x3a>
 8005baa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005bae:	f100 0001 	add.w	r0, r0, #1
 8005bb2:	bf08      	it	eq
 8005bb4:	2020      	moveq	r0, #32
 8005bb6:	4770      	bx	lr
 8005bb8:	2000      	movs	r0, #0
 8005bba:	e7e5      	b.n	8005b88 <__hi0bits+0xc>

08005bbc <__lo0bits>:
 8005bbc:	6803      	ldr	r3, [r0, #0]
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	f013 0007 	ands.w	r0, r3, #7
 8005bc4:	d00b      	beq.n	8005bde <__lo0bits+0x22>
 8005bc6:	07d9      	lsls	r1, r3, #31
 8005bc8:	d421      	bmi.n	8005c0e <__lo0bits+0x52>
 8005bca:	0798      	lsls	r0, r3, #30
 8005bcc:	bf49      	itett	mi
 8005bce:	085b      	lsrmi	r3, r3, #1
 8005bd0:	089b      	lsrpl	r3, r3, #2
 8005bd2:	2001      	movmi	r0, #1
 8005bd4:	6013      	strmi	r3, [r2, #0]
 8005bd6:	bf5c      	itt	pl
 8005bd8:	2002      	movpl	r0, #2
 8005bda:	6013      	strpl	r3, [r2, #0]
 8005bdc:	4770      	bx	lr
 8005bde:	b299      	uxth	r1, r3
 8005be0:	b909      	cbnz	r1, 8005be6 <__lo0bits+0x2a>
 8005be2:	2010      	movs	r0, #16
 8005be4:	0c1b      	lsrs	r3, r3, #16
 8005be6:	b2d9      	uxtb	r1, r3
 8005be8:	b909      	cbnz	r1, 8005bee <__lo0bits+0x32>
 8005bea:	3008      	adds	r0, #8
 8005bec:	0a1b      	lsrs	r3, r3, #8
 8005bee:	0719      	lsls	r1, r3, #28
 8005bf0:	bf04      	itt	eq
 8005bf2:	091b      	lsreq	r3, r3, #4
 8005bf4:	3004      	addeq	r0, #4
 8005bf6:	0799      	lsls	r1, r3, #30
 8005bf8:	bf04      	itt	eq
 8005bfa:	089b      	lsreq	r3, r3, #2
 8005bfc:	3002      	addeq	r0, #2
 8005bfe:	07d9      	lsls	r1, r3, #31
 8005c00:	d403      	bmi.n	8005c0a <__lo0bits+0x4e>
 8005c02:	085b      	lsrs	r3, r3, #1
 8005c04:	f100 0001 	add.w	r0, r0, #1
 8005c08:	d003      	beq.n	8005c12 <__lo0bits+0x56>
 8005c0a:	6013      	str	r3, [r2, #0]
 8005c0c:	4770      	bx	lr
 8005c0e:	2000      	movs	r0, #0
 8005c10:	4770      	bx	lr
 8005c12:	2020      	movs	r0, #32
 8005c14:	4770      	bx	lr
	...

08005c18 <__i2b>:
 8005c18:	b510      	push	{r4, lr}
 8005c1a:	460c      	mov	r4, r1
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	f7ff febb 	bl	8005998 <_Balloc>
 8005c22:	4602      	mov	r2, r0
 8005c24:	b928      	cbnz	r0, 8005c32 <__i2b+0x1a>
 8005c26:	f240 1145 	movw	r1, #325	; 0x145
 8005c2a:	4b04      	ldr	r3, [pc, #16]	; (8005c3c <__i2b+0x24>)
 8005c2c:	4804      	ldr	r0, [pc, #16]	; (8005c40 <__i2b+0x28>)
 8005c2e:	f001 fc3f 	bl	80074b0 <__assert_func>
 8005c32:	2301      	movs	r3, #1
 8005c34:	6144      	str	r4, [r0, #20]
 8005c36:	6103      	str	r3, [r0, #16]
 8005c38:	bd10      	pop	{r4, pc}
 8005c3a:	bf00      	nop
 8005c3c:	080082e7 	.word	0x080082e7
 8005c40:	080082f8 	.word	0x080082f8

08005c44 <__multiply>:
 8005c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c48:	4691      	mov	r9, r2
 8005c4a:	690a      	ldr	r2, [r1, #16]
 8005c4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005c50:	460c      	mov	r4, r1
 8005c52:	429a      	cmp	r2, r3
 8005c54:	bfbe      	ittt	lt
 8005c56:	460b      	movlt	r3, r1
 8005c58:	464c      	movlt	r4, r9
 8005c5a:	4699      	movlt	r9, r3
 8005c5c:	6927      	ldr	r7, [r4, #16]
 8005c5e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005c62:	68a3      	ldr	r3, [r4, #8]
 8005c64:	6861      	ldr	r1, [r4, #4]
 8005c66:	eb07 060a 	add.w	r6, r7, sl
 8005c6a:	42b3      	cmp	r3, r6
 8005c6c:	b085      	sub	sp, #20
 8005c6e:	bfb8      	it	lt
 8005c70:	3101      	addlt	r1, #1
 8005c72:	f7ff fe91 	bl	8005998 <_Balloc>
 8005c76:	b930      	cbnz	r0, 8005c86 <__multiply+0x42>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005c7e:	4b43      	ldr	r3, [pc, #268]	; (8005d8c <__multiply+0x148>)
 8005c80:	4843      	ldr	r0, [pc, #268]	; (8005d90 <__multiply+0x14c>)
 8005c82:	f001 fc15 	bl	80074b0 <__assert_func>
 8005c86:	f100 0514 	add.w	r5, r0, #20
 8005c8a:	462b      	mov	r3, r5
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005c92:	4543      	cmp	r3, r8
 8005c94:	d321      	bcc.n	8005cda <__multiply+0x96>
 8005c96:	f104 0314 	add.w	r3, r4, #20
 8005c9a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005c9e:	f109 0314 	add.w	r3, r9, #20
 8005ca2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005ca6:	9202      	str	r2, [sp, #8]
 8005ca8:	1b3a      	subs	r2, r7, r4
 8005caa:	3a15      	subs	r2, #21
 8005cac:	f022 0203 	bic.w	r2, r2, #3
 8005cb0:	3204      	adds	r2, #4
 8005cb2:	f104 0115 	add.w	r1, r4, #21
 8005cb6:	428f      	cmp	r7, r1
 8005cb8:	bf38      	it	cc
 8005cba:	2204      	movcc	r2, #4
 8005cbc:	9201      	str	r2, [sp, #4]
 8005cbe:	9a02      	ldr	r2, [sp, #8]
 8005cc0:	9303      	str	r3, [sp, #12]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d80c      	bhi.n	8005ce0 <__multiply+0x9c>
 8005cc6:	2e00      	cmp	r6, #0
 8005cc8:	dd03      	ble.n	8005cd2 <__multiply+0x8e>
 8005cca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d05a      	beq.n	8005d88 <__multiply+0x144>
 8005cd2:	6106      	str	r6, [r0, #16]
 8005cd4:	b005      	add	sp, #20
 8005cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cda:	f843 2b04 	str.w	r2, [r3], #4
 8005cde:	e7d8      	b.n	8005c92 <__multiply+0x4e>
 8005ce0:	f8b3 a000 	ldrh.w	sl, [r3]
 8005ce4:	f1ba 0f00 	cmp.w	sl, #0
 8005ce8:	d023      	beq.n	8005d32 <__multiply+0xee>
 8005cea:	46a9      	mov	r9, r5
 8005cec:	f04f 0c00 	mov.w	ip, #0
 8005cf0:	f104 0e14 	add.w	lr, r4, #20
 8005cf4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005cf8:	f8d9 1000 	ldr.w	r1, [r9]
 8005cfc:	fa1f fb82 	uxth.w	fp, r2
 8005d00:	b289      	uxth	r1, r1
 8005d02:	fb0a 110b 	mla	r1, sl, fp, r1
 8005d06:	4461      	add	r1, ip
 8005d08:	f8d9 c000 	ldr.w	ip, [r9]
 8005d0c:	0c12      	lsrs	r2, r2, #16
 8005d0e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005d12:	fb0a c202 	mla	r2, sl, r2, ip
 8005d16:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005d1a:	b289      	uxth	r1, r1
 8005d1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005d20:	4577      	cmp	r7, lr
 8005d22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005d26:	f849 1b04 	str.w	r1, [r9], #4
 8005d2a:	d8e3      	bhi.n	8005cf4 <__multiply+0xb0>
 8005d2c:	9a01      	ldr	r2, [sp, #4]
 8005d2e:	f845 c002 	str.w	ip, [r5, r2]
 8005d32:	9a03      	ldr	r2, [sp, #12]
 8005d34:	3304      	adds	r3, #4
 8005d36:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005d3a:	f1b9 0f00 	cmp.w	r9, #0
 8005d3e:	d021      	beq.n	8005d84 <__multiply+0x140>
 8005d40:	46ae      	mov	lr, r5
 8005d42:	f04f 0a00 	mov.w	sl, #0
 8005d46:	6829      	ldr	r1, [r5, #0]
 8005d48:	f104 0c14 	add.w	ip, r4, #20
 8005d4c:	f8bc b000 	ldrh.w	fp, [ip]
 8005d50:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005d54:	b289      	uxth	r1, r1
 8005d56:	fb09 220b 	mla	r2, r9, fp, r2
 8005d5a:	4452      	add	r2, sl
 8005d5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005d60:	f84e 1b04 	str.w	r1, [lr], #4
 8005d64:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005d68:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005d6c:	f8be 1000 	ldrh.w	r1, [lr]
 8005d70:	4567      	cmp	r7, ip
 8005d72:	fb09 110a 	mla	r1, r9, sl, r1
 8005d76:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005d7a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005d7e:	d8e5      	bhi.n	8005d4c <__multiply+0x108>
 8005d80:	9a01      	ldr	r2, [sp, #4]
 8005d82:	50a9      	str	r1, [r5, r2]
 8005d84:	3504      	adds	r5, #4
 8005d86:	e79a      	b.n	8005cbe <__multiply+0x7a>
 8005d88:	3e01      	subs	r6, #1
 8005d8a:	e79c      	b.n	8005cc6 <__multiply+0x82>
 8005d8c:	080082e7 	.word	0x080082e7
 8005d90:	080082f8 	.word	0x080082f8

08005d94 <__pow5mult>:
 8005d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d98:	4615      	mov	r5, r2
 8005d9a:	f012 0203 	ands.w	r2, r2, #3
 8005d9e:	4606      	mov	r6, r0
 8005da0:	460f      	mov	r7, r1
 8005da2:	d007      	beq.n	8005db4 <__pow5mult+0x20>
 8005da4:	4c25      	ldr	r4, [pc, #148]	; (8005e3c <__pow5mult+0xa8>)
 8005da6:	3a01      	subs	r2, #1
 8005da8:	2300      	movs	r3, #0
 8005daa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005dae:	f7ff fe55 	bl	8005a5c <__multadd>
 8005db2:	4607      	mov	r7, r0
 8005db4:	10ad      	asrs	r5, r5, #2
 8005db6:	d03d      	beq.n	8005e34 <__pow5mult+0xa0>
 8005db8:	69f4      	ldr	r4, [r6, #28]
 8005dba:	b97c      	cbnz	r4, 8005ddc <__pow5mult+0x48>
 8005dbc:	2010      	movs	r0, #16
 8005dbe:	f7ff fd37 	bl	8005830 <malloc>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	61f0      	str	r0, [r6, #28]
 8005dc6:	b928      	cbnz	r0, 8005dd4 <__pow5mult+0x40>
 8005dc8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005dcc:	4b1c      	ldr	r3, [pc, #112]	; (8005e40 <__pow5mult+0xac>)
 8005dce:	481d      	ldr	r0, [pc, #116]	; (8005e44 <__pow5mult+0xb0>)
 8005dd0:	f001 fb6e 	bl	80074b0 <__assert_func>
 8005dd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005dd8:	6004      	str	r4, [r0, #0]
 8005dda:	60c4      	str	r4, [r0, #12]
 8005ddc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005de0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005de4:	b94c      	cbnz	r4, 8005dfa <__pow5mult+0x66>
 8005de6:	f240 2171 	movw	r1, #625	; 0x271
 8005dea:	4630      	mov	r0, r6
 8005dec:	f7ff ff14 	bl	8005c18 <__i2b>
 8005df0:	2300      	movs	r3, #0
 8005df2:	4604      	mov	r4, r0
 8005df4:	f8c8 0008 	str.w	r0, [r8, #8]
 8005df8:	6003      	str	r3, [r0, #0]
 8005dfa:	f04f 0900 	mov.w	r9, #0
 8005dfe:	07eb      	lsls	r3, r5, #31
 8005e00:	d50a      	bpl.n	8005e18 <__pow5mult+0x84>
 8005e02:	4639      	mov	r1, r7
 8005e04:	4622      	mov	r2, r4
 8005e06:	4630      	mov	r0, r6
 8005e08:	f7ff ff1c 	bl	8005c44 <__multiply>
 8005e0c:	4680      	mov	r8, r0
 8005e0e:	4639      	mov	r1, r7
 8005e10:	4630      	mov	r0, r6
 8005e12:	f7ff fe01 	bl	8005a18 <_Bfree>
 8005e16:	4647      	mov	r7, r8
 8005e18:	106d      	asrs	r5, r5, #1
 8005e1a:	d00b      	beq.n	8005e34 <__pow5mult+0xa0>
 8005e1c:	6820      	ldr	r0, [r4, #0]
 8005e1e:	b938      	cbnz	r0, 8005e30 <__pow5mult+0x9c>
 8005e20:	4622      	mov	r2, r4
 8005e22:	4621      	mov	r1, r4
 8005e24:	4630      	mov	r0, r6
 8005e26:	f7ff ff0d 	bl	8005c44 <__multiply>
 8005e2a:	6020      	str	r0, [r4, #0]
 8005e2c:	f8c0 9000 	str.w	r9, [r0]
 8005e30:	4604      	mov	r4, r0
 8005e32:	e7e4      	b.n	8005dfe <__pow5mult+0x6a>
 8005e34:	4638      	mov	r0, r7
 8005e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e3a:	bf00      	nop
 8005e3c:	08008448 	.word	0x08008448
 8005e40:	08008278 	.word	0x08008278
 8005e44:	080082f8 	.word	0x080082f8

08005e48 <__lshift>:
 8005e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e4c:	460c      	mov	r4, r1
 8005e4e:	4607      	mov	r7, r0
 8005e50:	4691      	mov	r9, r2
 8005e52:	6923      	ldr	r3, [r4, #16]
 8005e54:	6849      	ldr	r1, [r1, #4]
 8005e56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e5a:	68a3      	ldr	r3, [r4, #8]
 8005e5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e60:	f108 0601 	add.w	r6, r8, #1
 8005e64:	42b3      	cmp	r3, r6
 8005e66:	db0b      	blt.n	8005e80 <__lshift+0x38>
 8005e68:	4638      	mov	r0, r7
 8005e6a:	f7ff fd95 	bl	8005998 <_Balloc>
 8005e6e:	4605      	mov	r5, r0
 8005e70:	b948      	cbnz	r0, 8005e86 <__lshift+0x3e>
 8005e72:	4602      	mov	r2, r0
 8005e74:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005e78:	4b27      	ldr	r3, [pc, #156]	; (8005f18 <__lshift+0xd0>)
 8005e7a:	4828      	ldr	r0, [pc, #160]	; (8005f1c <__lshift+0xd4>)
 8005e7c:	f001 fb18 	bl	80074b0 <__assert_func>
 8005e80:	3101      	adds	r1, #1
 8005e82:	005b      	lsls	r3, r3, #1
 8005e84:	e7ee      	b.n	8005e64 <__lshift+0x1c>
 8005e86:	2300      	movs	r3, #0
 8005e88:	f100 0114 	add.w	r1, r0, #20
 8005e8c:	f100 0210 	add.w	r2, r0, #16
 8005e90:	4618      	mov	r0, r3
 8005e92:	4553      	cmp	r3, sl
 8005e94:	db33      	blt.n	8005efe <__lshift+0xb6>
 8005e96:	6920      	ldr	r0, [r4, #16]
 8005e98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e9c:	f104 0314 	add.w	r3, r4, #20
 8005ea0:	f019 091f 	ands.w	r9, r9, #31
 8005ea4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005ea8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005eac:	d02b      	beq.n	8005f06 <__lshift+0xbe>
 8005eae:	468a      	mov	sl, r1
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f1c9 0e20 	rsb	lr, r9, #32
 8005eb6:	6818      	ldr	r0, [r3, #0]
 8005eb8:	fa00 f009 	lsl.w	r0, r0, r9
 8005ebc:	4310      	orrs	r0, r2
 8005ebe:	f84a 0b04 	str.w	r0, [sl], #4
 8005ec2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ec6:	459c      	cmp	ip, r3
 8005ec8:	fa22 f20e 	lsr.w	r2, r2, lr
 8005ecc:	d8f3      	bhi.n	8005eb6 <__lshift+0x6e>
 8005ece:	ebac 0304 	sub.w	r3, ip, r4
 8005ed2:	3b15      	subs	r3, #21
 8005ed4:	f023 0303 	bic.w	r3, r3, #3
 8005ed8:	3304      	adds	r3, #4
 8005eda:	f104 0015 	add.w	r0, r4, #21
 8005ede:	4584      	cmp	ip, r0
 8005ee0:	bf38      	it	cc
 8005ee2:	2304      	movcc	r3, #4
 8005ee4:	50ca      	str	r2, [r1, r3]
 8005ee6:	b10a      	cbz	r2, 8005eec <__lshift+0xa4>
 8005ee8:	f108 0602 	add.w	r6, r8, #2
 8005eec:	3e01      	subs	r6, #1
 8005eee:	4638      	mov	r0, r7
 8005ef0:	4621      	mov	r1, r4
 8005ef2:	612e      	str	r6, [r5, #16]
 8005ef4:	f7ff fd90 	bl	8005a18 <_Bfree>
 8005ef8:	4628      	mov	r0, r5
 8005efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005efe:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f02:	3301      	adds	r3, #1
 8005f04:	e7c5      	b.n	8005e92 <__lshift+0x4a>
 8005f06:	3904      	subs	r1, #4
 8005f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f0c:	459c      	cmp	ip, r3
 8005f0e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f12:	d8f9      	bhi.n	8005f08 <__lshift+0xc0>
 8005f14:	e7ea      	b.n	8005eec <__lshift+0xa4>
 8005f16:	bf00      	nop
 8005f18:	080082e7 	.word	0x080082e7
 8005f1c:	080082f8 	.word	0x080082f8

08005f20 <__mcmp>:
 8005f20:	4603      	mov	r3, r0
 8005f22:	690a      	ldr	r2, [r1, #16]
 8005f24:	6900      	ldr	r0, [r0, #16]
 8005f26:	b530      	push	{r4, r5, lr}
 8005f28:	1a80      	subs	r0, r0, r2
 8005f2a:	d10d      	bne.n	8005f48 <__mcmp+0x28>
 8005f2c:	3314      	adds	r3, #20
 8005f2e:	3114      	adds	r1, #20
 8005f30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005f34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005f38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005f3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005f40:	4295      	cmp	r5, r2
 8005f42:	d002      	beq.n	8005f4a <__mcmp+0x2a>
 8005f44:	d304      	bcc.n	8005f50 <__mcmp+0x30>
 8005f46:	2001      	movs	r0, #1
 8005f48:	bd30      	pop	{r4, r5, pc}
 8005f4a:	42a3      	cmp	r3, r4
 8005f4c:	d3f4      	bcc.n	8005f38 <__mcmp+0x18>
 8005f4e:	e7fb      	b.n	8005f48 <__mcmp+0x28>
 8005f50:	f04f 30ff 	mov.w	r0, #4294967295
 8005f54:	e7f8      	b.n	8005f48 <__mcmp+0x28>
	...

08005f58 <__mdiff>:
 8005f58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f5c:	460d      	mov	r5, r1
 8005f5e:	4607      	mov	r7, r0
 8005f60:	4611      	mov	r1, r2
 8005f62:	4628      	mov	r0, r5
 8005f64:	4614      	mov	r4, r2
 8005f66:	f7ff ffdb 	bl	8005f20 <__mcmp>
 8005f6a:	1e06      	subs	r6, r0, #0
 8005f6c:	d111      	bne.n	8005f92 <__mdiff+0x3a>
 8005f6e:	4631      	mov	r1, r6
 8005f70:	4638      	mov	r0, r7
 8005f72:	f7ff fd11 	bl	8005998 <_Balloc>
 8005f76:	4602      	mov	r2, r0
 8005f78:	b928      	cbnz	r0, 8005f86 <__mdiff+0x2e>
 8005f7a:	f240 2137 	movw	r1, #567	; 0x237
 8005f7e:	4b3a      	ldr	r3, [pc, #232]	; (8006068 <__mdiff+0x110>)
 8005f80:	483a      	ldr	r0, [pc, #232]	; (800606c <__mdiff+0x114>)
 8005f82:	f001 fa95 	bl	80074b0 <__assert_func>
 8005f86:	2301      	movs	r3, #1
 8005f88:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f92:	bfa4      	itt	ge
 8005f94:	4623      	movge	r3, r4
 8005f96:	462c      	movge	r4, r5
 8005f98:	4638      	mov	r0, r7
 8005f9a:	6861      	ldr	r1, [r4, #4]
 8005f9c:	bfa6      	itte	ge
 8005f9e:	461d      	movge	r5, r3
 8005fa0:	2600      	movge	r6, #0
 8005fa2:	2601      	movlt	r6, #1
 8005fa4:	f7ff fcf8 	bl	8005998 <_Balloc>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	b918      	cbnz	r0, 8005fb4 <__mdiff+0x5c>
 8005fac:	f240 2145 	movw	r1, #581	; 0x245
 8005fb0:	4b2d      	ldr	r3, [pc, #180]	; (8006068 <__mdiff+0x110>)
 8005fb2:	e7e5      	b.n	8005f80 <__mdiff+0x28>
 8005fb4:	f102 0814 	add.w	r8, r2, #20
 8005fb8:	46c2      	mov	sl, r8
 8005fba:	f04f 0c00 	mov.w	ip, #0
 8005fbe:	6927      	ldr	r7, [r4, #16]
 8005fc0:	60c6      	str	r6, [r0, #12]
 8005fc2:	692e      	ldr	r6, [r5, #16]
 8005fc4:	f104 0014 	add.w	r0, r4, #20
 8005fc8:	f105 0914 	add.w	r9, r5, #20
 8005fcc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005fd0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005fd4:	3410      	adds	r4, #16
 8005fd6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005fda:	f859 3b04 	ldr.w	r3, [r9], #4
 8005fde:	fa1f f18b 	uxth.w	r1, fp
 8005fe2:	4461      	add	r1, ip
 8005fe4:	fa1f fc83 	uxth.w	ip, r3
 8005fe8:	0c1b      	lsrs	r3, r3, #16
 8005fea:	eba1 010c 	sub.w	r1, r1, ip
 8005fee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005ff2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005ff6:	b289      	uxth	r1, r1
 8005ff8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005ffc:	454e      	cmp	r6, r9
 8005ffe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006002:	f84a 1b04 	str.w	r1, [sl], #4
 8006006:	d8e6      	bhi.n	8005fd6 <__mdiff+0x7e>
 8006008:	1b73      	subs	r3, r6, r5
 800600a:	3b15      	subs	r3, #21
 800600c:	f023 0303 	bic.w	r3, r3, #3
 8006010:	3515      	adds	r5, #21
 8006012:	3304      	adds	r3, #4
 8006014:	42ae      	cmp	r6, r5
 8006016:	bf38      	it	cc
 8006018:	2304      	movcc	r3, #4
 800601a:	4418      	add	r0, r3
 800601c:	4443      	add	r3, r8
 800601e:	461e      	mov	r6, r3
 8006020:	4605      	mov	r5, r0
 8006022:	4575      	cmp	r5, lr
 8006024:	d30e      	bcc.n	8006044 <__mdiff+0xec>
 8006026:	f10e 0103 	add.w	r1, lr, #3
 800602a:	1a09      	subs	r1, r1, r0
 800602c:	f021 0103 	bic.w	r1, r1, #3
 8006030:	3803      	subs	r0, #3
 8006032:	4586      	cmp	lr, r0
 8006034:	bf38      	it	cc
 8006036:	2100      	movcc	r1, #0
 8006038:	440b      	add	r3, r1
 800603a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800603e:	b189      	cbz	r1, 8006064 <__mdiff+0x10c>
 8006040:	6117      	str	r7, [r2, #16]
 8006042:	e7a3      	b.n	8005f8c <__mdiff+0x34>
 8006044:	f855 8b04 	ldr.w	r8, [r5], #4
 8006048:	fa1f f188 	uxth.w	r1, r8
 800604c:	4461      	add	r1, ip
 800604e:	140c      	asrs	r4, r1, #16
 8006050:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006054:	b289      	uxth	r1, r1
 8006056:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800605a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800605e:	f846 1b04 	str.w	r1, [r6], #4
 8006062:	e7de      	b.n	8006022 <__mdiff+0xca>
 8006064:	3f01      	subs	r7, #1
 8006066:	e7e8      	b.n	800603a <__mdiff+0xe2>
 8006068:	080082e7 	.word	0x080082e7
 800606c:	080082f8 	.word	0x080082f8

08006070 <__ulp>:
 8006070:	4b0e      	ldr	r3, [pc, #56]	; (80060ac <__ulp+0x3c>)
 8006072:	400b      	ands	r3, r1
 8006074:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006078:	2b00      	cmp	r3, #0
 800607a:	dc08      	bgt.n	800608e <__ulp+0x1e>
 800607c:	425b      	negs	r3, r3
 800607e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006082:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006086:	da04      	bge.n	8006092 <__ulp+0x22>
 8006088:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800608c:	4113      	asrs	r3, r2
 800608e:	2200      	movs	r2, #0
 8006090:	e008      	b.n	80060a4 <__ulp+0x34>
 8006092:	f1a2 0314 	sub.w	r3, r2, #20
 8006096:	2b1e      	cmp	r3, #30
 8006098:	bfd6      	itet	le
 800609a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800609e:	2201      	movgt	r2, #1
 80060a0:	40da      	lsrle	r2, r3
 80060a2:	2300      	movs	r3, #0
 80060a4:	4619      	mov	r1, r3
 80060a6:	4610      	mov	r0, r2
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	7ff00000 	.word	0x7ff00000

080060b0 <__b2d>:
 80060b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b2:	6905      	ldr	r5, [r0, #16]
 80060b4:	f100 0714 	add.w	r7, r0, #20
 80060b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80060bc:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80060c0:	1f2e      	subs	r6, r5, #4
 80060c2:	4620      	mov	r0, r4
 80060c4:	f7ff fd5a 	bl	8005b7c <__hi0bits>
 80060c8:	f1c0 0220 	rsb	r2, r0, #32
 80060cc:	280a      	cmp	r0, #10
 80060ce:	4603      	mov	r3, r0
 80060d0:	f8df c068 	ldr.w	ip, [pc, #104]	; 800613c <__b2d+0x8c>
 80060d4:	600a      	str	r2, [r1, #0]
 80060d6:	dc12      	bgt.n	80060fe <__b2d+0x4e>
 80060d8:	f1c0 0e0b 	rsb	lr, r0, #11
 80060dc:	fa24 f20e 	lsr.w	r2, r4, lr
 80060e0:	42b7      	cmp	r7, r6
 80060e2:	ea42 010c 	orr.w	r1, r2, ip
 80060e6:	bf2c      	ite	cs
 80060e8:	2200      	movcs	r2, #0
 80060ea:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80060ee:	3315      	adds	r3, #21
 80060f0:	fa04 f303 	lsl.w	r3, r4, r3
 80060f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80060f8:	431a      	orrs	r2, r3
 80060fa:	4610      	mov	r0, r2
 80060fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060fe:	42b7      	cmp	r7, r6
 8006100:	bf2e      	itee	cs
 8006102:	2200      	movcs	r2, #0
 8006104:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006108:	f1a5 0608 	subcc.w	r6, r5, #8
 800610c:	3b0b      	subs	r3, #11
 800610e:	d012      	beq.n	8006136 <__b2d+0x86>
 8006110:	f1c3 0520 	rsb	r5, r3, #32
 8006114:	fa22 f105 	lsr.w	r1, r2, r5
 8006118:	409c      	lsls	r4, r3
 800611a:	430c      	orrs	r4, r1
 800611c:	42be      	cmp	r6, r7
 800611e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8006122:	bf94      	ite	ls
 8006124:	2400      	movls	r4, #0
 8006126:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800612a:	409a      	lsls	r2, r3
 800612c:	40ec      	lsrs	r4, r5
 800612e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006132:	4322      	orrs	r2, r4
 8006134:	e7e1      	b.n	80060fa <__b2d+0x4a>
 8006136:	ea44 010c 	orr.w	r1, r4, ip
 800613a:	e7de      	b.n	80060fa <__b2d+0x4a>
 800613c:	3ff00000 	.word	0x3ff00000

08006140 <__d2b>:
 8006140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006142:	2101      	movs	r1, #1
 8006144:	4617      	mov	r7, r2
 8006146:	461c      	mov	r4, r3
 8006148:	9e08      	ldr	r6, [sp, #32]
 800614a:	f7ff fc25 	bl	8005998 <_Balloc>
 800614e:	4605      	mov	r5, r0
 8006150:	b930      	cbnz	r0, 8006160 <__d2b+0x20>
 8006152:	4602      	mov	r2, r0
 8006154:	f240 310f 	movw	r1, #783	; 0x30f
 8006158:	4b22      	ldr	r3, [pc, #136]	; (80061e4 <__d2b+0xa4>)
 800615a:	4823      	ldr	r0, [pc, #140]	; (80061e8 <__d2b+0xa8>)
 800615c:	f001 f9a8 	bl	80074b0 <__assert_func>
 8006160:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006164:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006168:	bb24      	cbnz	r4, 80061b4 <__d2b+0x74>
 800616a:	2f00      	cmp	r7, #0
 800616c:	9301      	str	r3, [sp, #4]
 800616e:	d026      	beq.n	80061be <__d2b+0x7e>
 8006170:	4668      	mov	r0, sp
 8006172:	9700      	str	r7, [sp, #0]
 8006174:	f7ff fd22 	bl	8005bbc <__lo0bits>
 8006178:	e9dd 1200 	ldrd	r1, r2, [sp]
 800617c:	b1e8      	cbz	r0, 80061ba <__d2b+0x7a>
 800617e:	f1c0 0320 	rsb	r3, r0, #32
 8006182:	fa02 f303 	lsl.w	r3, r2, r3
 8006186:	430b      	orrs	r3, r1
 8006188:	40c2      	lsrs	r2, r0
 800618a:	616b      	str	r3, [r5, #20]
 800618c:	9201      	str	r2, [sp, #4]
 800618e:	9b01      	ldr	r3, [sp, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	bf14      	ite	ne
 8006194:	2102      	movne	r1, #2
 8006196:	2101      	moveq	r1, #1
 8006198:	61ab      	str	r3, [r5, #24]
 800619a:	6129      	str	r1, [r5, #16]
 800619c:	b1bc      	cbz	r4, 80061ce <__d2b+0x8e>
 800619e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80061a2:	4404      	add	r4, r0
 80061a4:	6034      	str	r4, [r6, #0]
 80061a6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80061aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ac:	6018      	str	r0, [r3, #0]
 80061ae:	4628      	mov	r0, r5
 80061b0:	b003      	add	sp, #12
 80061b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061b8:	e7d7      	b.n	800616a <__d2b+0x2a>
 80061ba:	6169      	str	r1, [r5, #20]
 80061bc:	e7e7      	b.n	800618e <__d2b+0x4e>
 80061be:	a801      	add	r0, sp, #4
 80061c0:	f7ff fcfc 	bl	8005bbc <__lo0bits>
 80061c4:	9b01      	ldr	r3, [sp, #4]
 80061c6:	2101      	movs	r1, #1
 80061c8:	616b      	str	r3, [r5, #20]
 80061ca:	3020      	adds	r0, #32
 80061cc:	e7e5      	b.n	800619a <__d2b+0x5a>
 80061ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80061d2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80061d6:	6030      	str	r0, [r6, #0]
 80061d8:	6918      	ldr	r0, [r3, #16]
 80061da:	f7ff fccf 	bl	8005b7c <__hi0bits>
 80061de:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80061e2:	e7e2      	b.n	80061aa <__d2b+0x6a>
 80061e4:	080082e7 	.word	0x080082e7
 80061e8:	080082f8 	.word	0x080082f8

080061ec <__ratio>:
 80061ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f0:	4688      	mov	r8, r1
 80061f2:	4669      	mov	r1, sp
 80061f4:	4681      	mov	r9, r0
 80061f6:	f7ff ff5b 	bl	80060b0 <__b2d>
 80061fa:	460f      	mov	r7, r1
 80061fc:	4604      	mov	r4, r0
 80061fe:	460d      	mov	r5, r1
 8006200:	4640      	mov	r0, r8
 8006202:	a901      	add	r1, sp, #4
 8006204:	f7ff ff54 	bl	80060b0 <__b2d>
 8006208:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800620c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006210:	468b      	mov	fp, r1
 8006212:	eba3 0c02 	sub.w	ip, r3, r2
 8006216:	e9dd 3200 	ldrd	r3, r2, [sp]
 800621a:	1a9b      	subs	r3, r3, r2
 800621c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006220:	2b00      	cmp	r3, #0
 8006222:	bfd5      	itete	le
 8006224:	460a      	movle	r2, r1
 8006226:	462a      	movgt	r2, r5
 8006228:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800622c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006230:	bfd8      	it	le
 8006232:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006236:	465b      	mov	r3, fp
 8006238:	4602      	mov	r2, r0
 800623a:	4639      	mov	r1, r7
 800623c:	4620      	mov	r0, r4
 800623e:	f7fa fa75 	bl	800072c <__aeabi_ddiv>
 8006242:	b003      	add	sp, #12
 8006244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006248 <__copybits>:
 8006248:	3901      	subs	r1, #1
 800624a:	b570      	push	{r4, r5, r6, lr}
 800624c:	1149      	asrs	r1, r1, #5
 800624e:	6914      	ldr	r4, [r2, #16]
 8006250:	3101      	adds	r1, #1
 8006252:	f102 0314 	add.w	r3, r2, #20
 8006256:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800625a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800625e:	1f05      	subs	r5, r0, #4
 8006260:	42a3      	cmp	r3, r4
 8006262:	d30c      	bcc.n	800627e <__copybits+0x36>
 8006264:	1aa3      	subs	r3, r4, r2
 8006266:	3b11      	subs	r3, #17
 8006268:	f023 0303 	bic.w	r3, r3, #3
 800626c:	3211      	adds	r2, #17
 800626e:	42a2      	cmp	r2, r4
 8006270:	bf88      	it	hi
 8006272:	2300      	movhi	r3, #0
 8006274:	4418      	add	r0, r3
 8006276:	2300      	movs	r3, #0
 8006278:	4288      	cmp	r0, r1
 800627a:	d305      	bcc.n	8006288 <__copybits+0x40>
 800627c:	bd70      	pop	{r4, r5, r6, pc}
 800627e:	f853 6b04 	ldr.w	r6, [r3], #4
 8006282:	f845 6f04 	str.w	r6, [r5, #4]!
 8006286:	e7eb      	b.n	8006260 <__copybits+0x18>
 8006288:	f840 3b04 	str.w	r3, [r0], #4
 800628c:	e7f4      	b.n	8006278 <__copybits+0x30>

0800628e <__any_on>:
 800628e:	f100 0214 	add.w	r2, r0, #20
 8006292:	6900      	ldr	r0, [r0, #16]
 8006294:	114b      	asrs	r3, r1, #5
 8006296:	4298      	cmp	r0, r3
 8006298:	b510      	push	{r4, lr}
 800629a:	db11      	blt.n	80062c0 <__any_on+0x32>
 800629c:	dd0a      	ble.n	80062b4 <__any_on+0x26>
 800629e:	f011 011f 	ands.w	r1, r1, #31
 80062a2:	d007      	beq.n	80062b4 <__any_on+0x26>
 80062a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80062a8:	fa24 f001 	lsr.w	r0, r4, r1
 80062ac:	fa00 f101 	lsl.w	r1, r0, r1
 80062b0:	428c      	cmp	r4, r1
 80062b2:	d10b      	bne.n	80062cc <__any_on+0x3e>
 80062b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d803      	bhi.n	80062c4 <__any_on+0x36>
 80062bc:	2000      	movs	r0, #0
 80062be:	bd10      	pop	{r4, pc}
 80062c0:	4603      	mov	r3, r0
 80062c2:	e7f7      	b.n	80062b4 <__any_on+0x26>
 80062c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80062c8:	2900      	cmp	r1, #0
 80062ca:	d0f5      	beq.n	80062b8 <__any_on+0x2a>
 80062cc:	2001      	movs	r0, #1
 80062ce:	e7f6      	b.n	80062be <__any_on+0x30>

080062d0 <sulp>:
 80062d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062d4:	460f      	mov	r7, r1
 80062d6:	4690      	mov	r8, r2
 80062d8:	f7ff feca 	bl	8006070 <__ulp>
 80062dc:	4604      	mov	r4, r0
 80062de:	460d      	mov	r5, r1
 80062e0:	f1b8 0f00 	cmp.w	r8, #0
 80062e4:	d011      	beq.n	800630a <sulp+0x3a>
 80062e6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80062ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	dd0b      	ble.n	800630a <sulp+0x3a>
 80062f2:	2400      	movs	r4, #0
 80062f4:	051b      	lsls	r3, r3, #20
 80062f6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80062fa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80062fe:	4622      	mov	r2, r4
 8006300:	462b      	mov	r3, r5
 8006302:	f7fa f8e9 	bl	80004d8 <__aeabi_dmul>
 8006306:	4604      	mov	r4, r0
 8006308:	460d      	mov	r5, r1
 800630a:	4620      	mov	r0, r4
 800630c:	4629      	mov	r1, r5
 800630e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006312:	0000      	movs	r0, r0
 8006314:	0000      	movs	r0, r0
	...

08006318 <_strtod_l>:
 8006318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800631c:	b09f      	sub	sp, #124	; 0x7c
 800631e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006320:	2200      	movs	r2, #0
 8006322:	4604      	mov	r4, r0
 8006324:	921a      	str	r2, [sp, #104]	; 0x68
 8006326:	460d      	mov	r5, r1
 8006328:	f04f 0800 	mov.w	r8, #0
 800632c:	f04f 0900 	mov.w	r9, #0
 8006330:	460a      	mov	r2, r1
 8006332:	9219      	str	r2, [sp, #100]	; 0x64
 8006334:	7811      	ldrb	r1, [r2, #0]
 8006336:	292b      	cmp	r1, #43	; 0x2b
 8006338:	d04a      	beq.n	80063d0 <_strtod_l+0xb8>
 800633a:	d838      	bhi.n	80063ae <_strtod_l+0x96>
 800633c:	290d      	cmp	r1, #13
 800633e:	d832      	bhi.n	80063a6 <_strtod_l+0x8e>
 8006340:	2908      	cmp	r1, #8
 8006342:	d832      	bhi.n	80063aa <_strtod_l+0x92>
 8006344:	2900      	cmp	r1, #0
 8006346:	d03b      	beq.n	80063c0 <_strtod_l+0xa8>
 8006348:	2200      	movs	r2, #0
 800634a:	920e      	str	r2, [sp, #56]	; 0x38
 800634c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800634e:	7832      	ldrb	r2, [r6, #0]
 8006350:	2a30      	cmp	r2, #48	; 0x30
 8006352:	f040 80b2 	bne.w	80064ba <_strtod_l+0x1a2>
 8006356:	7872      	ldrb	r2, [r6, #1]
 8006358:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800635c:	2a58      	cmp	r2, #88	; 0x58
 800635e:	d16e      	bne.n	800643e <_strtod_l+0x126>
 8006360:	9302      	str	r3, [sp, #8]
 8006362:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006364:	4620      	mov	r0, r4
 8006366:	9301      	str	r3, [sp, #4]
 8006368:	ab1a      	add	r3, sp, #104	; 0x68
 800636a:	9300      	str	r3, [sp, #0]
 800636c:	4a8c      	ldr	r2, [pc, #560]	; (80065a0 <_strtod_l+0x288>)
 800636e:	ab1b      	add	r3, sp, #108	; 0x6c
 8006370:	a919      	add	r1, sp, #100	; 0x64
 8006372:	f001 f937 	bl	80075e4 <__gethex>
 8006376:	f010 070f 	ands.w	r7, r0, #15
 800637a:	4605      	mov	r5, r0
 800637c:	d005      	beq.n	800638a <_strtod_l+0x72>
 800637e:	2f06      	cmp	r7, #6
 8006380:	d128      	bne.n	80063d4 <_strtod_l+0xbc>
 8006382:	2300      	movs	r3, #0
 8006384:	3601      	adds	r6, #1
 8006386:	9619      	str	r6, [sp, #100]	; 0x64
 8006388:	930e      	str	r3, [sp, #56]	; 0x38
 800638a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800638c:	2b00      	cmp	r3, #0
 800638e:	f040 85a0 	bne.w	8006ed2 <_strtod_l+0xbba>
 8006392:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006394:	b1cb      	cbz	r3, 80063ca <_strtod_l+0xb2>
 8006396:	4642      	mov	r2, r8
 8006398:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800639c:	4610      	mov	r0, r2
 800639e:	4619      	mov	r1, r3
 80063a0:	b01f      	add	sp, #124	; 0x7c
 80063a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a6:	2920      	cmp	r1, #32
 80063a8:	d1ce      	bne.n	8006348 <_strtod_l+0x30>
 80063aa:	3201      	adds	r2, #1
 80063ac:	e7c1      	b.n	8006332 <_strtod_l+0x1a>
 80063ae:	292d      	cmp	r1, #45	; 0x2d
 80063b0:	d1ca      	bne.n	8006348 <_strtod_l+0x30>
 80063b2:	2101      	movs	r1, #1
 80063b4:	910e      	str	r1, [sp, #56]	; 0x38
 80063b6:	1c51      	adds	r1, r2, #1
 80063b8:	9119      	str	r1, [sp, #100]	; 0x64
 80063ba:	7852      	ldrb	r2, [r2, #1]
 80063bc:	2a00      	cmp	r2, #0
 80063be:	d1c5      	bne.n	800634c <_strtod_l+0x34>
 80063c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80063c2:	9519      	str	r5, [sp, #100]	; 0x64
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f040 8582 	bne.w	8006ece <_strtod_l+0xbb6>
 80063ca:	4642      	mov	r2, r8
 80063cc:	464b      	mov	r3, r9
 80063ce:	e7e5      	b.n	800639c <_strtod_l+0x84>
 80063d0:	2100      	movs	r1, #0
 80063d2:	e7ef      	b.n	80063b4 <_strtod_l+0x9c>
 80063d4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80063d6:	b13a      	cbz	r2, 80063e8 <_strtod_l+0xd0>
 80063d8:	2135      	movs	r1, #53	; 0x35
 80063da:	a81c      	add	r0, sp, #112	; 0x70
 80063dc:	f7ff ff34 	bl	8006248 <__copybits>
 80063e0:	4620      	mov	r0, r4
 80063e2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80063e4:	f7ff fb18 	bl	8005a18 <_Bfree>
 80063e8:	3f01      	subs	r7, #1
 80063ea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80063ec:	2f04      	cmp	r7, #4
 80063ee:	d806      	bhi.n	80063fe <_strtod_l+0xe6>
 80063f0:	e8df f007 	tbb	[pc, r7]
 80063f4:	201d0314 	.word	0x201d0314
 80063f8:	14          	.byte	0x14
 80063f9:	00          	.byte	0x00
 80063fa:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80063fe:	05e9      	lsls	r1, r5, #23
 8006400:	bf48      	it	mi
 8006402:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8006406:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800640a:	0d1b      	lsrs	r3, r3, #20
 800640c:	051b      	lsls	r3, r3, #20
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1bb      	bne.n	800638a <_strtod_l+0x72>
 8006412:	f7fe fb15 	bl	8004a40 <__errno>
 8006416:	2322      	movs	r3, #34	; 0x22
 8006418:	6003      	str	r3, [r0, #0]
 800641a:	e7b6      	b.n	800638a <_strtod_l+0x72>
 800641c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006420:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8006424:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006428:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800642c:	e7e7      	b.n	80063fe <_strtod_l+0xe6>
 800642e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80065a4 <_strtod_l+0x28c>
 8006432:	e7e4      	b.n	80063fe <_strtod_l+0xe6>
 8006434:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006438:	f04f 38ff 	mov.w	r8, #4294967295
 800643c:	e7df      	b.n	80063fe <_strtod_l+0xe6>
 800643e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006440:	1c5a      	adds	r2, r3, #1
 8006442:	9219      	str	r2, [sp, #100]	; 0x64
 8006444:	785b      	ldrb	r3, [r3, #1]
 8006446:	2b30      	cmp	r3, #48	; 0x30
 8006448:	d0f9      	beq.n	800643e <_strtod_l+0x126>
 800644a:	2b00      	cmp	r3, #0
 800644c:	d09d      	beq.n	800638a <_strtod_l+0x72>
 800644e:	2301      	movs	r3, #1
 8006450:	f04f 0a00 	mov.w	sl, #0
 8006454:	220a      	movs	r2, #10
 8006456:	46d3      	mov	fp, sl
 8006458:	9305      	str	r3, [sp, #20]
 800645a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800645c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8006460:	930b      	str	r3, [sp, #44]	; 0x2c
 8006462:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006464:	7806      	ldrb	r6, [r0, #0]
 8006466:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800646a:	b2d9      	uxtb	r1, r3
 800646c:	2909      	cmp	r1, #9
 800646e:	d926      	bls.n	80064be <_strtod_l+0x1a6>
 8006470:	2201      	movs	r2, #1
 8006472:	494d      	ldr	r1, [pc, #308]	; (80065a8 <_strtod_l+0x290>)
 8006474:	f000 ffe6 	bl	8007444 <strncmp>
 8006478:	2800      	cmp	r0, #0
 800647a:	d030      	beq.n	80064de <_strtod_l+0x1c6>
 800647c:	2000      	movs	r0, #0
 800647e:	4632      	mov	r2, r6
 8006480:	4603      	mov	r3, r0
 8006482:	465e      	mov	r6, fp
 8006484:	9008      	str	r0, [sp, #32]
 8006486:	2a65      	cmp	r2, #101	; 0x65
 8006488:	d001      	beq.n	800648e <_strtod_l+0x176>
 800648a:	2a45      	cmp	r2, #69	; 0x45
 800648c:	d113      	bne.n	80064b6 <_strtod_l+0x19e>
 800648e:	b91e      	cbnz	r6, 8006498 <_strtod_l+0x180>
 8006490:	9a05      	ldr	r2, [sp, #20]
 8006492:	4302      	orrs	r2, r0
 8006494:	d094      	beq.n	80063c0 <_strtod_l+0xa8>
 8006496:	2600      	movs	r6, #0
 8006498:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800649a:	1c6a      	adds	r2, r5, #1
 800649c:	9219      	str	r2, [sp, #100]	; 0x64
 800649e:	786a      	ldrb	r2, [r5, #1]
 80064a0:	2a2b      	cmp	r2, #43	; 0x2b
 80064a2:	d074      	beq.n	800658e <_strtod_l+0x276>
 80064a4:	2a2d      	cmp	r2, #45	; 0x2d
 80064a6:	d078      	beq.n	800659a <_strtod_l+0x282>
 80064a8:	f04f 0c00 	mov.w	ip, #0
 80064ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80064b0:	2909      	cmp	r1, #9
 80064b2:	d97f      	bls.n	80065b4 <_strtod_l+0x29c>
 80064b4:	9519      	str	r5, [sp, #100]	; 0x64
 80064b6:	2700      	movs	r7, #0
 80064b8:	e09e      	b.n	80065f8 <_strtod_l+0x2e0>
 80064ba:	2300      	movs	r3, #0
 80064bc:	e7c8      	b.n	8006450 <_strtod_l+0x138>
 80064be:	f1bb 0f08 	cmp.w	fp, #8
 80064c2:	bfd8      	it	le
 80064c4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80064c6:	f100 0001 	add.w	r0, r0, #1
 80064ca:	bfd6      	itet	le
 80064cc:	fb02 3301 	mlale	r3, r2, r1, r3
 80064d0:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80064d4:	930a      	strle	r3, [sp, #40]	; 0x28
 80064d6:	f10b 0b01 	add.w	fp, fp, #1
 80064da:	9019      	str	r0, [sp, #100]	; 0x64
 80064dc:	e7c1      	b.n	8006462 <_strtod_l+0x14a>
 80064de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80064e0:	1c5a      	adds	r2, r3, #1
 80064e2:	9219      	str	r2, [sp, #100]	; 0x64
 80064e4:	785a      	ldrb	r2, [r3, #1]
 80064e6:	f1bb 0f00 	cmp.w	fp, #0
 80064ea:	d037      	beq.n	800655c <_strtod_l+0x244>
 80064ec:	465e      	mov	r6, fp
 80064ee:	9008      	str	r0, [sp, #32]
 80064f0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80064f4:	2b09      	cmp	r3, #9
 80064f6:	d912      	bls.n	800651e <_strtod_l+0x206>
 80064f8:	2301      	movs	r3, #1
 80064fa:	e7c4      	b.n	8006486 <_strtod_l+0x16e>
 80064fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80064fe:	3001      	adds	r0, #1
 8006500:	1c5a      	adds	r2, r3, #1
 8006502:	9219      	str	r2, [sp, #100]	; 0x64
 8006504:	785a      	ldrb	r2, [r3, #1]
 8006506:	2a30      	cmp	r2, #48	; 0x30
 8006508:	d0f8      	beq.n	80064fc <_strtod_l+0x1e4>
 800650a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800650e:	2b08      	cmp	r3, #8
 8006510:	f200 84e4 	bhi.w	8006edc <_strtod_l+0xbc4>
 8006514:	9008      	str	r0, [sp, #32]
 8006516:	2000      	movs	r0, #0
 8006518:	4606      	mov	r6, r0
 800651a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800651c:	930b      	str	r3, [sp, #44]	; 0x2c
 800651e:	3a30      	subs	r2, #48	; 0x30
 8006520:	f100 0301 	add.w	r3, r0, #1
 8006524:	d014      	beq.n	8006550 <_strtod_l+0x238>
 8006526:	9908      	ldr	r1, [sp, #32]
 8006528:	eb00 0c06 	add.w	ip, r0, r6
 800652c:	4419      	add	r1, r3
 800652e:	9108      	str	r1, [sp, #32]
 8006530:	4633      	mov	r3, r6
 8006532:	210a      	movs	r1, #10
 8006534:	4563      	cmp	r3, ip
 8006536:	d113      	bne.n	8006560 <_strtod_l+0x248>
 8006538:	1833      	adds	r3, r6, r0
 800653a:	2b08      	cmp	r3, #8
 800653c:	f106 0601 	add.w	r6, r6, #1
 8006540:	4406      	add	r6, r0
 8006542:	dc1a      	bgt.n	800657a <_strtod_l+0x262>
 8006544:	230a      	movs	r3, #10
 8006546:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006548:	fb03 2301 	mla	r3, r3, r1, r2
 800654c:	930a      	str	r3, [sp, #40]	; 0x28
 800654e:	2300      	movs	r3, #0
 8006550:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006552:	4618      	mov	r0, r3
 8006554:	1c51      	adds	r1, r2, #1
 8006556:	9119      	str	r1, [sp, #100]	; 0x64
 8006558:	7852      	ldrb	r2, [r2, #1]
 800655a:	e7c9      	b.n	80064f0 <_strtod_l+0x1d8>
 800655c:	4658      	mov	r0, fp
 800655e:	e7d2      	b.n	8006506 <_strtod_l+0x1ee>
 8006560:	2b08      	cmp	r3, #8
 8006562:	f103 0301 	add.w	r3, r3, #1
 8006566:	dc03      	bgt.n	8006570 <_strtod_l+0x258>
 8006568:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800656a:	434f      	muls	r7, r1
 800656c:	970a      	str	r7, [sp, #40]	; 0x28
 800656e:	e7e1      	b.n	8006534 <_strtod_l+0x21c>
 8006570:	2b10      	cmp	r3, #16
 8006572:	bfd8      	it	le
 8006574:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006578:	e7dc      	b.n	8006534 <_strtod_l+0x21c>
 800657a:	2e10      	cmp	r6, #16
 800657c:	bfdc      	itt	le
 800657e:	230a      	movle	r3, #10
 8006580:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006584:	e7e3      	b.n	800654e <_strtod_l+0x236>
 8006586:	2300      	movs	r3, #0
 8006588:	9308      	str	r3, [sp, #32]
 800658a:	2301      	movs	r3, #1
 800658c:	e780      	b.n	8006490 <_strtod_l+0x178>
 800658e:	f04f 0c00 	mov.w	ip, #0
 8006592:	1caa      	adds	r2, r5, #2
 8006594:	9219      	str	r2, [sp, #100]	; 0x64
 8006596:	78aa      	ldrb	r2, [r5, #2]
 8006598:	e788      	b.n	80064ac <_strtod_l+0x194>
 800659a:	f04f 0c01 	mov.w	ip, #1
 800659e:	e7f8      	b.n	8006592 <_strtod_l+0x27a>
 80065a0:	08008458 	.word	0x08008458
 80065a4:	7ff00000 	.word	0x7ff00000
 80065a8:	08008454 	.word	0x08008454
 80065ac:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80065ae:	1c51      	adds	r1, r2, #1
 80065b0:	9119      	str	r1, [sp, #100]	; 0x64
 80065b2:	7852      	ldrb	r2, [r2, #1]
 80065b4:	2a30      	cmp	r2, #48	; 0x30
 80065b6:	d0f9      	beq.n	80065ac <_strtod_l+0x294>
 80065b8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80065bc:	2908      	cmp	r1, #8
 80065be:	f63f af7a 	bhi.w	80064b6 <_strtod_l+0x19e>
 80065c2:	3a30      	subs	r2, #48	; 0x30
 80065c4:	9209      	str	r2, [sp, #36]	; 0x24
 80065c6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80065c8:	920c      	str	r2, [sp, #48]	; 0x30
 80065ca:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80065cc:	1c57      	adds	r7, r2, #1
 80065ce:	9719      	str	r7, [sp, #100]	; 0x64
 80065d0:	7852      	ldrb	r2, [r2, #1]
 80065d2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80065d6:	f1be 0f09 	cmp.w	lr, #9
 80065da:	d938      	bls.n	800664e <_strtod_l+0x336>
 80065dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80065de:	1a7f      	subs	r7, r7, r1
 80065e0:	2f08      	cmp	r7, #8
 80065e2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80065e6:	dc03      	bgt.n	80065f0 <_strtod_l+0x2d8>
 80065e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065ea:	428f      	cmp	r7, r1
 80065ec:	bfa8      	it	ge
 80065ee:	460f      	movge	r7, r1
 80065f0:	f1bc 0f00 	cmp.w	ip, #0
 80065f4:	d000      	beq.n	80065f8 <_strtod_l+0x2e0>
 80065f6:	427f      	negs	r7, r7
 80065f8:	2e00      	cmp	r6, #0
 80065fa:	d14f      	bne.n	800669c <_strtod_l+0x384>
 80065fc:	9905      	ldr	r1, [sp, #20]
 80065fe:	4301      	orrs	r1, r0
 8006600:	f47f aec3 	bne.w	800638a <_strtod_l+0x72>
 8006604:	2b00      	cmp	r3, #0
 8006606:	f47f aedb 	bne.w	80063c0 <_strtod_l+0xa8>
 800660a:	2a69      	cmp	r2, #105	; 0x69
 800660c:	d029      	beq.n	8006662 <_strtod_l+0x34a>
 800660e:	dc26      	bgt.n	800665e <_strtod_l+0x346>
 8006610:	2a49      	cmp	r2, #73	; 0x49
 8006612:	d026      	beq.n	8006662 <_strtod_l+0x34a>
 8006614:	2a4e      	cmp	r2, #78	; 0x4e
 8006616:	f47f aed3 	bne.w	80063c0 <_strtod_l+0xa8>
 800661a:	499a      	ldr	r1, [pc, #616]	; (8006884 <_strtod_l+0x56c>)
 800661c:	a819      	add	r0, sp, #100	; 0x64
 800661e:	f001 fa23 	bl	8007a68 <__match>
 8006622:	2800      	cmp	r0, #0
 8006624:	f43f aecc 	beq.w	80063c0 <_strtod_l+0xa8>
 8006628:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b28      	cmp	r3, #40	; 0x28
 800662e:	d12f      	bne.n	8006690 <_strtod_l+0x378>
 8006630:	4995      	ldr	r1, [pc, #596]	; (8006888 <_strtod_l+0x570>)
 8006632:	aa1c      	add	r2, sp, #112	; 0x70
 8006634:	a819      	add	r0, sp, #100	; 0x64
 8006636:	f001 fa2b 	bl	8007a90 <__hexnan>
 800663a:	2805      	cmp	r0, #5
 800663c:	d128      	bne.n	8006690 <_strtod_l+0x378>
 800663e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006640:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006644:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006648:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800664c:	e69d      	b.n	800638a <_strtod_l+0x72>
 800664e:	210a      	movs	r1, #10
 8006650:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006652:	fb01 2107 	mla	r1, r1, r7, r2
 8006656:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800665a:	9209      	str	r2, [sp, #36]	; 0x24
 800665c:	e7b5      	b.n	80065ca <_strtod_l+0x2b2>
 800665e:	2a6e      	cmp	r2, #110	; 0x6e
 8006660:	e7d9      	b.n	8006616 <_strtod_l+0x2fe>
 8006662:	498a      	ldr	r1, [pc, #552]	; (800688c <_strtod_l+0x574>)
 8006664:	a819      	add	r0, sp, #100	; 0x64
 8006666:	f001 f9ff 	bl	8007a68 <__match>
 800666a:	2800      	cmp	r0, #0
 800666c:	f43f aea8 	beq.w	80063c0 <_strtod_l+0xa8>
 8006670:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006672:	4987      	ldr	r1, [pc, #540]	; (8006890 <_strtod_l+0x578>)
 8006674:	3b01      	subs	r3, #1
 8006676:	a819      	add	r0, sp, #100	; 0x64
 8006678:	9319      	str	r3, [sp, #100]	; 0x64
 800667a:	f001 f9f5 	bl	8007a68 <__match>
 800667e:	b910      	cbnz	r0, 8006686 <_strtod_l+0x36e>
 8006680:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006682:	3301      	adds	r3, #1
 8006684:	9319      	str	r3, [sp, #100]	; 0x64
 8006686:	f04f 0800 	mov.w	r8, #0
 800668a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8006894 <_strtod_l+0x57c>
 800668e:	e67c      	b.n	800638a <_strtod_l+0x72>
 8006690:	4881      	ldr	r0, [pc, #516]	; (8006898 <_strtod_l+0x580>)
 8006692:	f000 ff07 	bl	80074a4 <nan>
 8006696:	4680      	mov	r8, r0
 8006698:	4689      	mov	r9, r1
 800669a:	e676      	b.n	800638a <_strtod_l+0x72>
 800669c:	9b08      	ldr	r3, [sp, #32]
 800669e:	f1bb 0f00 	cmp.w	fp, #0
 80066a2:	bf08      	it	eq
 80066a4:	46b3      	moveq	fp, r6
 80066a6:	1afb      	subs	r3, r7, r3
 80066a8:	2e10      	cmp	r6, #16
 80066aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80066ac:	4635      	mov	r5, r6
 80066ae:	9309      	str	r3, [sp, #36]	; 0x24
 80066b0:	bfa8      	it	ge
 80066b2:	2510      	movge	r5, #16
 80066b4:	f7f9 fe96 	bl	80003e4 <__aeabi_ui2d>
 80066b8:	2e09      	cmp	r6, #9
 80066ba:	4680      	mov	r8, r0
 80066bc:	4689      	mov	r9, r1
 80066be:	dd13      	ble.n	80066e8 <_strtod_l+0x3d0>
 80066c0:	4b76      	ldr	r3, [pc, #472]	; (800689c <_strtod_l+0x584>)
 80066c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80066c6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80066ca:	f7f9 ff05 	bl	80004d8 <__aeabi_dmul>
 80066ce:	4680      	mov	r8, r0
 80066d0:	4650      	mov	r0, sl
 80066d2:	4689      	mov	r9, r1
 80066d4:	f7f9 fe86 	bl	80003e4 <__aeabi_ui2d>
 80066d8:	4602      	mov	r2, r0
 80066da:	460b      	mov	r3, r1
 80066dc:	4640      	mov	r0, r8
 80066de:	4649      	mov	r1, r9
 80066e0:	f7f9 fd44 	bl	800016c <__adddf3>
 80066e4:	4680      	mov	r8, r0
 80066e6:	4689      	mov	r9, r1
 80066e8:	2e0f      	cmp	r6, #15
 80066ea:	dc36      	bgt.n	800675a <_strtod_l+0x442>
 80066ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f43f ae4b 	beq.w	800638a <_strtod_l+0x72>
 80066f4:	dd22      	ble.n	800673c <_strtod_l+0x424>
 80066f6:	2b16      	cmp	r3, #22
 80066f8:	dc09      	bgt.n	800670e <_strtod_l+0x3f6>
 80066fa:	4968      	ldr	r1, [pc, #416]	; (800689c <_strtod_l+0x584>)
 80066fc:	4642      	mov	r2, r8
 80066fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006702:	464b      	mov	r3, r9
 8006704:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006708:	f7f9 fee6 	bl	80004d8 <__aeabi_dmul>
 800670c:	e7c3      	b.n	8006696 <_strtod_l+0x37e>
 800670e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006710:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006714:	4293      	cmp	r3, r2
 8006716:	db20      	blt.n	800675a <_strtod_l+0x442>
 8006718:	4c60      	ldr	r4, [pc, #384]	; (800689c <_strtod_l+0x584>)
 800671a:	f1c6 060f 	rsb	r6, r6, #15
 800671e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8006722:	4642      	mov	r2, r8
 8006724:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006728:	464b      	mov	r3, r9
 800672a:	f7f9 fed5 	bl	80004d8 <__aeabi_dmul>
 800672e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006730:	1b9e      	subs	r6, r3, r6
 8006732:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006736:	e9d4 2300 	ldrd	r2, r3, [r4]
 800673a:	e7e5      	b.n	8006708 <_strtod_l+0x3f0>
 800673c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800673e:	3316      	adds	r3, #22
 8006740:	db0b      	blt.n	800675a <_strtod_l+0x442>
 8006742:	9b08      	ldr	r3, [sp, #32]
 8006744:	4640      	mov	r0, r8
 8006746:	1bdf      	subs	r7, r3, r7
 8006748:	4b54      	ldr	r3, [pc, #336]	; (800689c <_strtod_l+0x584>)
 800674a:	4649      	mov	r1, r9
 800674c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006750:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006754:	f7f9 ffea 	bl	800072c <__aeabi_ddiv>
 8006758:	e79d      	b.n	8006696 <_strtod_l+0x37e>
 800675a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800675c:	1b75      	subs	r5, r6, r5
 800675e:	441d      	add	r5, r3
 8006760:	2d00      	cmp	r5, #0
 8006762:	dd70      	ble.n	8006846 <_strtod_l+0x52e>
 8006764:	f015 030f 	ands.w	r3, r5, #15
 8006768:	d00a      	beq.n	8006780 <_strtod_l+0x468>
 800676a:	494c      	ldr	r1, [pc, #304]	; (800689c <_strtod_l+0x584>)
 800676c:	4642      	mov	r2, r8
 800676e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006772:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006776:	464b      	mov	r3, r9
 8006778:	f7f9 feae 	bl	80004d8 <__aeabi_dmul>
 800677c:	4680      	mov	r8, r0
 800677e:	4689      	mov	r9, r1
 8006780:	f035 050f 	bics.w	r5, r5, #15
 8006784:	d04d      	beq.n	8006822 <_strtod_l+0x50a>
 8006786:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800678a:	dd22      	ble.n	80067d2 <_strtod_l+0x4ba>
 800678c:	2600      	movs	r6, #0
 800678e:	46b3      	mov	fp, r6
 8006790:	960b      	str	r6, [sp, #44]	; 0x2c
 8006792:	9608      	str	r6, [sp, #32]
 8006794:	2322      	movs	r3, #34	; 0x22
 8006796:	f04f 0800 	mov.w	r8, #0
 800679a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8006894 <_strtod_l+0x57c>
 800679e:	6023      	str	r3, [r4, #0]
 80067a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f43f adf1 	beq.w	800638a <_strtod_l+0x72>
 80067a8:	4620      	mov	r0, r4
 80067aa:	991a      	ldr	r1, [sp, #104]	; 0x68
 80067ac:	f7ff f934 	bl	8005a18 <_Bfree>
 80067b0:	4620      	mov	r0, r4
 80067b2:	9908      	ldr	r1, [sp, #32]
 80067b4:	f7ff f930 	bl	8005a18 <_Bfree>
 80067b8:	4659      	mov	r1, fp
 80067ba:	4620      	mov	r0, r4
 80067bc:	f7ff f92c 	bl	8005a18 <_Bfree>
 80067c0:	4620      	mov	r0, r4
 80067c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067c4:	f7ff f928 	bl	8005a18 <_Bfree>
 80067c8:	4631      	mov	r1, r6
 80067ca:	4620      	mov	r0, r4
 80067cc:	f7ff f924 	bl	8005a18 <_Bfree>
 80067d0:	e5db      	b.n	800638a <_strtod_l+0x72>
 80067d2:	4b33      	ldr	r3, [pc, #204]	; (80068a0 <_strtod_l+0x588>)
 80067d4:	4640      	mov	r0, r8
 80067d6:	9305      	str	r3, [sp, #20]
 80067d8:	2300      	movs	r3, #0
 80067da:	4649      	mov	r1, r9
 80067dc:	469a      	mov	sl, r3
 80067de:	112d      	asrs	r5, r5, #4
 80067e0:	2d01      	cmp	r5, #1
 80067e2:	dc21      	bgt.n	8006828 <_strtod_l+0x510>
 80067e4:	b10b      	cbz	r3, 80067ea <_strtod_l+0x4d2>
 80067e6:	4680      	mov	r8, r0
 80067e8:	4689      	mov	r9, r1
 80067ea:	492d      	ldr	r1, [pc, #180]	; (80068a0 <_strtod_l+0x588>)
 80067ec:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80067f0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80067f4:	4642      	mov	r2, r8
 80067f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067fa:	464b      	mov	r3, r9
 80067fc:	f7f9 fe6c 	bl	80004d8 <__aeabi_dmul>
 8006800:	4b24      	ldr	r3, [pc, #144]	; (8006894 <_strtod_l+0x57c>)
 8006802:	460a      	mov	r2, r1
 8006804:	400b      	ands	r3, r1
 8006806:	4927      	ldr	r1, [pc, #156]	; (80068a4 <_strtod_l+0x58c>)
 8006808:	4680      	mov	r8, r0
 800680a:	428b      	cmp	r3, r1
 800680c:	d8be      	bhi.n	800678c <_strtod_l+0x474>
 800680e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006812:	428b      	cmp	r3, r1
 8006814:	bf86      	itte	hi
 8006816:	f04f 38ff 	movhi.w	r8, #4294967295
 800681a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80068a8 <_strtod_l+0x590>
 800681e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006822:	2300      	movs	r3, #0
 8006824:	9305      	str	r3, [sp, #20]
 8006826:	e07b      	b.n	8006920 <_strtod_l+0x608>
 8006828:	07ea      	lsls	r2, r5, #31
 800682a:	d505      	bpl.n	8006838 <_strtod_l+0x520>
 800682c:	9b05      	ldr	r3, [sp, #20]
 800682e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006832:	f7f9 fe51 	bl	80004d8 <__aeabi_dmul>
 8006836:	2301      	movs	r3, #1
 8006838:	9a05      	ldr	r2, [sp, #20]
 800683a:	f10a 0a01 	add.w	sl, sl, #1
 800683e:	3208      	adds	r2, #8
 8006840:	106d      	asrs	r5, r5, #1
 8006842:	9205      	str	r2, [sp, #20]
 8006844:	e7cc      	b.n	80067e0 <_strtod_l+0x4c8>
 8006846:	d0ec      	beq.n	8006822 <_strtod_l+0x50a>
 8006848:	426d      	negs	r5, r5
 800684a:	f015 020f 	ands.w	r2, r5, #15
 800684e:	d00a      	beq.n	8006866 <_strtod_l+0x54e>
 8006850:	4b12      	ldr	r3, [pc, #72]	; (800689c <_strtod_l+0x584>)
 8006852:	4640      	mov	r0, r8
 8006854:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006858:	4649      	mov	r1, r9
 800685a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685e:	f7f9 ff65 	bl	800072c <__aeabi_ddiv>
 8006862:	4680      	mov	r8, r0
 8006864:	4689      	mov	r9, r1
 8006866:	112d      	asrs	r5, r5, #4
 8006868:	d0db      	beq.n	8006822 <_strtod_l+0x50a>
 800686a:	2d1f      	cmp	r5, #31
 800686c:	dd1e      	ble.n	80068ac <_strtod_l+0x594>
 800686e:	2600      	movs	r6, #0
 8006870:	46b3      	mov	fp, r6
 8006872:	960b      	str	r6, [sp, #44]	; 0x2c
 8006874:	9608      	str	r6, [sp, #32]
 8006876:	2322      	movs	r3, #34	; 0x22
 8006878:	f04f 0800 	mov.w	r8, #0
 800687c:	f04f 0900 	mov.w	r9, #0
 8006880:	6023      	str	r3, [r4, #0]
 8006882:	e78d      	b.n	80067a0 <_strtod_l+0x488>
 8006884:	0800823f 	.word	0x0800823f
 8006888:	0800846c 	.word	0x0800846c
 800688c:	08008237 	.word	0x08008237
 8006890:	0800826e 	.word	0x0800826e
 8006894:	7ff00000 	.word	0x7ff00000
 8006898:	080085fd 	.word	0x080085fd
 800689c:	08008380 	.word	0x08008380
 80068a0:	08008358 	.word	0x08008358
 80068a4:	7ca00000 	.word	0x7ca00000
 80068a8:	7fefffff 	.word	0x7fefffff
 80068ac:	f015 0310 	ands.w	r3, r5, #16
 80068b0:	bf18      	it	ne
 80068b2:	236a      	movne	r3, #106	; 0x6a
 80068b4:	4640      	mov	r0, r8
 80068b6:	9305      	str	r3, [sp, #20]
 80068b8:	4649      	mov	r1, r9
 80068ba:	2300      	movs	r3, #0
 80068bc:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8006b88 <_strtod_l+0x870>
 80068c0:	07ea      	lsls	r2, r5, #31
 80068c2:	d504      	bpl.n	80068ce <_strtod_l+0x5b6>
 80068c4:	e9da 2300 	ldrd	r2, r3, [sl]
 80068c8:	f7f9 fe06 	bl	80004d8 <__aeabi_dmul>
 80068cc:	2301      	movs	r3, #1
 80068ce:	106d      	asrs	r5, r5, #1
 80068d0:	f10a 0a08 	add.w	sl, sl, #8
 80068d4:	d1f4      	bne.n	80068c0 <_strtod_l+0x5a8>
 80068d6:	b10b      	cbz	r3, 80068dc <_strtod_l+0x5c4>
 80068d8:	4680      	mov	r8, r0
 80068da:	4689      	mov	r9, r1
 80068dc:	9b05      	ldr	r3, [sp, #20]
 80068de:	b1bb      	cbz	r3, 8006910 <_strtod_l+0x5f8>
 80068e0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80068e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	4649      	mov	r1, r9
 80068ec:	dd10      	ble.n	8006910 <_strtod_l+0x5f8>
 80068ee:	2b1f      	cmp	r3, #31
 80068f0:	f340 8128 	ble.w	8006b44 <_strtod_l+0x82c>
 80068f4:	2b34      	cmp	r3, #52	; 0x34
 80068f6:	bfd8      	it	le
 80068f8:	f04f 33ff 	movle.w	r3, #4294967295
 80068fc:	f04f 0800 	mov.w	r8, #0
 8006900:	bfcf      	iteee	gt
 8006902:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006906:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800690a:	4093      	lslle	r3, r2
 800690c:	ea03 0901 	andle.w	r9, r3, r1
 8006910:	2200      	movs	r2, #0
 8006912:	2300      	movs	r3, #0
 8006914:	4640      	mov	r0, r8
 8006916:	4649      	mov	r1, r9
 8006918:	f7fa f846 	bl	80009a8 <__aeabi_dcmpeq>
 800691c:	2800      	cmp	r0, #0
 800691e:	d1a6      	bne.n	800686e <_strtod_l+0x556>
 8006920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006922:	465a      	mov	r2, fp
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	4620      	mov	r0, r4
 8006928:	4633      	mov	r3, r6
 800692a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800692c:	f7ff f8dc 	bl	8005ae8 <__s2b>
 8006930:	900b      	str	r0, [sp, #44]	; 0x2c
 8006932:	2800      	cmp	r0, #0
 8006934:	f43f af2a 	beq.w	800678c <_strtod_l+0x474>
 8006938:	2600      	movs	r6, #0
 800693a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800693c:	9b08      	ldr	r3, [sp, #32]
 800693e:	2a00      	cmp	r2, #0
 8006940:	eba3 0307 	sub.w	r3, r3, r7
 8006944:	bfa8      	it	ge
 8006946:	2300      	movge	r3, #0
 8006948:	46b3      	mov	fp, r6
 800694a:	9312      	str	r3, [sp, #72]	; 0x48
 800694c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006950:	9316      	str	r3, [sp, #88]	; 0x58
 8006952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006954:	4620      	mov	r0, r4
 8006956:	6859      	ldr	r1, [r3, #4]
 8006958:	f7ff f81e 	bl	8005998 <_Balloc>
 800695c:	9008      	str	r0, [sp, #32]
 800695e:	2800      	cmp	r0, #0
 8006960:	f43f af18 	beq.w	8006794 <_strtod_l+0x47c>
 8006964:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006966:	300c      	adds	r0, #12
 8006968:	691a      	ldr	r2, [r3, #16]
 800696a:	f103 010c 	add.w	r1, r3, #12
 800696e:	3202      	adds	r2, #2
 8006970:	0092      	lsls	r2, r2, #2
 8006972:	f000 fd89 	bl	8007488 <memcpy>
 8006976:	ab1c      	add	r3, sp, #112	; 0x70
 8006978:	9301      	str	r3, [sp, #4]
 800697a:	ab1b      	add	r3, sp, #108	; 0x6c
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	4642      	mov	r2, r8
 8006980:	464b      	mov	r3, r9
 8006982:	4620      	mov	r0, r4
 8006984:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8006988:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800698c:	f7ff fbd8 	bl	8006140 <__d2b>
 8006990:	901a      	str	r0, [sp, #104]	; 0x68
 8006992:	2800      	cmp	r0, #0
 8006994:	f43f aefe 	beq.w	8006794 <_strtod_l+0x47c>
 8006998:	2101      	movs	r1, #1
 800699a:	4620      	mov	r0, r4
 800699c:	f7ff f93c 	bl	8005c18 <__i2b>
 80069a0:	4683      	mov	fp, r0
 80069a2:	2800      	cmp	r0, #0
 80069a4:	f43f aef6 	beq.w	8006794 <_strtod_l+0x47c>
 80069a8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80069aa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80069ac:	2f00      	cmp	r7, #0
 80069ae:	bfab      	itete	ge
 80069b0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 80069b2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80069b4:	eb07 0a03 	addge.w	sl, r7, r3
 80069b8:	1bdd      	sublt	r5, r3, r7
 80069ba:	9b05      	ldr	r3, [sp, #20]
 80069bc:	bfa8      	it	ge
 80069be:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80069c0:	eba7 0703 	sub.w	r7, r7, r3
 80069c4:	4417      	add	r7, r2
 80069c6:	4b71      	ldr	r3, [pc, #452]	; (8006b8c <_strtod_l+0x874>)
 80069c8:	f107 37ff 	add.w	r7, r7, #4294967295
 80069cc:	bfb8      	it	lt
 80069ce:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 80069d2:	429f      	cmp	r7, r3
 80069d4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80069d8:	f280 80c7 	bge.w	8006b6a <_strtod_l+0x852>
 80069dc:	1bdb      	subs	r3, r3, r7
 80069de:	2b1f      	cmp	r3, #31
 80069e0:	f04f 0101 	mov.w	r1, #1
 80069e4:	eba2 0203 	sub.w	r2, r2, r3
 80069e8:	f300 80b3 	bgt.w	8006b52 <_strtod_l+0x83a>
 80069ec:	fa01 f303 	lsl.w	r3, r1, r3
 80069f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80069f2:	2300      	movs	r3, #0
 80069f4:	9310      	str	r3, [sp, #64]	; 0x40
 80069f6:	eb0a 0702 	add.w	r7, sl, r2
 80069fa:	9b05      	ldr	r3, [sp, #20]
 80069fc:	45ba      	cmp	sl, r7
 80069fe:	4415      	add	r5, r2
 8006a00:	441d      	add	r5, r3
 8006a02:	4653      	mov	r3, sl
 8006a04:	bfa8      	it	ge
 8006a06:	463b      	movge	r3, r7
 8006a08:	42ab      	cmp	r3, r5
 8006a0a:	bfa8      	it	ge
 8006a0c:	462b      	movge	r3, r5
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	bfc2      	ittt	gt
 8006a12:	1aff      	subgt	r7, r7, r3
 8006a14:	1aed      	subgt	r5, r5, r3
 8006a16:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006a1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	dd17      	ble.n	8006a50 <_strtod_l+0x738>
 8006a20:	4659      	mov	r1, fp
 8006a22:	461a      	mov	r2, r3
 8006a24:	4620      	mov	r0, r4
 8006a26:	f7ff f9b5 	bl	8005d94 <__pow5mult>
 8006a2a:	4683      	mov	fp, r0
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	f43f aeb1 	beq.w	8006794 <_strtod_l+0x47c>
 8006a32:	4601      	mov	r1, r0
 8006a34:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006a36:	4620      	mov	r0, r4
 8006a38:	f7ff f904 	bl	8005c44 <__multiply>
 8006a3c:	900a      	str	r0, [sp, #40]	; 0x28
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	f43f aea8 	beq.w	8006794 <_strtod_l+0x47c>
 8006a44:	4620      	mov	r0, r4
 8006a46:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006a48:	f7fe ffe6 	bl	8005a18 <_Bfree>
 8006a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a4e:	931a      	str	r3, [sp, #104]	; 0x68
 8006a50:	2f00      	cmp	r7, #0
 8006a52:	f300 808f 	bgt.w	8006b74 <_strtod_l+0x85c>
 8006a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	dd08      	ble.n	8006a6e <_strtod_l+0x756>
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006a60:	9908      	ldr	r1, [sp, #32]
 8006a62:	f7ff f997 	bl	8005d94 <__pow5mult>
 8006a66:	9008      	str	r0, [sp, #32]
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	f43f ae93 	beq.w	8006794 <_strtod_l+0x47c>
 8006a6e:	2d00      	cmp	r5, #0
 8006a70:	dd08      	ble.n	8006a84 <_strtod_l+0x76c>
 8006a72:	462a      	mov	r2, r5
 8006a74:	4620      	mov	r0, r4
 8006a76:	9908      	ldr	r1, [sp, #32]
 8006a78:	f7ff f9e6 	bl	8005e48 <__lshift>
 8006a7c:	9008      	str	r0, [sp, #32]
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	f43f ae88 	beq.w	8006794 <_strtod_l+0x47c>
 8006a84:	f1ba 0f00 	cmp.w	sl, #0
 8006a88:	dd08      	ble.n	8006a9c <_strtod_l+0x784>
 8006a8a:	4659      	mov	r1, fp
 8006a8c:	4652      	mov	r2, sl
 8006a8e:	4620      	mov	r0, r4
 8006a90:	f7ff f9da 	bl	8005e48 <__lshift>
 8006a94:	4683      	mov	fp, r0
 8006a96:	2800      	cmp	r0, #0
 8006a98:	f43f ae7c 	beq.w	8006794 <_strtod_l+0x47c>
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	9a08      	ldr	r2, [sp, #32]
 8006aa0:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006aa2:	f7ff fa59 	bl	8005f58 <__mdiff>
 8006aa6:	4606      	mov	r6, r0
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	f43f ae73 	beq.w	8006794 <_strtod_l+0x47c>
 8006aae:	2500      	movs	r5, #0
 8006ab0:	68c3      	ldr	r3, [r0, #12]
 8006ab2:	4659      	mov	r1, fp
 8006ab4:	60c5      	str	r5, [r0, #12]
 8006ab6:	930a      	str	r3, [sp, #40]	; 0x28
 8006ab8:	f7ff fa32 	bl	8005f20 <__mcmp>
 8006abc:	42a8      	cmp	r0, r5
 8006abe:	da6b      	bge.n	8006b98 <_strtod_l+0x880>
 8006ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ac2:	ea53 0308 	orrs.w	r3, r3, r8
 8006ac6:	f040 808f 	bne.w	8006be8 <_strtod_l+0x8d0>
 8006aca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f040 808a 	bne.w	8006be8 <_strtod_l+0x8d0>
 8006ad4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006ad8:	0d1b      	lsrs	r3, r3, #20
 8006ada:	051b      	lsls	r3, r3, #20
 8006adc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006ae0:	f240 8082 	bls.w	8006be8 <_strtod_l+0x8d0>
 8006ae4:	6973      	ldr	r3, [r6, #20]
 8006ae6:	b913      	cbnz	r3, 8006aee <_strtod_l+0x7d6>
 8006ae8:	6933      	ldr	r3, [r6, #16]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	dd7c      	ble.n	8006be8 <_strtod_l+0x8d0>
 8006aee:	4631      	mov	r1, r6
 8006af0:	2201      	movs	r2, #1
 8006af2:	4620      	mov	r0, r4
 8006af4:	f7ff f9a8 	bl	8005e48 <__lshift>
 8006af8:	4659      	mov	r1, fp
 8006afa:	4606      	mov	r6, r0
 8006afc:	f7ff fa10 	bl	8005f20 <__mcmp>
 8006b00:	2800      	cmp	r0, #0
 8006b02:	dd71      	ble.n	8006be8 <_strtod_l+0x8d0>
 8006b04:	9905      	ldr	r1, [sp, #20]
 8006b06:	464b      	mov	r3, r9
 8006b08:	4a21      	ldr	r2, [pc, #132]	; (8006b90 <_strtod_l+0x878>)
 8006b0a:	2900      	cmp	r1, #0
 8006b0c:	f000 808d 	beq.w	8006c2a <_strtod_l+0x912>
 8006b10:	ea02 0109 	and.w	r1, r2, r9
 8006b14:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006b18:	f300 8087 	bgt.w	8006c2a <_strtod_l+0x912>
 8006b1c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006b20:	f77f aea9 	ble.w	8006876 <_strtod_l+0x55e>
 8006b24:	4640      	mov	r0, r8
 8006b26:	4649      	mov	r1, r9
 8006b28:	4b1a      	ldr	r3, [pc, #104]	; (8006b94 <_strtod_l+0x87c>)
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f7f9 fcd4 	bl	80004d8 <__aeabi_dmul>
 8006b30:	4b17      	ldr	r3, [pc, #92]	; (8006b90 <_strtod_l+0x878>)
 8006b32:	4680      	mov	r8, r0
 8006b34:	400b      	ands	r3, r1
 8006b36:	4689      	mov	r9, r1
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f47f ae35 	bne.w	80067a8 <_strtod_l+0x490>
 8006b3e:	2322      	movs	r3, #34	; 0x22
 8006b40:	6023      	str	r3, [r4, #0]
 8006b42:	e631      	b.n	80067a8 <_strtod_l+0x490>
 8006b44:	f04f 32ff 	mov.w	r2, #4294967295
 8006b48:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4c:	ea03 0808 	and.w	r8, r3, r8
 8006b50:	e6de      	b.n	8006910 <_strtod_l+0x5f8>
 8006b52:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8006b56:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8006b5a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8006b5e:	37e2      	adds	r7, #226	; 0xe2
 8006b60:	fa01 f307 	lsl.w	r3, r1, r7
 8006b64:	9310      	str	r3, [sp, #64]	; 0x40
 8006b66:	9113      	str	r1, [sp, #76]	; 0x4c
 8006b68:	e745      	b.n	80069f6 <_strtod_l+0x6de>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	9310      	str	r3, [sp, #64]	; 0x40
 8006b6e:	2301      	movs	r3, #1
 8006b70:	9313      	str	r3, [sp, #76]	; 0x4c
 8006b72:	e740      	b.n	80069f6 <_strtod_l+0x6de>
 8006b74:	463a      	mov	r2, r7
 8006b76:	4620      	mov	r0, r4
 8006b78:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006b7a:	f7ff f965 	bl	8005e48 <__lshift>
 8006b7e:	901a      	str	r0, [sp, #104]	; 0x68
 8006b80:	2800      	cmp	r0, #0
 8006b82:	f47f af68 	bne.w	8006a56 <_strtod_l+0x73e>
 8006b86:	e605      	b.n	8006794 <_strtod_l+0x47c>
 8006b88:	08008480 	.word	0x08008480
 8006b8c:	fffffc02 	.word	0xfffffc02
 8006b90:	7ff00000 	.word	0x7ff00000
 8006b94:	39500000 	.word	0x39500000
 8006b98:	46ca      	mov	sl, r9
 8006b9a:	d165      	bne.n	8006c68 <_strtod_l+0x950>
 8006b9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b9e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ba2:	b352      	cbz	r2, 8006bfa <_strtod_l+0x8e2>
 8006ba4:	4a9e      	ldr	r2, [pc, #632]	; (8006e20 <_strtod_l+0xb08>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d12a      	bne.n	8006c00 <_strtod_l+0x8e8>
 8006baa:	9b05      	ldr	r3, [sp, #20]
 8006bac:	4641      	mov	r1, r8
 8006bae:	b1fb      	cbz	r3, 8006bf0 <_strtod_l+0x8d8>
 8006bb0:	4b9c      	ldr	r3, [pc, #624]	; (8006e24 <_strtod_l+0xb0c>)
 8006bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8006bb6:	ea09 0303 	and.w	r3, r9, r3
 8006bba:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006bbe:	d81a      	bhi.n	8006bf6 <_strtod_l+0x8de>
 8006bc0:	0d1b      	lsrs	r3, r3, #20
 8006bc2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bca:	4299      	cmp	r1, r3
 8006bcc:	d118      	bne.n	8006c00 <_strtod_l+0x8e8>
 8006bce:	4b96      	ldr	r3, [pc, #600]	; (8006e28 <_strtod_l+0xb10>)
 8006bd0:	459a      	cmp	sl, r3
 8006bd2:	d102      	bne.n	8006bda <_strtod_l+0x8c2>
 8006bd4:	3101      	adds	r1, #1
 8006bd6:	f43f addd 	beq.w	8006794 <_strtod_l+0x47c>
 8006bda:	f04f 0800 	mov.w	r8, #0
 8006bde:	4b91      	ldr	r3, [pc, #580]	; (8006e24 <_strtod_l+0xb0c>)
 8006be0:	ea0a 0303 	and.w	r3, sl, r3
 8006be4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8006be8:	9b05      	ldr	r3, [sp, #20]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d19a      	bne.n	8006b24 <_strtod_l+0x80c>
 8006bee:	e5db      	b.n	80067a8 <_strtod_l+0x490>
 8006bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8006bf4:	e7e9      	b.n	8006bca <_strtod_l+0x8b2>
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	e7e7      	b.n	8006bca <_strtod_l+0x8b2>
 8006bfa:	ea53 0308 	orrs.w	r3, r3, r8
 8006bfe:	d081      	beq.n	8006b04 <_strtod_l+0x7ec>
 8006c00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c02:	b1e3      	cbz	r3, 8006c3e <_strtod_l+0x926>
 8006c04:	ea13 0f0a 	tst.w	r3, sl
 8006c08:	d0ee      	beq.n	8006be8 <_strtod_l+0x8d0>
 8006c0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c0c:	4640      	mov	r0, r8
 8006c0e:	4649      	mov	r1, r9
 8006c10:	9a05      	ldr	r2, [sp, #20]
 8006c12:	b1c3      	cbz	r3, 8006c46 <_strtod_l+0x92e>
 8006c14:	f7ff fb5c 	bl	80062d0 <sulp>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006c1e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006c20:	f7f9 faa4 	bl	800016c <__adddf3>
 8006c24:	4680      	mov	r8, r0
 8006c26:	4689      	mov	r9, r1
 8006c28:	e7de      	b.n	8006be8 <_strtod_l+0x8d0>
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006c30:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006c34:	f04f 38ff 	mov.w	r8, #4294967295
 8006c38:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006c3c:	e7d4      	b.n	8006be8 <_strtod_l+0x8d0>
 8006c3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c40:	ea13 0f08 	tst.w	r3, r8
 8006c44:	e7e0      	b.n	8006c08 <_strtod_l+0x8f0>
 8006c46:	f7ff fb43 	bl	80062d0 <sulp>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006c50:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006c52:	f7f9 fa89 	bl	8000168 <__aeabi_dsub>
 8006c56:	2200      	movs	r2, #0
 8006c58:	2300      	movs	r3, #0
 8006c5a:	4680      	mov	r8, r0
 8006c5c:	4689      	mov	r9, r1
 8006c5e:	f7f9 fea3 	bl	80009a8 <__aeabi_dcmpeq>
 8006c62:	2800      	cmp	r0, #0
 8006c64:	d0c0      	beq.n	8006be8 <_strtod_l+0x8d0>
 8006c66:	e606      	b.n	8006876 <_strtod_l+0x55e>
 8006c68:	4659      	mov	r1, fp
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	f7ff fabe 	bl	80061ec <__ratio>
 8006c70:	4602      	mov	r2, r0
 8006c72:	460b      	mov	r3, r1
 8006c74:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006c7e:	f7f9 fea7 	bl	80009d0 <__aeabi_dcmple>
 8006c82:	2800      	cmp	r0, #0
 8006c84:	d06f      	beq.n	8006d66 <_strtod_l+0xa4e>
 8006c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d17c      	bne.n	8006d86 <_strtod_l+0xa6e>
 8006c8c:	f1b8 0f00 	cmp.w	r8, #0
 8006c90:	d159      	bne.n	8006d46 <_strtod_l+0xa2e>
 8006c92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d17b      	bne.n	8006d92 <_strtod_l+0xa7a>
 8006c9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	4b62      	ldr	r3, [pc, #392]	; (8006e2c <_strtod_l+0xb14>)
 8006ca2:	f7f9 fe8b 	bl	80009bc <__aeabi_dcmplt>
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	d15a      	bne.n	8006d60 <_strtod_l+0xa48>
 8006caa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006cae:	2200      	movs	r2, #0
 8006cb0:	4b5f      	ldr	r3, [pc, #380]	; (8006e30 <_strtod_l+0xb18>)
 8006cb2:	f7f9 fc11 	bl	80004d8 <__aeabi_dmul>
 8006cb6:	4605      	mov	r5, r0
 8006cb8:	460f      	mov	r7, r1
 8006cba:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006cbe:	9506      	str	r5, [sp, #24]
 8006cc0:	9307      	str	r3, [sp, #28]
 8006cc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006cc6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006cca:	4b56      	ldr	r3, [pc, #344]	; (8006e24 <_strtod_l+0xb0c>)
 8006ccc:	4a55      	ldr	r2, [pc, #340]	; (8006e24 <_strtod_l+0xb0c>)
 8006cce:	ea0a 0303 	and.w	r3, sl, r3
 8006cd2:	9313      	str	r3, [sp, #76]	; 0x4c
 8006cd4:	4b57      	ldr	r3, [pc, #348]	; (8006e34 <_strtod_l+0xb1c>)
 8006cd6:	ea0a 0202 	and.w	r2, sl, r2
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	f040 80b0 	bne.w	8006e40 <_strtod_l+0xb28>
 8006ce0:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8006ce4:	4640      	mov	r0, r8
 8006ce6:	4649      	mov	r1, r9
 8006ce8:	f7ff f9c2 	bl	8006070 <__ulp>
 8006cec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006cf0:	f7f9 fbf2 	bl	80004d8 <__aeabi_dmul>
 8006cf4:	4642      	mov	r2, r8
 8006cf6:	464b      	mov	r3, r9
 8006cf8:	f7f9 fa38 	bl	800016c <__adddf3>
 8006cfc:	f8df a124 	ldr.w	sl, [pc, #292]	; 8006e24 <_strtod_l+0xb0c>
 8006d00:	4a4d      	ldr	r2, [pc, #308]	; (8006e38 <_strtod_l+0xb20>)
 8006d02:	ea01 0a0a 	and.w	sl, r1, sl
 8006d06:	4592      	cmp	sl, r2
 8006d08:	4680      	mov	r8, r0
 8006d0a:	d948      	bls.n	8006d9e <_strtod_l+0xa86>
 8006d0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d0e:	4b46      	ldr	r3, [pc, #280]	; (8006e28 <_strtod_l+0xb10>)
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d103      	bne.n	8006d1c <_strtod_l+0xa04>
 8006d14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d16:	3301      	adds	r3, #1
 8006d18:	f43f ad3c 	beq.w	8006794 <_strtod_l+0x47c>
 8006d1c:	f04f 38ff 	mov.w	r8, #4294967295
 8006d20:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8006e28 <_strtod_l+0xb10>
 8006d24:	4620      	mov	r0, r4
 8006d26:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006d28:	f7fe fe76 	bl	8005a18 <_Bfree>
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	9908      	ldr	r1, [sp, #32]
 8006d30:	f7fe fe72 	bl	8005a18 <_Bfree>
 8006d34:	4659      	mov	r1, fp
 8006d36:	4620      	mov	r0, r4
 8006d38:	f7fe fe6e 	bl	8005a18 <_Bfree>
 8006d3c:	4631      	mov	r1, r6
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f7fe fe6a 	bl	8005a18 <_Bfree>
 8006d44:	e605      	b.n	8006952 <_strtod_l+0x63a>
 8006d46:	f1b8 0f01 	cmp.w	r8, #1
 8006d4a:	d103      	bne.n	8006d54 <_strtod_l+0xa3c>
 8006d4c:	f1b9 0f00 	cmp.w	r9, #0
 8006d50:	f43f ad91 	beq.w	8006876 <_strtod_l+0x55e>
 8006d54:	2200      	movs	r2, #0
 8006d56:	4b39      	ldr	r3, [pc, #228]	; (8006e3c <_strtod_l+0xb24>)
 8006d58:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006d5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d5e:	e016      	b.n	8006d8e <_strtod_l+0xa76>
 8006d60:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006d62:	4f33      	ldr	r7, [pc, #204]	; (8006e30 <_strtod_l+0xb18>)
 8006d64:	e7a9      	b.n	8006cba <_strtod_l+0x9a2>
 8006d66:	4b32      	ldr	r3, [pc, #200]	; (8006e30 <_strtod_l+0xb18>)
 8006d68:	2200      	movs	r2, #0
 8006d6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d6e:	f7f9 fbb3 	bl	80004d8 <__aeabi_dmul>
 8006d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d74:	4605      	mov	r5, r0
 8006d76:	460f      	mov	r7, r1
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d09e      	beq.n	8006cba <_strtod_l+0x9a2>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d84:	e79d      	b.n	8006cc2 <_strtod_l+0x9aa>
 8006d86:	2200      	movs	r2, #0
 8006d88:	4b28      	ldr	r3, [pc, #160]	; (8006e2c <_strtod_l+0xb14>)
 8006d8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d8e:	4f27      	ldr	r7, [pc, #156]	; (8006e2c <_strtod_l+0xb14>)
 8006d90:	e797      	b.n	8006cc2 <_strtod_l+0x9aa>
 8006d92:	2200      	movs	r2, #0
 8006d94:	4b29      	ldr	r3, [pc, #164]	; (8006e3c <_strtod_l+0xb24>)
 8006d96:	4645      	mov	r5, r8
 8006d98:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d9c:	e7f7      	b.n	8006d8e <_strtod_l+0xa76>
 8006d9e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8006da2:	9b05      	ldr	r3, [sp, #20]
 8006da4:	46ca      	mov	sl, r9
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1bc      	bne.n	8006d24 <_strtod_l+0xa0c>
 8006daa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006dae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006db0:	0d1b      	lsrs	r3, r3, #20
 8006db2:	051b      	lsls	r3, r3, #20
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d1b5      	bne.n	8006d24 <_strtod_l+0xa0c>
 8006db8:	4628      	mov	r0, r5
 8006dba:	4639      	mov	r1, r7
 8006dbc:	f7fa f9a8 	bl	8001110 <__aeabi_d2lz>
 8006dc0:	f7f9 fb5c 	bl	800047c <__aeabi_l2d>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	4628      	mov	r0, r5
 8006dca:	4639      	mov	r1, r7
 8006dcc:	f7f9 f9cc 	bl	8000168 <__aeabi_dsub>
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8006dd8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dde:	ea4a 0a08 	orr.w	sl, sl, r8
 8006de2:	ea5a 0a03 	orrs.w	sl, sl, r3
 8006de6:	d06c      	beq.n	8006ec2 <_strtod_l+0xbaa>
 8006de8:	a309      	add	r3, pc, #36	; (adr r3, 8006e10 <_strtod_l+0xaf8>)
 8006dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dee:	f7f9 fde5 	bl	80009bc <__aeabi_dcmplt>
 8006df2:	2800      	cmp	r0, #0
 8006df4:	f47f acd8 	bne.w	80067a8 <_strtod_l+0x490>
 8006df8:	a307      	add	r3, pc, #28	; (adr r3, 8006e18 <_strtod_l+0xb00>)
 8006dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e02:	f7f9 fdf9 	bl	80009f8 <__aeabi_dcmpgt>
 8006e06:	2800      	cmp	r0, #0
 8006e08:	d08c      	beq.n	8006d24 <_strtod_l+0xa0c>
 8006e0a:	e4cd      	b.n	80067a8 <_strtod_l+0x490>
 8006e0c:	f3af 8000 	nop.w
 8006e10:	94a03595 	.word	0x94a03595
 8006e14:	3fdfffff 	.word	0x3fdfffff
 8006e18:	35afe535 	.word	0x35afe535
 8006e1c:	3fe00000 	.word	0x3fe00000
 8006e20:	000fffff 	.word	0x000fffff
 8006e24:	7ff00000 	.word	0x7ff00000
 8006e28:	7fefffff 	.word	0x7fefffff
 8006e2c:	3ff00000 	.word	0x3ff00000
 8006e30:	3fe00000 	.word	0x3fe00000
 8006e34:	7fe00000 	.word	0x7fe00000
 8006e38:	7c9fffff 	.word	0x7c9fffff
 8006e3c:	bff00000 	.word	0xbff00000
 8006e40:	9b05      	ldr	r3, [sp, #20]
 8006e42:	b333      	cbz	r3, 8006e92 <_strtod_l+0xb7a>
 8006e44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006e4a:	d822      	bhi.n	8006e92 <_strtod_l+0xb7a>
 8006e4c:	a328      	add	r3, pc, #160	; (adr r3, 8006ef0 <_strtod_l+0xbd8>)
 8006e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e52:	4628      	mov	r0, r5
 8006e54:	4639      	mov	r1, r7
 8006e56:	f7f9 fdbb 	bl	80009d0 <__aeabi_dcmple>
 8006e5a:	b1a0      	cbz	r0, 8006e86 <_strtod_l+0xb6e>
 8006e5c:	4639      	mov	r1, r7
 8006e5e:	4628      	mov	r0, r5
 8006e60:	f7f9 fe12 	bl	8000a88 <__aeabi_d2uiz>
 8006e64:	2801      	cmp	r0, #1
 8006e66:	bf38      	it	cc
 8006e68:	2001      	movcc	r0, #1
 8006e6a:	f7f9 fabb 	bl	80003e4 <__aeabi_ui2d>
 8006e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e70:	4605      	mov	r5, r0
 8006e72:	460f      	mov	r7, r1
 8006e74:	bb03      	cbnz	r3, 8006eb8 <_strtod_l+0xba0>
 8006e76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e7a:	9014      	str	r0, [sp, #80]	; 0x50
 8006e7c:	9315      	str	r3, [sp, #84]	; 0x54
 8006e7e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006e82:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006e86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006e8a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006e8e:	1a9b      	subs	r3, r3, r2
 8006e90:	9311      	str	r3, [sp, #68]	; 0x44
 8006e92:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006e94:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006e96:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8006e9a:	f7ff f8e9 	bl	8006070 <__ulp>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	4640      	mov	r0, r8
 8006ea4:	4649      	mov	r1, r9
 8006ea6:	f7f9 fb17 	bl	80004d8 <__aeabi_dmul>
 8006eaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006eac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006eae:	f7f9 f95d 	bl	800016c <__adddf3>
 8006eb2:	4680      	mov	r8, r0
 8006eb4:	4689      	mov	r9, r1
 8006eb6:	e774      	b.n	8006da2 <_strtod_l+0xa8a>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	460b      	mov	r3, r1
 8006ebc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006ec0:	e7dd      	b.n	8006e7e <_strtod_l+0xb66>
 8006ec2:	a30d      	add	r3, pc, #52	; (adr r3, 8006ef8 <_strtod_l+0xbe0>)
 8006ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec8:	f7f9 fd78 	bl	80009bc <__aeabi_dcmplt>
 8006ecc:	e79b      	b.n	8006e06 <_strtod_l+0xaee>
 8006ece:	2300      	movs	r3, #0
 8006ed0:	930e      	str	r3, [sp, #56]	; 0x38
 8006ed2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ed4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006ed6:	6013      	str	r3, [r2, #0]
 8006ed8:	f7ff ba5b 	b.w	8006392 <_strtod_l+0x7a>
 8006edc:	2a65      	cmp	r2, #101	; 0x65
 8006ede:	f43f ab52 	beq.w	8006586 <_strtod_l+0x26e>
 8006ee2:	2a45      	cmp	r2, #69	; 0x45
 8006ee4:	f43f ab4f 	beq.w	8006586 <_strtod_l+0x26e>
 8006ee8:	2301      	movs	r3, #1
 8006eea:	f7ff bb87 	b.w	80065fc <_strtod_l+0x2e4>
 8006eee:	bf00      	nop
 8006ef0:	ffc00000 	.word	0xffc00000
 8006ef4:	41dfffff 	.word	0x41dfffff
 8006ef8:	94a03595 	.word	0x94a03595
 8006efc:	3fcfffff 	.word	0x3fcfffff

08006f00 <_strtod_r>:
 8006f00:	4b01      	ldr	r3, [pc, #4]	; (8006f08 <_strtod_r+0x8>)
 8006f02:	f7ff ba09 	b.w	8006318 <_strtod_l>
 8006f06:	bf00      	nop
 8006f08:	20000068 	.word	0x20000068

08006f0c <_strtol_l.constprop.0>:
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f12:	4686      	mov	lr, r0
 8006f14:	4690      	mov	r8, r2
 8006f16:	d001      	beq.n	8006f1c <_strtol_l.constprop.0+0x10>
 8006f18:	2b24      	cmp	r3, #36	; 0x24
 8006f1a:	d906      	bls.n	8006f2a <_strtol_l.constprop.0+0x1e>
 8006f1c:	f7fd fd90 	bl	8004a40 <__errno>
 8006f20:	2316      	movs	r3, #22
 8006f22:	6003      	str	r3, [r0, #0]
 8006f24:	2000      	movs	r0, #0
 8006f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f2a:	460d      	mov	r5, r1
 8006f2c:	4835      	ldr	r0, [pc, #212]	; (8007004 <_strtol_l.constprop.0+0xf8>)
 8006f2e:	462a      	mov	r2, r5
 8006f30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f34:	5d06      	ldrb	r6, [r0, r4]
 8006f36:	f016 0608 	ands.w	r6, r6, #8
 8006f3a:	d1f8      	bne.n	8006f2e <_strtol_l.constprop.0+0x22>
 8006f3c:	2c2d      	cmp	r4, #45	; 0x2d
 8006f3e:	d12e      	bne.n	8006f9e <_strtol_l.constprop.0+0x92>
 8006f40:	2601      	movs	r6, #1
 8006f42:	782c      	ldrb	r4, [r5, #0]
 8006f44:	1c95      	adds	r5, r2, #2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d057      	beq.n	8006ffa <_strtol_l.constprop.0+0xee>
 8006f4a:	2b10      	cmp	r3, #16
 8006f4c:	d109      	bne.n	8006f62 <_strtol_l.constprop.0+0x56>
 8006f4e:	2c30      	cmp	r4, #48	; 0x30
 8006f50:	d107      	bne.n	8006f62 <_strtol_l.constprop.0+0x56>
 8006f52:	782a      	ldrb	r2, [r5, #0]
 8006f54:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006f58:	2a58      	cmp	r2, #88	; 0x58
 8006f5a:	d149      	bne.n	8006ff0 <_strtol_l.constprop.0+0xe4>
 8006f5c:	2310      	movs	r3, #16
 8006f5e:	786c      	ldrb	r4, [r5, #1]
 8006f60:	3502      	adds	r5, #2
 8006f62:	2200      	movs	r2, #0
 8006f64:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8006f68:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006f6c:	fbbc f9f3 	udiv	r9, ip, r3
 8006f70:	4610      	mov	r0, r2
 8006f72:	fb03 ca19 	mls	sl, r3, r9, ip
 8006f76:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006f7a:	2f09      	cmp	r7, #9
 8006f7c:	d814      	bhi.n	8006fa8 <_strtol_l.constprop.0+0x9c>
 8006f7e:	463c      	mov	r4, r7
 8006f80:	42a3      	cmp	r3, r4
 8006f82:	dd20      	ble.n	8006fc6 <_strtol_l.constprop.0+0xba>
 8006f84:	1c57      	adds	r7, r2, #1
 8006f86:	d007      	beq.n	8006f98 <_strtol_l.constprop.0+0x8c>
 8006f88:	4581      	cmp	r9, r0
 8006f8a:	d319      	bcc.n	8006fc0 <_strtol_l.constprop.0+0xb4>
 8006f8c:	d101      	bne.n	8006f92 <_strtol_l.constprop.0+0x86>
 8006f8e:	45a2      	cmp	sl, r4
 8006f90:	db16      	blt.n	8006fc0 <_strtol_l.constprop.0+0xb4>
 8006f92:	2201      	movs	r2, #1
 8006f94:	fb00 4003 	mla	r0, r0, r3, r4
 8006f98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f9c:	e7eb      	b.n	8006f76 <_strtol_l.constprop.0+0x6a>
 8006f9e:	2c2b      	cmp	r4, #43	; 0x2b
 8006fa0:	bf04      	itt	eq
 8006fa2:	782c      	ldrbeq	r4, [r5, #0]
 8006fa4:	1c95      	addeq	r5, r2, #2
 8006fa6:	e7ce      	b.n	8006f46 <_strtol_l.constprop.0+0x3a>
 8006fa8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006fac:	2f19      	cmp	r7, #25
 8006fae:	d801      	bhi.n	8006fb4 <_strtol_l.constprop.0+0xa8>
 8006fb0:	3c37      	subs	r4, #55	; 0x37
 8006fb2:	e7e5      	b.n	8006f80 <_strtol_l.constprop.0+0x74>
 8006fb4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006fb8:	2f19      	cmp	r7, #25
 8006fba:	d804      	bhi.n	8006fc6 <_strtol_l.constprop.0+0xba>
 8006fbc:	3c57      	subs	r4, #87	; 0x57
 8006fbe:	e7df      	b.n	8006f80 <_strtol_l.constprop.0+0x74>
 8006fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8006fc4:	e7e8      	b.n	8006f98 <_strtol_l.constprop.0+0x8c>
 8006fc6:	1c53      	adds	r3, r2, #1
 8006fc8:	d108      	bne.n	8006fdc <_strtol_l.constprop.0+0xd0>
 8006fca:	2322      	movs	r3, #34	; 0x22
 8006fcc:	4660      	mov	r0, ip
 8006fce:	f8ce 3000 	str.w	r3, [lr]
 8006fd2:	f1b8 0f00 	cmp.w	r8, #0
 8006fd6:	d0a6      	beq.n	8006f26 <_strtol_l.constprop.0+0x1a>
 8006fd8:	1e69      	subs	r1, r5, #1
 8006fda:	e006      	b.n	8006fea <_strtol_l.constprop.0+0xde>
 8006fdc:	b106      	cbz	r6, 8006fe0 <_strtol_l.constprop.0+0xd4>
 8006fde:	4240      	negs	r0, r0
 8006fe0:	f1b8 0f00 	cmp.w	r8, #0
 8006fe4:	d09f      	beq.n	8006f26 <_strtol_l.constprop.0+0x1a>
 8006fe6:	2a00      	cmp	r2, #0
 8006fe8:	d1f6      	bne.n	8006fd8 <_strtol_l.constprop.0+0xcc>
 8006fea:	f8c8 1000 	str.w	r1, [r8]
 8006fee:	e79a      	b.n	8006f26 <_strtol_l.constprop.0+0x1a>
 8006ff0:	2430      	movs	r4, #48	; 0x30
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1b5      	bne.n	8006f62 <_strtol_l.constprop.0+0x56>
 8006ff6:	2308      	movs	r3, #8
 8006ff8:	e7b3      	b.n	8006f62 <_strtol_l.constprop.0+0x56>
 8006ffa:	2c30      	cmp	r4, #48	; 0x30
 8006ffc:	d0a9      	beq.n	8006f52 <_strtol_l.constprop.0+0x46>
 8006ffe:	230a      	movs	r3, #10
 8007000:	e7af      	b.n	8006f62 <_strtol_l.constprop.0+0x56>
 8007002:	bf00      	nop
 8007004:	080084a9 	.word	0x080084a9

08007008 <_strtol_r>:
 8007008:	f7ff bf80 	b.w	8006f0c <_strtol_l.constprop.0>

0800700c <__ssputs_r>:
 800700c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007010:	461f      	mov	r7, r3
 8007012:	688e      	ldr	r6, [r1, #8]
 8007014:	4682      	mov	sl, r0
 8007016:	42be      	cmp	r6, r7
 8007018:	460c      	mov	r4, r1
 800701a:	4690      	mov	r8, r2
 800701c:	680b      	ldr	r3, [r1, #0]
 800701e:	d82c      	bhi.n	800707a <__ssputs_r+0x6e>
 8007020:	898a      	ldrh	r2, [r1, #12]
 8007022:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007026:	d026      	beq.n	8007076 <__ssputs_r+0x6a>
 8007028:	6965      	ldr	r5, [r4, #20]
 800702a:	6909      	ldr	r1, [r1, #16]
 800702c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007030:	eba3 0901 	sub.w	r9, r3, r1
 8007034:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007038:	1c7b      	adds	r3, r7, #1
 800703a:	444b      	add	r3, r9
 800703c:	106d      	asrs	r5, r5, #1
 800703e:	429d      	cmp	r5, r3
 8007040:	bf38      	it	cc
 8007042:	461d      	movcc	r5, r3
 8007044:	0553      	lsls	r3, r2, #21
 8007046:	d527      	bpl.n	8007098 <__ssputs_r+0x8c>
 8007048:	4629      	mov	r1, r5
 800704a:	f7fe fc19 	bl	8005880 <_malloc_r>
 800704e:	4606      	mov	r6, r0
 8007050:	b360      	cbz	r0, 80070ac <__ssputs_r+0xa0>
 8007052:	464a      	mov	r2, r9
 8007054:	6921      	ldr	r1, [r4, #16]
 8007056:	f000 fa17 	bl	8007488 <memcpy>
 800705a:	89a3      	ldrh	r3, [r4, #12]
 800705c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007064:	81a3      	strh	r3, [r4, #12]
 8007066:	6126      	str	r6, [r4, #16]
 8007068:	444e      	add	r6, r9
 800706a:	6026      	str	r6, [r4, #0]
 800706c:	463e      	mov	r6, r7
 800706e:	6165      	str	r5, [r4, #20]
 8007070:	eba5 0509 	sub.w	r5, r5, r9
 8007074:	60a5      	str	r5, [r4, #8]
 8007076:	42be      	cmp	r6, r7
 8007078:	d900      	bls.n	800707c <__ssputs_r+0x70>
 800707a:	463e      	mov	r6, r7
 800707c:	4632      	mov	r2, r6
 800707e:	4641      	mov	r1, r8
 8007080:	6820      	ldr	r0, [r4, #0]
 8007082:	f000 f9c5 	bl	8007410 <memmove>
 8007086:	2000      	movs	r0, #0
 8007088:	68a3      	ldr	r3, [r4, #8]
 800708a:	1b9b      	subs	r3, r3, r6
 800708c:	60a3      	str	r3, [r4, #8]
 800708e:	6823      	ldr	r3, [r4, #0]
 8007090:	4433      	add	r3, r6
 8007092:	6023      	str	r3, [r4, #0]
 8007094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007098:	462a      	mov	r2, r5
 800709a:	f000 fda6 	bl	8007bea <_realloc_r>
 800709e:	4606      	mov	r6, r0
 80070a0:	2800      	cmp	r0, #0
 80070a2:	d1e0      	bne.n	8007066 <__ssputs_r+0x5a>
 80070a4:	4650      	mov	r0, sl
 80070a6:	6921      	ldr	r1, [r4, #16]
 80070a8:	f7fe fb7a 	bl	80057a0 <_free_r>
 80070ac:	230c      	movs	r3, #12
 80070ae:	f8ca 3000 	str.w	r3, [sl]
 80070b2:	89a3      	ldrh	r3, [r4, #12]
 80070b4:	f04f 30ff 	mov.w	r0, #4294967295
 80070b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070bc:	81a3      	strh	r3, [r4, #12]
 80070be:	e7e9      	b.n	8007094 <__ssputs_r+0x88>

080070c0 <_svfiprintf_r>:
 80070c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c4:	4698      	mov	r8, r3
 80070c6:	898b      	ldrh	r3, [r1, #12]
 80070c8:	4607      	mov	r7, r0
 80070ca:	061b      	lsls	r3, r3, #24
 80070cc:	460d      	mov	r5, r1
 80070ce:	4614      	mov	r4, r2
 80070d0:	b09d      	sub	sp, #116	; 0x74
 80070d2:	d50e      	bpl.n	80070f2 <_svfiprintf_r+0x32>
 80070d4:	690b      	ldr	r3, [r1, #16]
 80070d6:	b963      	cbnz	r3, 80070f2 <_svfiprintf_r+0x32>
 80070d8:	2140      	movs	r1, #64	; 0x40
 80070da:	f7fe fbd1 	bl	8005880 <_malloc_r>
 80070de:	6028      	str	r0, [r5, #0]
 80070e0:	6128      	str	r0, [r5, #16]
 80070e2:	b920      	cbnz	r0, 80070ee <_svfiprintf_r+0x2e>
 80070e4:	230c      	movs	r3, #12
 80070e6:	603b      	str	r3, [r7, #0]
 80070e8:	f04f 30ff 	mov.w	r0, #4294967295
 80070ec:	e0d0      	b.n	8007290 <_svfiprintf_r+0x1d0>
 80070ee:	2340      	movs	r3, #64	; 0x40
 80070f0:	616b      	str	r3, [r5, #20]
 80070f2:	2300      	movs	r3, #0
 80070f4:	9309      	str	r3, [sp, #36]	; 0x24
 80070f6:	2320      	movs	r3, #32
 80070f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070fc:	2330      	movs	r3, #48	; 0x30
 80070fe:	f04f 0901 	mov.w	r9, #1
 8007102:	f8cd 800c 	str.w	r8, [sp, #12]
 8007106:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80072a8 <_svfiprintf_r+0x1e8>
 800710a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800710e:	4623      	mov	r3, r4
 8007110:	469a      	mov	sl, r3
 8007112:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007116:	b10a      	cbz	r2, 800711c <_svfiprintf_r+0x5c>
 8007118:	2a25      	cmp	r2, #37	; 0x25
 800711a:	d1f9      	bne.n	8007110 <_svfiprintf_r+0x50>
 800711c:	ebba 0b04 	subs.w	fp, sl, r4
 8007120:	d00b      	beq.n	800713a <_svfiprintf_r+0x7a>
 8007122:	465b      	mov	r3, fp
 8007124:	4622      	mov	r2, r4
 8007126:	4629      	mov	r1, r5
 8007128:	4638      	mov	r0, r7
 800712a:	f7ff ff6f 	bl	800700c <__ssputs_r>
 800712e:	3001      	adds	r0, #1
 8007130:	f000 80a9 	beq.w	8007286 <_svfiprintf_r+0x1c6>
 8007134:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007136:	445a      	add	r2, fp
 8007138:	9209      	str	r2, [sp, #36]	; 0x24
 800713a:	f89a 3000 	ldrb.w	r3, [sl]
 800713e:	2b00      	cmp	r3, #0
 8007140:	f000 80a1 	beq.w	8007286 <_svfiprintf_r+0x1c6>
 8007144:	2300      	movs	r3, #0
 8007146:	f04f 32ff 	mov.w	r2, #4294967295
 800714a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800714e:	f10a 0a01 	add.w	sl, sl, #1
 8007152:	9304      	str	r3, [sp, #16]
 8007154:	9307      	str	r3, [sp, #28]
 8007156:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800715a:	931a      	str	r3, [sp, #104]	; 0x68
 800715c:	4654      	mov	r4, sl
 800715e:	2205      	movs	r2, #5
 8007160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007164:	4850      	ldr	r0, [pc, #320]	; (80072a8 <_svfiprintf_r+0x1e8>)
 8007166:	f7fd fc98 	bl	8004a9a <memchr>
 800716a:	9a04      	ldr	r2, [sp, #16]
 800716c:	b9d8      	cbnz	r0, 80071a6 <_svfiprintf_r+0xe6>
 800716e:	06d0      	lsls	r0, r2, #27
 8007170:	bf44      	itt	mi
 8007172:	2320      	movmi	r3, #32
 8007174:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007178:	0711      	lsls	r1, r2, #28
 800717a:	bf44      	itt	mi
 800717c:	232b      	movmi	r3, #43	; 0x2b
 800717e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007182:	f89a 3000 	ldrb.w	r3, [sl]
 8007186:	2b2a      	cmp	r3, #42	; 0x2a
 8007188:	d015      	beq.n	80071b6 <_svfiprintf_r+0xf6>
 800718a:	4654      	mov	r4, sl
 800718c:	2000      	movs	r0, #0
 800718e:	f04f 0c0a 	mov.w	ip, #10
 8007192:	9a07      	ldr	r2, [sp, #28]
 8007194:	4621      	mov	r1, r4
 8007196:	f811 3b01 	ldrb.w	r3, [r1], #1
 800719a:	3b30      	subs	r3, #48	; 0x30
 800719c:	2b09      	cmp	r3, #9
 800719e:	d94d      	bls.n	800723c <_svfiprintf_r+0x17c>
 80071a0:	b1b0      	cbz	r0, 80071d0 <_svfiprintf_r+0x110>
 80071a2:	9207      	str	r2, [sp, #28]
 80071a4:	e014      	b.n	80071d0 <_svfiprintf_r+0x110>
 80071a6:	eba0 0308 	sub.w	r3, r0, r8
 80071aa:	fa09 f303 	lsl.w	r3, r9, r3
 80071ae:	4313      	orrs	r3, r2
 80071b0:	46a2      	mov	sl, r4
 80071b2:	9304      	str	r3, [sp, #16]
 80071b4:	e7d2      	b.n	800715c <_svfiprintf_r+0x9c>
 80071b6:	9b03      	ldr	r3, [sp, #12]
 80071b8:	1d19      	adds	r1, r3, #4
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	9103      	str	r1, [sp, #12]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	bfbb      	ittet	lt
 80071c2:	425b      	neglt	r3, r3
 80071c4:	f042 0202 	orrlt.w	r2, r2, #2
 80071c8:	9307      	strge	r3, [sp, #28]
 80071ca:	9307      	strlt	r3, [sp, #28]
 80071cc:	bfb8      	it	lt
 80071ce:	9204      	strlt	r2, [sp, #16]
 80071d0:	7823      	ldrb	r3, [r4, #0]
 80071d2:	2b2e      	cmp	r3, #46	; 0x2e
 80071d4:	d10c      	bne.n	80071f0 <_svfiprintf_r+0x130>
 80071d6:	7863      	ldrb	r3, [r4, #1]
 80071d8:	2b2a      	cmp	r3, #42	; 0x2a
 80071da:	d134      	bne.n	8007246 <_svfiprintf_r+0x186>
 80071dc:	9b03      	ldr	r3, [sp, #12]
 80071de:	3402      	adds	r4, #2
 80071e0:	1d1a      	adds	r2, r3, #4
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	9203      	str	r2, [sp, #12]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	bfb8      	it	lt
 80071ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80071ee:	9305      	str	r3, [sp, #20]
 80071f0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80072ac <_svfiprintf_r+0x1ec>
 80071f4:	2203      	movs	r2, #3
 80071f6:	4650      	mov	r0, sl
 80071f8:	7821      	ldrb	r1, [r4, #0]
 80071fa:	f7fd fc4e 	bl	8004a9a <memchr>
 80071fe:	b138      	cbz	r0, 8007210 <_svfiprintf_r+0x150>
 8007200:	2240      	movs	r2, #64	; 0x40
 8007202:	9b04      	ldr	r3, [sp, #16]
 8007204:	eba0 000a 	sub.w	r0, r0, sl
 8007208:	4082      	lsls	r2, r0
 800720a:	4313      	orrs	r3, r2
 800720c:	3401      	adds	r4, #1
 800720e:	9304      	str	r3, [sp, #16]
 8007210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007214:	2206      	movs	r2, #6
 8007216:	4826      	ldr	r0, [pc, #152]	; (80072b0 <_svfiprintf_r+0x1f0>)
 8007218:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800721c:	f7fd fc3d 	bl	8004a9a <memchr>
 8007220:	2800      	cmp	r0, #0
 8007222:	d038      	beq.n	8007296 <_svfiprintf_r+0x1d6>
 8007224:	4b23      	ldr	r3, [pc, #140]	; (80072b4 <_svfiprintf_r+0x1f4>)
 8007226:	bb1b      	cbnz	r3, 8007270 <_svfiprintf_r+0x1b0>
 8007228:	9b03      	ldr	r3, [sp, #12]
 800722a:	3307      	adds	r3, #7
 800722c:	f023 0307 	bic.w	r3, r3, #7
 8007230:	3308      	adds	r3, #8
 8007232:	9303      	str	r3, [sp, #12]
 8007234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007236:	4433      	add	r3, r6
 8007238:	9309      	str	r3, [sp, #36]	; 0x24
 800723a:	e768      	b.n	800710e <_svfiprintf_r+0x4e>
 800723c:	460c      	mov	r4, r1
 800723e:	2001      	movs	r0, #1
 8007240:	fb0c 3202 	mla	r2, ip, r2, r3
 8007244:	e7a6      	b.n	8007194 <_svfiprintf_r+0xd4>
 8007246:	2300      	movs	r3, #0
 8007248:	f04f 0c0a 	mov.w	ip, #10
 800724c:	4619      	mov	r1, r3
 800724e:	3401      	adds	r4, #1
 8007250:	9305      	str	r3, [sp, #20]
 8007252:	4620      	mov	r0, r4
 8007254:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007258:	3a30      	subs	r2, #48	; 0x30
 800725a:	2a09      	cmp	r2, #9
 800725c:	d903      	bls.n	8007266 <_svfiprintf_r+0x1a6>
 800725e:	2b00      	cmp	r3, #0
 8007260:	d0c6      	beq.n	80071f0 <_svfiprintf_r+0x130>
 8007262:	9105      	str	r1, [sp, #20]
 8007264:	e7c4      	b.n	80071f0 <_svfiprintf_r+0x130>
 8007266:	4604      	mov	r4, r0
 8007268:	2301      	movs	r3, #1
 800726a:	fb0c 2101 	mla	r1, ip, r1, r2
 800726e:	e7f0      	b.n	8007252 <_svfiprintf_r+0x192>
 8007270:	ab03      	add	r3, sp, #12
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	462a      	mov	r2, r5
 8007276:	4638      	mov	r0, r7
 8007278:	4b0f      	ldr	r3, [pc, #60]	; (80072b8 <_svfiprintf_r+0x1f8>)
 800727a:	a904      	add	r1, sp, #16
 800727c:	f7fc fc98 	bl	8003bb0 <_printf_float>
 8007280:	1c42      	adds	r2, r0, #1
 8007282:	4606      	mov	r6, r0
 8007284:	d1d6      	bne.n	8007234 <_svfiprintf_r+0x174>
 8007286:	89ab      	ldrh	r3, [r5, #12]
 8007288:	065b      	lsls	r3, r3, #25
 800728a:	f53f af2d 	bmi.w	80070e8 <_svfiprintf_r+0x28>
 800728e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007290:	b01d      	add	sp, #116	; 0x74
 8007292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007296:	ab03      	add	r3, sp, #12
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	462a      	mov	r2, r5
 800729c:	4638      	mov	r0, r7
 800729e:	4b06      	ldr	r3, [pc, #24]	; (80072b8 <_svfiprintf_r+0x1f8>)
 80072a0:	a904      	add	r1, sp, #16
 80072a2:	f7fc ff25 	bl	80040f0 <_printf_i>
 80072a6:	e7eb      	b.n	8007280 <_svfiprintf_r+0x1c0>
 80072a8:	080085a9 	.word	0x080085a9
 80072ac:	080085af 	.word	0x080085af
 80072b0:	080085b3 	.word	0x080085b3
 80072b4:	08003bb1 	.word	0x08003bb1
 80072b8:	0800700d 	.word	0x0800700d

080072bc <__sflush_r>:
 80072bc:	898a      	ldrh	r2, [r1, #12]
 80072be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c0:	4605      	mov	r5, r0
 80072c2:	0710      	lsls	r0, r2, #28
 80072c4:	460c      	mov	r4, r1
 80072c6:	d457      	bmi.n	8007378 <__sflush_r+0xbc>
 80072c8:	684b      	ldr	r3, [r1, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	dc04      	bgt.n	80072d8 <__sflush_r+0x1c>
 80072ce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	dc01      	bgt.n	80072d8 <__sflush_r+0x1c>
 80072d4:	2000      	movs	r0, #0
 80072d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072da:	2e00      	cmp	r6, #0
 80072dc:	d0fa      	beq.n	80072d4 <__sflush_r+0x18>
 80072de:	2300      	movs	r3, #0
 80072e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072e4:	682f      	ldr	r7, [r5, #0]
 80072e6:	6a21      	ldr	r1, [r4, #32]
 80072e8:	602b      	str	r3, [r5, #0]
 80072ea:	d032      	beq.n	8007352 <__sflush_r+0x96>
 80072ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072ee:	89a3      	ldrh	r3, [r4, #12]
 80072f0:	075a      	lsls	r2, r3, #29
 80072f2:	d505      	bpl.n	8007300 <__sflush_r+0x44>
 80072f4:	6863      	ldr	r3, [r4, #4]
 80072f6:	1ac0      	subs	r0, r0, r3
 80072f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072fa:	b10b      	cbz	r3, 8007300 <__sflush_r+0x44>
 80072fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072fe:	1ac0      	subs	r0, r0, r3
 8007300:	2300      	movs	r3, #0
 8007302:	4602      	mov	r2, r0
 8007304:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007306:	4628      	mov	r0, r5
 8007308:	6a21      	ldr	r1, [r4, #32]
 800730a:	47b0      	blx	r6
 800730c:	1c43      	adds	r3, r0, #1
 800730e:	89a3      	ldrh	r3, [r4, #12]
 8007310:	d106      	bne.n	8007320 <__sflush_r+0x64>
 8007312:	6829      	ldr	r1, [r5, #0]
 8007314:	291d      	cmp	r1, #29
 8007316:	d82b      	bhi.n	8007370 <__sflush_r+0xb4>
 8007318:	4a28      	ldr	r2, [pc, #160]	; (80073bc <__sflush_r+0x100>)
 800731a:	410a      	asrs	r2, r1
 800731c:	07d6      	lsls	r6, r2, #31
 800731e:	d427      	bmi.n	8007370 <__sflush_r+0xb4>
 8007320:	2200      	movs	r2, #0
 8007322:	6062      	str	r2, [r4, #4]
 8007324:	6922      	ldr	r2, [r4, #16]
 8007326:	04d9      	lsls	r1, r3, #19
 8007328:	6022      	str	r2, [r4, #0]
 800732a:	d504      	bpl.n	8007336 <__sflush_r+0x7a>
 800732c:	1c42      	adds	r2, r0, #1
 800732e:	d101      	bne.n	8007334 <__sflush_r+0x78>
 8007330:	682b      	ldr	r3, [r5, #0]
 8007332:	b903      	cbnz	r3, 8007336 <__sflush_r+0x7a>
 8007334:	6560      	str	r0, [r4, #84]	; 0x54
 8007336:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007338:	602f      	str	r7, [r5, #0]
 800733a:	2900      	cmp	r1, #0
 800733c:	d0ca      	beq.n	80072d4 <__sflush_r+0x18>
 800733e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007342:	4299      	cmp	r1, r3
 8007344:	d002      	beq.n	800734c <__sflush_r+0x90>
 8007346:	4628      	mov	r0, r5
 8007348:	f7fe fa2a 	bl	80057a0 <_free_r>
 800734c:	2000      	movs	r0, #0
 800734e:	6360      	str	r0, [r4, #52]	; 0x34
 8007350:	e7c1      	b.n	80072d6 <__sflush_r+0x1a>
 8007352:	2301      	movs	r3, #1
 8007354:	4628      	mov	r0, r5
 8007356:	47b0      	blx	r6
 8007358:	1c41      	adds	r1, r0, #1
 800735a:	d1c8      	bne.n	80072ee <__sflush_r+0x32>
 800735c:	682b      	ldr	r3, [r5, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d0c5      	beq.n	80072ee <__sflush_r+0x32>
 8007362:	2b1d      	cmp	r3, #29
 8007364:	d001      	beq.n	800736a <__sflush_r+0xae>
 8007366:	2b16      	cmp	r3, #22
 8007368:	d101      	bne.n	800736e <__sflush_r+0xb2>
 800736a:	602f      	str	r7, [r5, #0]
 800736c:	e7b2      	b.n	80072d4 <__sflush_r+0x18>
 800736e:	89a3      	ldrh	r3, [r4, #12]
 8007370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007374:	81a3      	strh	r3, [r4, #12]
 8007376:	e7ae      	b.n	80072d6 <__sflush_r+0x1a>
 8007378:	690f      	ldr	r7, [r1, #16]
 800737a:	2f00      	cmp	r7, #0
 800737c:	d0aa      	beq.n	80072d4 <__sflush_r+0x18>
 800737e:	0793      	lsls	r3, r2, #30
 8007380:	bf18      	it	ne
 8007382:	2300      	movne	r3, #0
 8007384:	680e      	ldr	r6, [r1, #0]
 8007386:	bf08      	it	eq
 8007388:	694b      	ldreq	r3, [r1, #20]
 800738a:	1bf6      	subs	r6, r6, r7
 800738c:	600f      	str	r7, [r1, #0]
 800738e:	608b      	str	r3, [r1, #8]
 8007390:	2e00      	cmp	r6, #0
 8007392:	dd9f      	ble.n	80072d4 <__sflush_r+0x18>
 8007394:	4633      	mov	r3, r6
 8007396:	463a      	mov	r2, r7
 8007398:	4628      	mov	r0, r5
 800739a:	6a21      	ldr	r1, [r4, #32]
 800739c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80073a0:	47e0      	blx	ip
 80073a2:	2800      	cmp	r0, #0
 80073a4:	dc06      	bgt.n	80073b4 <__sflush_r+0xf8>
 80073a6:	89a3      	ldrh	r3, [r4, #12]
 80073a8:	f04f 30ff 	mov.w	r0, #4294967295
 80073ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073b0:	81a3      	strh	r3, [r4, #12]
 80073b2:	e790      	b.n	80072d6 <__sflush_r+0x1a>
 80073b4:	4407      	add	r7, r0
 80073b6:	1a36      	subs	r6, r6, r0
 80073b8:	e7ea      	b.n	8007390 <__sflush_r+0xd4>
 80073ba:	bf00      	nop
 80073bc:	dfbffffe 	.word	0xdfbffffe

080073c0 <_fflush_r>:
 80073c0:	b538      	push	{r3, r4, r5, lr}
 80073c2:	690b      	ldr	r3, [r1, #16]
 80073c4:	4605      	mov	r5, r0
 80073c6:	460c      	mov	r4, r1
 80073c8:	b913      	cbnz	r3, 80073d0 <_fflush_r+0x10>
 80073ca:	2500      	movs	r5, #0
 80073cc:	4628      	mov	r0, r5
 80073ce:	bd38      	pop	{r3, r4, r5, pc}
 80073d0:	b118      	cbz	r0, 80073da <_fflush_r+0x1a>
 80073d2:	6a03      	ldr	r3, [r0, #32]
 80073d4:	b90b      	cbnz	r3, 80073da <_fflush_r+0x1a>
 80073d6:	f7fd fa47 	bl	8004868 <__sinit>
 80073da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d0f3      	beq.n	80073ca <_fflush_r+0xa>
 80073e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80073e4:	07d0      	lsls	r0, r2, #31
 80073e6:	d404      	bmi.n	80073f2 <_fflush_r+0x32>
 80073e8:	0599      	lsls	r1, r3, #22
 80073ea:	d402      	bmi.n	80073f2 <_fflush_r+0x32>
 80073ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073ee:	f7fd fb52 	bl	8004a96 <__retarget_lock_acquire_recursive>
 80073f2:	4628      	mov	r0, r5
 80073f4:	4621      	mov	r1, r4
 80073f6:	f7ff ff61 	bl	80072bc <__sflush_r>
 80073fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073fc:	4605      	mov	r5, r0
 80073fe:	07da      	lsls	r2, r3, #31
 8007400:	d4e4      	bmi.n	80073cc <_fflush_r+0xc>
 8007402:	89a3      	ldrh	r3, [r4, #12]
 8007404:	059b      	lsls	r3, r3, #22
 8007406:	d4e1      	bmi.n	80073cc <_fflush_r+0xc>
 8007408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800740a:	f7fd fb45 	bl	8004a98 <__retarget_lock_release_recursive>
 800740e:	e7dd      	b.n	80073cc <_fflush_r+0xc>

08007410 <memmove>:
 8007410:	4288      	cmp	r0, r1
 8007412:	b510      	push	{r4, lr}
 8007414:	eb01 0402 	add.w	r4, r1, r2
 8007418:	d902      	bls.n	8007420 <memmove+0x10>
 800741a:	4284      	cmp	r4, r0
 800741c:	4623      	mov	r3, r4
 800741e:	d807      	bhi.n	8007430 <memmove+0x20>
 8007420:	1e43      	subs	r3, r0, #1
 8007422:	42a1      	cmp	r1, r4
 8007424:	d008      	beq.n	8007438 <memmove+0x28>
 8007426:	f811 2b01 	ldrb.w	r2, [r1], #1
 800742a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800742e:	e7f8      	b.n	8007422 <memmove+0x12>
 8007430:	4601      	mov	r1, r0
 8007432:	4402      	add	r2, r0
 8007434:	428a      	cmp	r2, r1
 8007436:	d100      	bne.n	800743a <memmove+0x2a>
 8007438:	bd10      	pop	{r4, pc}
 800743a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800743e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007442:	e7f7      	b.n	8007434 <memmove+0x24>

08007444 <strncmp>:
 8007444:	b510      	push	{r4, lr}
 8007446:	b16a      	cbz	r2, 8007464 <strncmp+0x20>
 8007448:	3901      	subs	r1, #1
 800744a:	1884      	adds	r4, r0, r2
 800744c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007450:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007454:	429a      	cmp	r2, r3
 8007456:	d103      	bne.n	8007460 <strncmp+0x1c>
 8007458:	42a0      	cmp	r0, r4
 800745a:	d001      	beq.n	8007460 <strncmp+0x1c>
 800745c:	2a00      	cmp	r2, #0
 800745e:	d1f5      	bne.n	800744c <strncmp+0x8>
 8007460:	1ad0      	subs	r0, r2, r3
 8007462:	bd10      	pop	{r4, pc}
 8007464:	4610      	mov	r0, r2
 8007466:	e7fc      	b.n	8007462 <strncmp+0x1e>

08007468 <_sbrk_r>:
 8007468:	b538      	push	{r3, r4, r5, lr}
 800746a:	2300      	movs	r3, #0
 800746c:	4d05      	ldr	r5, [pc, #20]	; (8007484 <_sbrk_r+0x1c>)
 800746e:	4604      	mov	r4, r0
 8007470:	4608      	mov	r0, r1
 8007472:	602b      	str	r3, [r5, #0]
 8007474:	f7fa fa16 	bl	80018a4 <_sbrk>
 8007478:	1c43      	adds	r3, r0, #1
 800747a:	d102      	bne.n	8007482 <_sbrk_r+0x1a>
 800747c:	682b      	ldr	r3, [r5, #0]
 800747e:	b103      	cbz	r3, 8007482 <_sbrk_r+0x1a>
 8007480:	6023      	str	r3, [r4, #0]
 8007482:	bd38      	pop	{r3, r4, r5, pc}
 8007484:	20000454 	.word	0x20000454

08007488 <memcpy>:
 8007488:	440a      	add	r2, r1
 800748a:	4291      	cmp	r1, r2
 800748c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007490:	d100      	bne.n	8007494 <memcpy+0xc>
 8007492:	4770      	bx	lr
 8007494:	b510      	push	{r4, lr}
 8007496:	f811 4b01 	ldrb.w	r4, [r1], #1
 800749a:	4291      	cmp	r1, r2
 800749c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074a0:	d1f9      	bne.n	8007496 <memcpy+0xe>
 80074a2:	bd10      	pop	{r4, pc}

080074a4 <nan>:
 80074a4:	2000      	movs	r0, #0
 80074a6:	4901      	ldr	r1, [pc, #4]	; (80074ac <nan+0x8>)
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	7ff80000 	.word	0x7ff80000

080074b0 <__assert_func>:
 80074b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074b2:	4614      	mov	r4, r2
 80074b4:	461a      	mov	r2, r3
 80074b6:	4b09      	ldr	r3, [pc, #36]	; (80074dc <__assert_func+0x2c>)
 80074b8:	4605      	mov	r5, r0
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68d8      	ldr	r0, [r3, #12]
 80074be:	b14c      	cbz	r4, 80074d4 <__assert_func+0x24>
 80074c0:	4b07      	ldr	r3, [pc, #28]	; (80074e0 <__assert_func+0x30>)
 80074c2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80074c6:	9100      	str	r1, [sp, #0]
 80074c8:	462b      	mov	r3, r5
 80074ca:	4906      	ldr	r1, [pc, #24]	; (80074e4 <__assert_func+0x34>)
 80074cc:	f000 fbca 	bl	8007c64 <fiprintf>
 80074d0:	f000 fbda 	bl	8007c88 <abort>
 80074d4:	4b04      	ldr	r3, [pc, #16]	; (80074e8 <__assert_func+0x38>)
 80074d6:	461c      	mov	r4, r3
 80074d8:	e7f3      	b.n	80074c2 <__assert_func+0x12>
 80074da:	bf00      	nop
 80074dc:	20000064 	.word	0x20000064
 80074e0:	080085c2 	.word	0x080085c2
 80074e4:	080085cf 	.word	0x080085cf
 80074e8:	080085fd 	.word	0x080085fd

080074ec <_calloc_r>:
 80074ec:	b570      	push	{r4, r5, r6, lr}
 80074ee:	fba1 5402 	umull	r5, r4, r1, r2
 80074f2:	b934      	cbnz	r4, 8007502 <_calloc_r+0x16>
 80074f4:	4629      	mov	r1, r5
 80074f6:	f7fe f9c3 	bl	8005880 <_malloc_r>
 80074fa:	4606      	mov	r6, r0
 80074fc:	b928      	cbnz	r0, 800750a <_calloc_r+0x1e>
 80074fe:	4630      	mov	r0, r6
 8007500:	bd70      	pop	{r4, r5, r6, pc}
 8007502:	220c      	movs	r2, #12
 8007504:	2600      	movs	r6, #0
 8007506:	6002      	str	r2, [r0, #0]
 8007508:	e7f9      	b.n	80074fe <_calloc_r+0x12>
 800750a:	462a      	mov	r2, r5
 800750c:	4621      	mov	r1, r4
 800750e:	f7fd fa44 	bl	800499a <memset>
 8007512:	e7f4      	b.n	80074fe <_calloc_r+0x12>

08007514 <rshift>:
 8007514:	6903      	ldr	r3, [r0, #16]
 8007516:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800751a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800751e:	f100 0414 	add.w	r4, r0, #20
 8007522:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007526:	dd46      	ble.n	80075b6 <rshift+0xa2>
 8007528:	f011 011f 	ands.w	r1, r1, #31
 800752c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007530:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007534:	d10c      	bne.n	8007550 <rshift+0x3c>
 8007536:	4629      	mov	r1, r5
 8007538:	f100 0710 	add.w	r7, r0, #16
 800753c:	42b1      	cmp	r1, r6
 800753e:	d335      	bcc.n	80075ac <rshift+0x98>
 8007540:	1a9b      	subs	r3, r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	1eea      	subs	r2, r5, #3
 8007546:	4296      	cmp	r6, r2
 8007548:	bf38      	it	cc
 800754a:	2300      	movcc	r3, #0
 800754c:	4423      	add	r3, r4
 800754e:	e015      	b.n	800757c <rshift+0x68>
 8007550:	46a1      	mov	r9, r4
 8007552:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007556:	f1c1 0820 	rsb	r8, r1, #32
 800755a:	40cf      	lsrs	r7, r1
 800755c:	f105 0e04 	add.w	lr, r5, #4
 8007560:	4576      	cmp	r6, lr
 8007562:	46f4      	mov	ip, lr
 8007564:	d816      	bhi.n	8007594 <rshift+0x80>
 8007566:	1a9a      	subs	r2, r3, r2
 8007568:	0092      	lsls	r2, r2, #2
 800756a:	3a04      	subs	r2, #4
 800756c:	3501      	adds	r5, #1
 800756e:	42ae      	cmp	r6, r5
 8007570:	bf38      	it	cc
 8007572:	2200      	movcc	r2, #0
 8007574:	18a3      	adds	r3, r4, r2
 8007576:	50a7      	str	r7, [r4, r2]
 8007578:	b107      	cbz	r7, 800757c <rshift+0x68>
 800757a:	3304      	adds	r3, #4
 800757c:	42a3      	cmp	r3, r4
 800757e:	eba3 0204 	sub.w	r2, r3, r4
 8007582:	bf08      	it	eq
 8007584:	2300      	moveq	r3, #0
 8007586:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800758a:	6102      	str	r2, [r0, #16]
 800758c:	bf08      	it	eq
 800758e:	6143      	streq	r3, [r0, #20]
 8007590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007594:	f8dc c000 	ldr.w	ip, [ip]
 8007598:	fa0c fc08 	lsl.w	ip, ip, r8
 800759c:	ea4c 0707 	orr.w	r7, ip, r7
 80075a0:	f849 7b04 	str.w	r7, [r9], #4
 80075a4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80075a8:	40cf      	lsrs	r7, r1
 80075aa:	e7d9      	b.n	8007560 <rshift+0x4c>
 80075ac:	f851 cb04 	ldr.w	ip, [r1], #4
 80075b0:	f847 cf04 	str.w	ip, [r7, #4]!
 80075b4:	e7c2      	b.n	800753c <rshift+0x28>
 80075b6:	4623      	mov	r3, r4
 80075b8:	e7e0      	b.n	800757c <rshift+0x68>

080075ba <__hexdig_fun>:
 80075ba:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80075be:	2b09      	cmp	r3, #9
 80075c0:	d802      	bhi.n	80075c8 <__hexdig_fun+0xe>
 80075c2:	3820      	subs	r0, #32
 80075c4:	b2c0      	uxtb	r0, r0
 80075c6:	4770      	bx	lr
 80075c8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80075cc:	2b05      	cmp	r3, #5
 80075ce:	d801      	bhi.n	80075d4 <__hexdig_fun+0x1a>
 80075d0:	3847      	subs	r0, #71	; 0x47
 80075d2:	e7f7      	b.n	80075c4 <__hexdig_fun+0xa>
 80075d4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80075d8:	2b05      	cmp	r3, #5
 80075da:	d801      	bhi.n	80075e0 <__hexdig_fun+0x26>
 80075dc:	3827      	subs	r0, #39	; 0x27
 80075de:	e7f1      	b.n	80075c4 <__hexdig_fun+0xa>
 80075e0:	2000      	movs	r0, #0
 80075e2:	4770      	bx	lr

080075e4 <__gethex>:
 80075e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e8:	4681      	mov	r9, r0
 80075ea:	468a      	mov	sl, r1
 80075ec:	4617      	mov	r7, r2
 80075ee:	680a      	ldr	r2, [r1, #0]
 80075f0:	b085      	sub	sp, #20
 80075f2:	f102 0b02 	add.w	fp, r2, #2
 80075f6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80075fa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80075fe:	9302      	str	r3, [sp, #8]
 8007600:	32fe      	adds	r2, #254	; 0xfe
 8007602:	eb02 030b 	add.w	r3, r2, fp
 8007606:	46d8      	mov	r8, fp
 8007608:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800760c:	9301      	str	r3, [sp, #4]
 800760e:	2830      	cmp	r0, #48	; 0x30
 8007610:	d0f7      	beq.n	8007602 <__gethex+0x1e>
 8007612:	f7ff ffd2 	bl	80075ba <__hexdig_fun>
 8007616:	4604      	mov	r4, r0
 8007618:	2800      	cmp	r0, #0
 800761a:	d138      	bne.n	800768e <__gethex+0xaa>
 800761c:	2201      	movs	r2, #1
 800761e:	4640      	mov	r0, r8
 8007620:	49a7      	ldr	r1, [pc, #668]	; (80078c0 <__gethex+0x2dc>)
 8007622:	f7ff ff0f 	bl	8007444 <strncmp>
 8007626:	4606      	mov	r6, r0
 8007628:	2800      	cmp	r0, #0
 800762a:	d169      	bne.n	8007700 <__gethex+0x11c>
 800762c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007630:	465d      	mov	r5, fp
 8007632:	f7ff ffc2 	bl	80075ba <__hexdig_fun>
 8007636:	2800      	cmp	r0, #0
 8007638:	d064      	beq.n	8007704 <__gethex+0x120>
 800763a:	465a      	mov	r2, fp
 800763c:	7810      	ldrb	r0, [r2, #0]
 800763e:	4690      	mov	r8, r2
 8007640:	2830      	cmp	r0, #48	; 0x30
 8007642:	f102 0201 	add.w	r2, r2, #1
 8007646:	d0f9      	beq.n	800763c <__gethex+0x58>
 8007648:	f7ff ffb7 	bl	80075ba <__hexdig_fun>
 800764c:	2301      	movs	r3, #1
 800764e:	fab0 f480 	clz	r4, r0
 8007652:	465e      	mov	r6, fp
 8007654:	0964      	lsrs	r4, r4, #5
 8007656:	9301      	str	r3, [sp, #4]
 8007658:	4642      	mov	r2, r8
 800765a:	4615      	mov	r5, r2
 800765c:	7828      	ldrb	r0, [r5, #0]
 800765e:	3201      	adds	r2, #1
 8007660:	f7ff ffab 	bl	80075ba <__hexdig_fun>
 8007664:	2800      	cmp	r0, #0
 8007666:	d1f8      	bne.n	800765a <__gethex+0x76>
 8007668:	2201      	movs	r2, #1
 800766a:	4628      	mov	r0, r5
 800766c:	4994      	ldr	r1, [pc, #592]	; (80078c0 <__gethex+0x2dc>)
 800766e:	f7ff fee9 	bl	8007444 <strncmp>
 8007672:	b978      	cbnz	r0, 8007694 <__gethex+0xb0>
 8007674:	b946      	cbnz	r6, 8007688 <__gethex+0xa4>
 8007676:	1c6e      	adds	r6, r5, #1
 8007678:	4632      	mov	r2, r6
 800767a:	4615      	mov	r5, r2
 800767c:	7828      	ldrb	r0, [r5, #0]
 800767e:	3201      	adds	r2, #1
 8007680:	f7ff ff9b 	bl	80075ba <__hexdig_fun>
 8007684:	2800      	cmp	r0, #0
 8007686:	d1f8      	bne.n	800767a <__gethex+0x96>
 8007688:	1b73      	subs	r3, r6, r5
 800768a:	009e      	lsls	r6, r3, #2
 800768c:	e004      	b.n	8007698 <__gethex+0xb4>
 800768e:	2400      	movs	r4, #0
 8007690:	4626      	mov	r6, r4
 8007692:	e7e1      	b.n	8007658 <__gethex+0x74>
 8007694:	2e00      	cmp	r6, #0
 8007696:	d1f7      	bne.n	8007688 <__gethex+0xa4>
 8007698:	782b      	ldrb	r3, [r5, #0]
 800769a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800769e:	2b50      	cmp	r3, #80	; 0x50
 80076a0:	d13d      	bne.n	800771e <__gethex+0x13a>
 80076a2:	786b      	ldrb	r3, [r5, #1]
 80076a4:	2b2b      	cmp	r3, #43	; 0x2b
 80076a6:	d02f      	beq.n	8007708 <__gethex+0x124>
 80076a8:	2b2d      	cmp	r3, #45	; 0x2d
 80076aa:	d031      	beq.n	8007710 <__gethex+0x12c>
 80076ac:	f04f 0b00 	mov.w	fp, #0
 80076b0:	1c69      	adds	r1, r5, #1
 80076b2:	7808      	ldrb	r0, [r1, #0]
 80076b4:	f7ff ff81 	bl	80075ba <__hexdig_fun>
 80076b8:	1e42      	subs	r2, r0, #1
 80076ba:	b2d2      	uxtb	r2, r2
 80076bc:	2a18      	cmp	r2, #24
 80076be:	d82e      	bhi.n	800771e <__gethex+0x13a>
 80076c0:	f1a0 0210 	sub.w	r2, r0, #16
 80076c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80076c8:	f7ff ff77 	bl	80075ba <__hexdig_fun>
 80076cc:	f100 3cff 	add.w	ip, r0, #4294967295
 80076d0:	fa5f fc8c 	uxtb.w	ip, ip
 80076d4:	f1bc 0f18 	cmp.w	ip, #24
 80076d8:	d91d      	bls.n	8007716 <__gethex+0x132>
 80076da:	f1bb 0f00 	cmp.w	fp, #0
 80076de:	d000      	beq.n	80076e2 <__gethex+0xfe>
 80076e0:	4252      	negs	r2, r2
 80076e2:	4416      	add	r6, r2
 80076e4:	f8ca 1000 	str.w	r1, [sl]
 80076e8:	b1dc      	cbz	r4, 8007722 <__gethex+0x13e>
 80076ea:	9b01      	ldr	r3, [sp, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	bf14      	ite	ne
 80076f0:	f04f 0800 	movne.w	r8, #0
 80076f4:	f04f 0806 	moveq.w	r8, #6
 80076f8:	4640      	mov	r0, r8
 80076fa:	b005      	add	sp, #20
 80076fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007700:	4645      	mov	r5, r8
 8007702:	4626      	mov	r6, r4
 8007704:	2401      	movs	r4, #1
 8007706:	e7c7      	b.n	8007698 <__gethex+0xb4>
 8007708:	f04f 0b00 	mov.w	fp, #0
 800770c:	1ca9      	adds	r1, r5, #2
 800770e:	e7d0      	b.n	80076b2 <__gethex+0xce>
 8007710:	f04f 0b01 	mov.w	fp, #1
 8007714:	e7fa      	b.n	800770c <__gethex+0x128>
 8007716:	230a      	movs	r3, #10
 8007718:	fb03 0002 	mla	r0, r3, r2, r0
 800771c:	e7d0      	b.n	80076c0 <__gethex+0xdc>
 800771e:	4629      	mov	r1, r5
 8007720:	e7e0      	b.n	80076e4 <__gethex+0x100>
 8007722:	4621      	mov	r1, r4
 8007724:	eba5 0308 	sub.w	r3, r5, r8
 8007728:	3b01      	subs	r3, #1
 800772a:	2b07      	cmp	r3, #7
 800772c:	dc0a      	bgt.n	8007744 <__gethex+0x160>
 800772e:	4648      	mov	r0, r9
 8007730:	f7fe f932 	bl	8005998 <_Balloc>
 8007734:	4604      	mov	r4, r0
 8007736:	b940      	cbnz	r0, 800774a <__gethex+0x166>
 8007738:	4602      	mov	r2, r0
 800773a:	21e4      	movs	r1, #228	; 0xe4
 800773c:	4b61      	ldr	r3, [pc, #388]	; (80078c4 <__gethex+0x2e0>)
 800773e:	4862      	ldr	r0, [pc, #392]	; (80078c8 <__gethex+0x2e4>)
 8007740:	f7ff feb6 	bl	80074b0 <__assert_func>
 8007744:	3101      	adds	r1, #1
 8007746:	105b      	asrs	r3, r3, #1
 8007748:	e7ef      	b.n	800772a <__gethex+0x146>
 800774a:	2300      	movs	r3, #0
 800774c:	469b      	mov	fp, r3
 800774e:	f100 0a14 	add.w	sl, r0, #20
 8007752:	f8cd a004 	str.w	sl, [sp, #4]
 8007756:	45a8      	cmp	r8, r5
 8007758:	d344      	bcc.n	80077e4 <__gethex+0x200>
 800775a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800775e:	4658      	mov	r0, fp
 8007760:	f848 bb04 	str.w	fp, [r8], #4
 8007764:	eba8 080a 	sub.w	r8, r8, sl
 8007768:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800776c:	6122      	str	r2, [r4, #16]
 800776e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8007772:	f7fe fa03 	bl	8005b7c <__hi0bits>
 8007776:	683d      	ldr	r5, [r7, #0]
 8007778:	eba8 0800 	sub.w	r8, r8, r0
 800777c:	45a8      	cmp	r8, r5
 800777e:	dd59      	ble.n	8007834 <__gethex+0x250>
 8007780:	eba8 0805 	sub.w	r8, r8, r5
 8007784:	4641      	mov	r1, r8
 8007786:	4620      	mov	r0, r4
 8007788:	f7fe fd81 	bl	800628e <__any_on>
 800778c:	4683      	mov	fp, r0
 800778e:	b1b8      	cbz	r0, 80077c0 <__gethex+0x1dc>
 8007790:	f04f 0b01 	mov.w	fp, #1
 8007794:	f108 33ff 	add.w	r3, r8, #4294967295
 8007798:	1159      	asrs	r1, r3, #5
 800779a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800779e:	f003 021f 	and.w	r2, r3, #31
 80077a2:	fa0b f202 	lsl.w	r2, fp, r2
 80077a6:	420a      	tst	r2, r1
 80077a8:	d00a      	beq.n	80077c0 <__gethex+0x1dc>
 80077aa:	455b      	cmp	r3, fp
 80077ac:	dd06      	ble.n	80077bc <__gethex+0x1d8>
 80077ae:	4620      	mov	r0, r4
 80077b0:	f1a8 0102 	sub.w	r1, r8, #2
 80077b4:	f7fe fd6b 	bl	800628e <__any_on>
 80077b8:	2800      	cmp	r0, #0
 80077ba:	d138      	bne.n	800782e <__gethex+0x24a>
 80077bc:	f04f 0b02 	mov.w	fp, #2
 80077c0:	4641      	mov	r1, r8
 80077c2:	4620      	mov	r0, r4
 80077c4:	f7ff fea6 	bl	8007514 <rshift>
 80077c8:	4446      	add	r6, r8
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	42b3      	cmp	r3, r6
 80077ce:	da41      	bge.n	8007854 <__gethex+0x270>
 80077d0:	4621      	mov	r1, r4
 80077d2:	4648      	mov	r0, r9
 80077d4:	f7fe f920 	bl	8005a18 <_Bfree>
 80077d8:	2300      	movs	r3, #0
 80077da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077dc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80077e0:	6013      	str	r3, [r2, #0]
 80077e2:	e789      	b.n	80076f8 <__gethex+0x114>
 80077e4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80077e8:	2a2e      	cmp	r2, #46	; 0x2e
 80077ea:	d014      	beq.n	8007816 <__gethex+0x232>
 80077ec:	2b20      	cmp	r3, #32
 80077ee:	d106      	bne.n	80077fe <__gethex+0x21a>
 80077f0:	9b01      	ldr	r3, [sp, #4]
 80077f2:	f843 bb04 	str.w	fp, [r3], #4
 80077f6:	f04f 0b00 	mov.w	fp, #0
 80077fa:	9301      	str	r3, [sp, #4]
 80077fc:	465b      	mov	r3, fp
 80077fe:	7828      	ldrb	r0, [r5, #0]
 8007800:	9303      	str	r3, [sp, #12]
 8007802:	f7ff feda 	bl	80075ba <__hexdig_fun>
 8007806:	9b03      	ldr	r3, [sp, #12]
 8007808:	f000 000f 	and.w	r0, r0, #15
 800780c:	4098      	lsls	r0, r3
 800780e:	ea4b 0b00 	orr.w	fp, fp, r0
 8007812:	3304      	adds	r3, #4
 8007814:	e79f      	b.n	8007756 <__gethex+0x172>
 8007816:	45a8      	cmp	r8, r5
 8007818:	d8e8      	bhi.n	80077ec <__gethex+0x208>
 800781a:	2201      	movs	r2, #1
 800781c:	4628      	mov	r0, r5
 800781e:	4928      	ldr	r1, [pc, #160]	; (80078c0 <__gethex+0x2dc>)
 8007820:	9303      	str	r3, [sp, #12]
 8007822:	f7ff fe0f 	bl	8007444 <strncmp>
 8007826:	9b03      	ldr	r3, [sp, #12]
 8007828:	2800      	cmp	r0, #0
 800782a:	d1df      	bne.n	80077ec <__gethex+0x208>
 800782c:	e793      	b.n	8007756 <__gethex+0x172>
 800782e:	f04f 0b03 	mov.w	fp, #3
 8007832:	e7c5      	b.n	80077c0 <__gethex+0x1dc>
 8007834:	da0b      	bge.n	800784e <__gethex+0x26a>
 8007836:	eba5 0808 	sub.w	r8, r5, r8
 800783a:	4621      	mov	r1, r4
 800783c:	4642      	mov	r2, r8
 800783e:	4648      	mov	r0, r9
 8007840:	f7fe fb02 	bl	8005e48 <__lshift>
 8007844:	4604      	mov	r4, r0
 8007846:	eba6 0608 	sub.w	r6, r6, r8
 800784a:	f100 0a14 	add.w	sl, r0, #20
 800784e:	f04f 0b00 	mov.w	fp, #0
 8007852:	e7ba      	b.n	80077ca <__gethex+0x1e6>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	42b3      	cmp	r3, r6
 8007858:	dd74      	ble.n	8007944 <__gethex+0x360>
 800785a:	1b9e      	subs	r6, r3, r6
 800785c:	42b5      	cmp	r5, r6
 800785e:	dc35      	bgt.n	80078cc <__gethex+0x2e8>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2b02      	cmp	r3, #2
 8007864:	d023      	beq.n	80078ae <__gethex+0x2ca>
 8007866:	2b03      	cmp	r3, #3
 8007868:	d025      	beq.n	80078b6 <__gethex+0x2d2>
 800786a:	2b01      	cmp	r3, #1
 800786c:	d115      	bne.n	800789a <__gethex+0x2b6>
 800786e:	42b5      	cmp	r5, r6
 8007870:	d113      	bne.n	800789a <__gethex+0x2b6>
 8007872:	2d01      	cmp	r5, #1
 8007874:	d10b      	bne.n	800788e <__gethex+0x2aa>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	9a02      	ldr	r2, [sp, #8]
 800787a:	f04f 0862 	mov.w	r8, #98	; 0x62
 800787e:	6013      	str	r3, [r2, #0]
 8007880:	2301      	movs	r3, #1
 8007882:	6123      	str	r3, [r4, #16]
 8007884:	f8ca 3000 	str.w	r3, [sl]
 8007888:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800788a:	601c      	str	r4, [r3, #0]
 800788c:	e734      	b.n	80076f8 <__gethex+0x114>
 800788e:	4620      	mov	r0, r4
 8007890:	1e69      	subs	r1, r5, #1
 8007892:	f7fe fcfc 	bl	800628e <__any_on>
 8007896:	2800      	cmp	r0, #0
 8007898:	d1ed      	bne.n	8007876 <__gethex+0x292>
 800789a:	4621      	mov	r1, r4
 800789c:	4648      	mov	r0, r9
 800789e:	f7fe f8bb 	bl	8005a18 <_Bfree>
 80078a2:	2300      	movs	r3, #0
 80078a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078a6:	f04f 0850 	mov.w	r8, #80	; 0x50
 80078aa:	6013      	str	r3, [r2, #0]
 80078ac:	e724      	b.n	80076f8 <__gethex+0x114>
 80078ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1f2      	bne.n	800789a <__gethex+0x2b6>
 80078b4:	e7df      	b.n	8007876 <__gethex+0x292>
 80078b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1dc      	bne.n	8007876 <__gethex+0x292>
 80078bc:	e7ed      	b.n	800789a <__gethex+0x2b6>
 80078be:	bf00      	nop
 80078c0:	08008454 	.word	0x08008454
 80078c4:	080082e7 	.word	0x080082e7
 80078c8:	080085fe 	.word	0x080085fe
 80078cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80078d0:	f1bb 0f00 	cmp.w	fp, #0
 80078d4:	d133      	bne.n	800793e <__gethex+0x35a>
 80078d6:	f1b8 0f00 	cmp.w	r8, #0
 80078da:	d004      	beq.n	80078e6 <__gethex+0x302>
 80078dc:	4641      	mov	r1, r8
 80078de:	4620      	mov	r0, r4
 80078e0:	f7fe fcd5 	bl	800628e <__any_on>
 80078e4:	4683      	mov	fp, r0
 80078e6:	2301      	movs	r3, #1
 80078e8:	ea4f 1268 	mov.w	r2, r8, asr #5
 80078ec:	f008 081f 	and.w	r8, r8, #31
 80078f0:	fa03 f308 	lsl.w	r3, r3, r8
 80078f4:	f04f 0802 	mov.w	r8, #2
 80078f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80078fc:	4631      	mov	r1, r6
 80078fe:	4213      	tst	r3, r2
 8007900:	4620      	mov	r0, r4
 8007902:	bf18      	it	ne
 8007904:	f04b 0b02 	orrne.w	fp, fp, #2
 8007908:	1bad      	subs	r5, r5, r6
 800790a:	f7ff fe03 	bl	8007514 <rshift>
 800790e:	687e      	ldr	r6, [r7, #4]
 8007910:	f1bb 0f00 	cmp.w	fp, #0
 8007914:	d04a      	beq.n	80079ac <__gethex+0x3c8>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2b02      	cmp	r3, #2
 800791a:	d016      	beq.n	800794a <__gethex+0x366>
 800791c:	2b03      	cmp	r3, #3
 800791e:	d018      	beq.n	8007952 <__gethex+0x36e>
 8007920:	2b01      	cmp	r3, #1
 8007922:	d109      	bne.n	8007938 <__gethex+0x354>
 8007924:	f01b 0f02 	tst.w	fp, #2
 8007928:	d006      	beq.n	8007938 <__gethex+0x354>
 800792a:	f8da 3000 	ldr.w	r3, [sl]
 800792e:	ea4b 0b03 	orr.w	fp, fp, r3
 8007932:	f01b 0f01 	tst.w	fp, #1
 8007936:	d10f      	bne.n	8007958 <__gethex+0x374>
 8007938:	f048 0810 	orr.w	r8, r8, #16
 800793c:	e036      	b.n	80079ac <__gethex+0x3c8>
 800793e:	f04f 0b01 	mov.w	fp, #1
 8007942:	e7d0      	b.n	80078e6 <__gethex+0x302>
 8007944:	f04f 0801 	mov.w	r8, #1
 8007948:	e7e2      	b.n	8007910 <__gethex+0x32c>
 800794a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800794c:	f1c3 0301 	rsb	r3, r3, #1
 8007950:	930f      	str	r3, [sp, #60]	; 0x3c
 8007952:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007954:	2b00      	cmp	r3, #0
 8007956:	d0ef      	beq.n	8007938 <__gethex+0x354>
 8007958:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800795c:	f104 0214 	add.w	r2, r4, #20
 8007960:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007964:	9301      	str	r3, [sp, #4]
 8007966:	2300      	movs	r3, #0
 8007968:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800796c:	4694      	mov	ip, r2
 800796e:	f852 1b04 	ldr.w	r1, [r2], #4
 8007972:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007976:	d01e      	beq.n	80079b6 <__gethex+0x3d2>
 8007978:	3101      	adds	r1, #1
 800797a:	f8cc 1000 	str.w	r1, [ip]
 800797e:	f1b8 0f02 	cmp.w	r8, #2
 8007982:	f104 0214 	add.w	r2, r4, #20
 8007986:	d13d      	bne.n	8007a04 <__gethex+0x420>
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	3b01      	subs	r3, #1
 800798c:	42ab      	cmp	r3, r5
 800798e:	d10b      	bne.n	80079a8 <__gethex+0x3c4>
 8007990:	2301      	movs	r3, #1
 8007992:	1169      	asrs	r1, r5, #5
 8007994:	f005 051f 	and.w	r5, r5, #31
 8007998:	fa03 f505 	lsl.w	r5, r3, r5
 800799c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80079a0:	421d      	tst	r5, r3
 80079a2:	bf18      	it	ne
 80079a4:	f04f 0801 	movne.w	r8, #1
 80079a8:	f048 0820 	orr.w	r8, r8, #32
 80079ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079ae:	601c      	str	r4, [r3, #0]
 80079b0:	9b02      	ldr	r3, [sp, #8]
 80079b2:	601e      	str	r6, [r3, #0]
 80079b4:	e6a0      	b.n	80076f8 <__gethex+0x114>
 80079b6:	4290      	cmp	r0, r2
 80079b8:	f842 3c04 	str.w	r3, [r2, #-4]
 80079bc:	d8d6      	bhi.n	800796c <__gethex+0x388>
 80079be:	68a2      	ldr	r2, [r4, #8]
 80079c0:	4593      	cmp	fp, r2
 80079c2:	db17      	blt.n	80079f4 <__gethex+0x410>
 80079c4:	6861      	ldr	r1, [r4, #4]
 80079c6:	4648      	mov	r0, r9
 80079c8:	3101      	adds	r1, #1
 80079ca:	f7fd ffe5 	bl	8005998 <_Balloc>
 80079ce:	4682      	mov	sl, r0
 80079d0:	b918      	cbnz	r0, 80079da <__gethex+0x3f6>
 80079d2:	4602      	mov	r2, r0
 80079d4:	2184      	movs	r1, #132	; 0x84
 80079d6:	4b1a      	ldr	r3, [pc, #104]	; (8007a40 <__gethex+0x45c>)
 80079d8:	e6b1      	b.n	800773e <__gethex+0x15a>
 80079da:	6922      	ldr	r2, [r4, #16]
 80079dc:	f104 010c 	add.w	r1, r4, #12
 80079e0:	3202      	adds	r2, #2
 80079e2:	0092      	lsls	r2, r2, #2
 80079e4:	300c      	adds	r0, #12
 80079e6:	f7ff fd4f 	bl	8007488 <memcpy>
 80079ea:	4621      	mov	r1, r4
 80079ec:	4648      	mov	r0, r9
 80079ee:	f7fe f813 	bl	8005a18 <_Bfree>
 80079f2:	4654      	mov	r4, sl
 80079f4:	6922      	ldr	r2, [r4, #16]
 80079f6:	1c51      	adds	r1, r2, #1
 80079f8:	6121      	str	r1, [r4, #16]
 80079fa:	2101      	movs	r1, #1
 80079fc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007a00:	6151      	str	r1, [r2, #20]
 8007a02:	e7bc      	b.n	800797e <__gethex+0x39a>
 8007a04:	6921      	ldr	r1, [r4, #16]
 8007a06:	4559      	cmp	r1, fp
 8007a08:	dd0b      	ble.n	8007a22 <__gethex+0x43e>
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	f7ff fd81 	bl	8007514 <rshift>
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	3601      	adds	r6, #1
 8007a16:	42b3      	cmp	r3, r6
 8007a18:	f6ff aeda 	blt.w	80077d0 <__gethex+0x1ec>
 8007a1c:	f04f 0801 	mov.w	r8, #1
 8007a20:	e7c2      	b.n	80079a8 <__gethex+0x3c4>
 8007a22:	f015 051f 	ands.w	r5, r5, #31
 8007a26:	d0f9      	beq.n	8007a1c <__gethex+0x438>
 8007a28:	9b01      	ldr	r3, [sp, #4]
 8007a2a:	f1c5 0520 	rsb	r5, r5, #32
 8007a2e:	441a      	add	r2, r3
 8007a30:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8007a34:	f7fe f8a2 	bl	8005b7c <__hi0bits>
 8007a38:	42a8      	cmp	r0, r5
 8007a3a:	dbe6      	blt.n	8007a0a <__gethex+0x426>
 8007a3c:	e7ee      	b.n	8007a1c <__gethex+0x438>
 8007a3e:	bf00      	nop
 8007a40:	080082e7 	.word	0x080082e7

08007a44 <L_shift>:
 8007a44:	f1c2 0208 	rsb	r2, r2, #8
 8007a48:	0092      	lsls	r2, r2, #2
 8007a4a:	b570      	push	{r4, r5, r6, lr}
 8007a4c:	f1c2 0620 	rsb	r6, r2, #32
 8007a50:	6843      	ldr	r3, [r0, #4]
 8007a52:	6804      	ldr	r4, [r0, #0]
 8007a54:	fa03 f506 	lsl.w	r5, r3, r6
 8007a58:	432c      	orrs	r4, r5
 8007a5a:	40d3      	lsrs	r3, r2
 8007a5c:	6004      	str	r4, [r0, #0]
 8007a5e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007a62:	4288      	cmp	r0, r1
 8007a64:	d3f4      	bcc.n	8007a50 <L_shift+0xc>
 8007a66:	bd70      	pop	{r4, r5, r6, pc}

08007a68 <__match>:
 8007a68:	b530      	push	{r4, r5, lr}
 8007a6a:	6803      	ldr	r3, [r0, #0]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a72:	b914      	cbnz	r4, 8007a7a <__match+0x12>
 8007a74:	6003      	str	r3, [r0, #0]
 8007a76:	2001      	movs	r0, #1
 8007a78:	bd30      	pop	{r4, r5, pc}
 8007a7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a7e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007a82:	2d19      	cmp	r5, #25
 8007a84:	bf98      	it	ls
 8007a86:	3220      	addls	r2, #32
 8007a88:	42a2      	cmp	r2, r4
 8007a8a:	d0f0      	beq.n	8007a6e <__match+0x6>
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	e7f3      	b.n	8007a78 <__match+0x10>

08007a90 <__hexnan>:
 8007a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a94:	2500      	movs	r5, #0
 8007a96:	680b      	ldr	r3, [r1, #0]
 8007a98:	4682      	mov	sl, r0
 8007a9a:	115e      	asrs	r6, r3, #5
 8007a9c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007aa0:	f013 031f 	ands.w	r3, r3, #31
 8007aa4:	bf18      	it	ne
 8007aa6:	3604      	addne	r6, #4
 8007aa8:	1f37      	subs	r7, r6, #4
 8007aaa:	4690      	mov	r8, r2
 8007aac:	46b9      	mov	r9, r7
 8007aae:	463c      	mov	r4, r7
 8007ab0:	46ab      	mov	fp, r5
 8007ab2:	b087      	sub	sp, #28
 8007ab4:	6801      	ldr	r1, [r0, #0]
 8007ab6:	9301      	str	r3, [sp, #4]
 8007ab8:	f846 5c04 	str.w	r5, [r6, #-4]
 8007abc:	9502      	str	r5, [sp, #8]
 8007abe:	784a      	ldrb	r2, [r1, #1]
 8007ac0:	1c4b      	adds	r3, r1, #1
 8007ac2:	9303      	str	r3, [sp, #12]
 8007ac4:	b342      	cbz	r2, 8007b18 <__hexnan+0x88>
 8007ac6:	4610      	mov	r0, r2
 8007ac8:	9105      	str	r1, [sp, #20]
 8007aca:	9204      	str	r2, [sp, #16]
 8007acc:	f7ff fd75 	bl	80075ba <__hexdig_fun>
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	d14f      	bne.n	8007b74 <__hexnan+0xe4>
 8007ad4:	9a04      	ldr	r2, [sp, #16]
 8007ad6:	9905      	ldr	r1, [sp, #20]
 8007ad8:	2a20      	cmp	r2, #32
 8007ada:	d818      	bhi.n	8007b0e <__hexnan+0x7e>
 8007adc:	9b02      	ldr	r3, [sp, #8]
 8007ade:	459b      	cmp	fp, r3
 8007ae0:	dd13      	ble.n	8007b0a <__hexnan+0x7a>
 8007ae2:	454c      	cmp	r4, r9
 8007ae4:	d206      	bcs.n	8007af4 <__hexnan+0x64>
 8007ae6:	2d07      	cmp	r5, #7
 8007ae8:	dc04      	bgt.n	8007af4 <__hexnan+0x64>
 8007aea:	462a      	mov	r2, r5
 8007aec:	4649      	mov	r1, r9
 8007aee:	4620      	mov	r0, r4
 8007af0:	f7ff ffa8 	bl	8007a44 <L_shift>
 8007af4:	4544      	cmp	r4, r8
 8007af6:	d950      	bls.n	8007b9a <__hexnan+0x10a>
 8007af8:	2300      	movs	r3, #0
 8007afa:	f1a4 0904 	sub.w	r9, r4, #4
 8007afe:	f844 3c04 	str.w	r3, [r4, #-4]
 8007b02:	461d      	mov	r5, r3
 8007b04:	464c      	mov	r4, r9
 8007b06:	f8cd b008 	str.w	fp, [sp, #8]
 8007b0a:	9903      	ldr	r1, [sp, #12]
 8007b0c:	e7d7      	b.n	8007abe <__hexnan+0x2e>
 8007b0e:	2a29      	cmp	r2, #41	; 0x29
 8007b10:	d155      	bne.n	8007bbe <__hexnan+0x12e>
 8007b12:	3102      	adds	r1, #2
 8007b14:	f8ca 1000 	str.w	r1, [sl]
 8007b18:	f1bb 0f00 	cmp.w	fp, #0
 8007b1c:	d04f      	beq.n	8007bbe <__hexnan+0x12e>
 8007b1e:	454c      	cmp	r4, r9
 8007b20:	d206      	bcs.n	8007b30 <__hexnan+0xa0>
 8007b22:	2d07      	cmp	r5, #7
 8007b24:	dc04      	bgt.n	8007b30 <__hexnan+0xa0>
 8007b26:	462a      	mov	r2, r5
 8007b28:	4649      	mov	r1, r9
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	f7ff ff8a 	bl	8007a44 <L_shift>
 8007b30:	4544      	cmp	r4, r8
 8007b32:	d934      	bls.n	8007b9e <__hexnan+0x10e>
 8007b34:	4623      	mov	r3, r4
 8007b36:	f1a8 0204 	sub.w	r2, r8, #4
 8007b3a:	f853 1b04 	ldr.w	r1, [r3], #4
 8007b3e:	429f      	cmp	r7, r3
 8007b40:	f842 1f04 	str.w	r1, [r2, #4]!
 8007b44:	d2f9      	bcs.n	8007b3a <__hexnan+0xaa>
 8007b46:	1b3b      	subs	r3, r7, r4
 8007b48:	f023 0303 	bic.w	r3, r3, #3
 8007b4c:	3304      	adds	r3, #4
 8007b4e:	3e03      	subs	r6, #3
 8007b50:	3401      	adds	r4, #1
 8007b52:	42a6      	cmp	r6, r4
 8007b54:	bf38      	it	cc
 8007b56:	2304      	movcc	r3, #4
 8007b58:	2200      	movs	r2, #0
 8007b5a:	4443      	add	r3, r8
 8007b5c:	f843 2b04 	str.w	r2, [r3], #4
 8007b60:	429f      	cmp	r7, r3
 8007b62:	d2fb      	bcs.n	8007b5c <__hexnan+0xcc>
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	b91b      	cbnz	r3, 8007b70 <__hexnan+0xe0>
 8007b68:	4547      	cmp	r7, r8
 8007b6a:	d126      	bne.n	8007bba <__hexnan+0x12a>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	603b      	str	r3, [r7, #0]
 8007b70:	2005      	movs	r0, #5
 8007b72:	e025      	b.n	8007bc0 <__hexnan+0x130>
 8007b74:	3501      	adds	r5, #1
 8007b76:	2d08      	cmp	r5, #8
 8007b78:	f10b 0b01 	add.w	fp, fp, #1
 8007b7c:	dd06      	ble.n	8007b8c <__hexnan+0xfc>
 8007b7e:	4544      	cmp	r4, r8
 8007b80:	d9c3      	bls.n	8007b0a <__hexnan+0x7a>
 8007b82:	2300      	movs	r3, #0
 8007b84:	2501      	movs	r5, #1
 8007b86:	f844 3c04 	str.w	r3, [r4, #-4]
 8007b8a:	3c04      	subs	r4, #4
 8007b8c:	6822      	ldr	r2, [r4, #0]
 8007b8e:	f000 000f 	and.w	r0, r0, #15
 8007b92:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007b96:	6020      	str	r0, [r4, #0]
 8007b98:	e7b7      	b.n	8007b0a <__hexnan+0x7a>
 8007b9a:	2508      	movs	r5, #8
 8007b9c:	e7b5      	b.n	8007b0a <__hexnan+0x7a>
 8007b9e:	9b01      	ldr	r3, [sp, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d0df      	beq.n	8007b64 <__hexnan+0xd4>
 8007ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ba8:	f1c3 0320 	rsb	r3, r3, #32
 8007bac:	40da      	lsrs	r2, r3
 8007bae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	f846 3c04 	str.w	r3, [r6, #-4]
 8007bb8:	e7d4      	b.n	8007b64 <__hexnan+0xd4>
 8007bba:	3f04      	subs	r7, #4
 8007bbc:	e7d2      	b.n	8007b64 <__hexnan+0xd4>
 8007bbe:	2004      	movs	r0, #4
 8007bc0:	b007      	add	sp, #28
 8007bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007bc6 <__ascii_mbtowc>:
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	b901      	cbnz	r1, 8007bcc <__ascii_mbtowc+0x6>
 8007bca:	a901      	add	r1, sp, #4
 8007bcc:	b142      	cbz	r2, 8007be0 <__ascii_mbtowc+0x1a>
 8007bce:	b14b      	cbz	r3, 8007be4 <__ascii_mbtowc+0x1e>
 8007bd0:	7813      	ldrb	r3, [r2, #0]
 8007bd2:	600b      	str	r3, [r1, #0]
 8007bd4:	7812      	ldrb	r2, [r2, #0]
 8007bd6:	1e10      	subs	r0, r2, #0
 8007bd8:	bf18      	it	ne
 8007bda:	2001      	movne	r0, #1
 8007bdc:	b002      	add	sp, #8
 8007bde:	4770      	bx	lr
 8007be0:	4610      	mov	r0, r2
 8007be2:	e7fb      	b.n	8007bdc <__ascii_mbtowc+0x16>
 8007be4:	f06f 0001 	mvn.w	r0, #1
 8007be8:	e7f8      	b.n	8007bdc <__ascii_mbtowc+0x16>

08007bea <_realloc_r>:
 8007bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bee:	4680      	mov	r8, r0
 8007bf0:	4614      	mov	r4, r2
 8007bf2:	460e      	mov	r6, r1
 8007bf4:	b921      	cbnz	r1, 8007c00 <_realloc_r+0x16>
 8007bf6:	4611      	mov	r1, r2
 8007bf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bfc:	f7fd be40 	b.w	8005880 <_malloc_r>
 8007c00:	b92a      	cbnz	r2, 8007c0e <_realloc_r+0x24>
 8007c02:	f7fd fdcd 	bl	80057a0 <_free_r>
 8007c06:	4625      	mov	r5, r4
 8007c08:	4628      	mov	r0, r5
 8007c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c0e:	f000 f842 	bl	8007c96 <_malloc_usable_size_r>
 8007c12:	4284      	cmp	r4, r0
 8007c14:	4607      	mov	r7, r0
 8007c16:	d802      	bhi.n	8007c1e <_realloc_r+0x34>
 8007c18:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c1c:	d812      	bhi.n	8007c44 <_realloc_r+0x5a>
 8007c1e:	4621      	mov	r1, r4
 8007c20:	4640      	mov	r0, r8
 8007c22:	f7fd fe2d 	bl	8005880 <_malloc_r>
 8007c26:	4605      	mov	r5, r0
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	d0ed      	beq.n	8007c08 <_realloc_r+0x1e>
 8007c2c:	42bc      	cmp	r4, r7
 8007c2e:	4622      	mov	r2, r4
 8007c30:	4631      	mov	r1, r6
 8007c32:	bf28      	it	cs
 8007c34:	463a      	movcs	r2, r7
 8007c36:	f7ff fc27 	bl	8007488 <memcpy>
 8007c3a:	4631      	mov	r1, r6
 8007c3c:	4640      	mov	r0, r8
 8007c3e:	f7fd fdaf 	bl	80057a0 <_free_r>
 8007c42:	e7e1      	b.n	8007c08 <_realloc_r+0x1e>
 8007c44:	4635      	mov	r5, r6
 8007c46:	e7df      	b.n	8007c08 <_realloc_r+0x1e>

08007c48 <__ascii_wctomb>:
 8007c48:	4603      	mov	r3, r0
 8007c4a:	4608      	mov	r0, r1
 8007c4c:	b141      	cbz	r1, 8007c60 <__ascii_wctomb+0x18>
 8007c4e:	2aff      	cmp	r2, #255	; 0xff
 8007c50:	d904      	bls.n	8007c5c <__ascii_wctomb+0x14>
 8007c52:	228a      	movs	r2, #138	; 0x8a
 8007c54:	f04f 30ff 	mov.w	r0, #4294967295
 8007c58:	601a      	str	r2, [r3, #0]
 8007c5a:	4770      	bx	lr
 8007c5c:	2001      	movs	r0, #1
 8007c5e:	700a      	strb	r2, [r1, #0]
 8007c60:	4770      	bx	lr
	...

08007c64 <fiprintf>:
 8007c64:	b40e      	push	{r1, r2, r3}
 8007c66:	b503      	push	{r0, r1, lr}
 8007c68:	4601      	mov	r1, r0
 8007c6a:	ab03      	add	r3, sp, #12
 8007c6c:	4805      	ldr	r0, [pc, #20]	; (8007c84 <fiprintf+0x20>)
 8007c6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c72:	6800      	ldr	r0, [r0, #0]
 8007c74:	9301      	str	r3, [sp, #4]
 8007c76:	f000 f83d 	bl	8007cf4 <_vfiprintf_r>
 8007c7a:	b002      	add	sp, #8
 8007c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c80:	b003      	add	sp, #12
 8007c82:	4770      	bx	lr
 8007c84:	20000064 	.word	0x20000064

08007c88 <abort>:
 8007c88:	2006      	movs	r0, #6
 8007c8a:	b508      	push	{r3, lr}
 8007c8c:	f000 fa0a 	bl	80080a4 <raise>
 8007c90:	2001      	movs	r0, #1
 8007c92:	f7f9 fd93 	bl	80017bc <_exit>

08007c96 <_malloc_usable_size_r>:
 8007c96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c9a:	1f18      	subs	r0, r3, #4
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	bfbc      	itt	lt
 8007ca0:	580b      	ldrlt	r3, [r1, r0]
 8007ca2:	18c0      	addlt	r0, r0, r3
 8007ca4:	4770      	bx	lr

08007ca6 <__sfputc_r>:
 8007ca6:	6893      	ldr	r3, [r2, #8]
 8007ca8:	b410      	push	{r4}
 8007caa:	3b01      	subs	r3, #1
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	6093      	str	r3, [r2, #8]
 8007cb0:	da07      	bge.n	8007cc2 <__sfputc_r+0x1c>
 8007cb2:	6994      	ldr	r4, [r2, #24]
 8007cb4:	42a3      	cmp	r3, r4
 8007cb6:	db01      	blt.n	8007cbc <__sfputc_r+0x16>
 8007cb8:	290a      	cmp	r1, #10
 8007cba:	d102      	bne.n	8007cc2 <__sfputc_r+0x1c>
 8007cbc:	bc10      	pop	{r4}
 8007cbe:	f000 b933 	b.w	8007f28 <__swbuf_r>
 8007cc2:	6813      	ldr	r3, [r2, #0]
 8007cc4:	1c58      	adds	r0, r3, #1
 8007cc6:	6010      	str	r0, [r2, #0]
 8007cc8:	7019      	strb	r1, [r3, #0]
 8007cca:	4608      	mov	r0, r1
 8007ccc:	bc10      	pop	{r4}
 8007cce:	4770      	bx	lr

08007cd0 <__sfputs_r>:
 8007cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd2:	4606      	mov	r6, r0
 8007cd4:	460f      	mov	r7, r1
 8007cd6:	4614      	mov	r4, r2
 8007cd8:	18d5      	adds	r5, r2, r3
 8007cda:	42ac      	cmp	r4, r5
 8007cdc:	d101      	bne.n	8007ce2 <__sfputs_r+0x12>
 8007cde:	2000      	movs	r0, #0
 8007ce0:	e007      	b.n	8007cf2 <__sfputs_r+0x22>
 8007ce2:	463a      	mov	r2, r7
 8007ce4:	4630      	mov	r0, r6
 8007ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cea:	f7ff ffdc 	bl	8007ca6 <__sfputc_r>
 8007cee:	1c43      	adds	r3, r0, #1
 8007cf0:	d1f3      	bne.n	8007cda <__sfputs_r+0xa>
 8007cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007cf4 <_vfiprintf_r>:
 8007cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf8:	460d      	mov	r5, r1
 8007cfa:	4614      	mov	r4, r2
 8007cfc:	4698      	mov	r8, r3
 8007cfe:	4606      	mov	r6, r0
 8007d00:	b09d      	sub	sp, #116	; 0x74
 8007d02:	b118      	cbz	r0, 8007d0c <_vfiprintf_r+0x18>
 8007d04:	6a03      	ldr	r3, [r0, #32]
 8007d06:	b90b      	cbnz	r3, 8007d0c <_vfiprintf_r+0x18>
 8007d08:	f7fc fdae 	bl	8004868 <__sinit>
 8007d0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d0e:	07d9      	lsls	r1, r3, #31
 8007d10:	d405      	bmi.n	8007d1e <_vfiprintf_r+0x2a>
 8007d12:	89ab      	ldrh	r3, [r5, #12]
 8007d14:	059a      	lsls	r2, r3, #22
 8007d16:	d402      	bmi.n	8007d1e <_vfiprintf_r+0x2a>
 8007d18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d1a:	f7fc febc 	bl	8004a96 <__retarget_lock_acquire_recursive>
 8007d1e:	89ab      	ldrh	r3, [r5, #12]
 8007d20:	071b      	lsls	r3, r3, #28
 8007d22:	d501      	bpl.n	8007d28 <_vfiprintf_r+0x34>
 8007d24:	692b      	ldr	r3, [r5, #16]
 8007d26:	b99b      	cbnz	r3, 8007d50 <_vfiprintf_r+0x5c>
 8007d28:	4629      	mov	r1, r5
 8007d2a:	4630      	mov	r0, r6
 8007d2c:	f000 f93a 	bl	8007fa4 <__swsetup_r>
 8007d30:	b170      	cbz	r0, 8007d50 <_vfiprintf_r+0x5c>
 8007d32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d34:	07dc      	lsls	r4, r3, #31
 8007d36:	d504      	bpl.n	8007d42 <_vfiprintf_r+0x4e>
 8007d38:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3c:	b01d      	add	sp, #116	; 0x74
 8007d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d42:	89ab      	ldrh	r3, [r5, #12]
 8007d44:	0598      	lsls	r0, r3, #22
 8007d46:	d4f7      	bmi.n	8007d38 <_vfiprintf_r+0x44>
 8007d48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d4a:	f7fc fea5 	bl	8004a98 <__retarget_lock_release_recursive>
 8007d4e:	e7f3      	b.n	8007d38 <_vfiprintf_r+0x44>
 8007d50:	2300      	movs	r3, #0
 8007d52:	9309      	str	r3, [sp, #36]	; 0x24
 8007d54:	2320      	movs	r3, #32
 8007d56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d5a:	2330      	movs	r3, #48	; 0x30
 8007d5c:	f04f 0901 	mov.w	r9, #1
 8007d60:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d64:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007f14 <_vfiprintf_r+0x220>
 8007d68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d6c:	4623      	mov	r3, r4
 8007d6e:	469a      	mov	sl, r3
 8007d70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d74:	b10a      	cbz	r2, 8007d7a <_vfiprintf_r+0x86>
 8007d76:	2a25      	cmp	r2, #37	; 0x25
 8007d78:	d1f9      	bne.n	8007d6e <_vfiprintf_r+0x7a>
 8007d7a:	ebba 0b04 	subs.w	fp, sl, r4
 8007d7e:	d00b      	beq.n	8007d98 <_vfiprintf_r+0xa4>
 8007d80:	465b      	mov	r3, fp
 8007d82:	4622      	mov	r2, r4
 8007d84:	4629      	mov	r1, r5
 8007d86:	4630      	mov	r0, r6
 8007d88:	f7ff ffa2 	bl	8007cd0 <__sfputs_r>
 8007d8c:	3001      	adds	r0, #1
 8007d8e:	f000 80a9 	beq.w	8007ee4 <_vfiprintf_r+0x1f0>
 8007d92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d94:	445a      	add	r2, fp
 8007d96:	9209      	str	r2, [sp, #36]	; 0x24
 8007d98:	f89a 3000 	ldrb.w	r3, [sl]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f000 80a1 	beq.w	8007ee4 <_vfiprintf_r+0x1f0>
 8007da2:	2300      	movs	r3, #0
 8007da4:	f04f 32ff 	mov.w	r2, #4294967295
 8007da8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dac:	f10a 0a01 	add.w	sl, sl, #1
 8007db0:	9304      	str	r3, [sp, #16]
 8007db2:	9307      	str	r3, [sp, #28]
 8007db4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007db8:	931a      	str	r3, [sp, #104]	; 0x68
 8007dba:	4654      	mov	r4, sl
 8007dbc:	2205      	movs	r2, #5
 8007dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dc2:	4854      	ldr	r0, [pc, #336]	; (8007f14 <_vfiprintf_r+0x220>)
 8007dc4:	f7fc fe69 	bl	8004a9a <memchr>
 8007dc8:	9a04      	ldr	r2, [sp, #16]
 8007dca:	b9d8      	cbnz	r0, 8007e04 <_vfiprintf_r+0x110>
 8007dcc:	06d1      	lsls	r1, r2, #27
 8007dce:	bf44      	itt	mi
 8007dd0:	2320      	movmi	r3, #32
 8007dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dd6:	0713      	lsls	r3, r2, #28
 8007dd8:	bf44      	itt	mi
 8007dda:	232b      	movmi	r3, #43	; 0x2b
 8007ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007de0:	f89a 3000 	ldrb.w	r3, [sl]
 8007de4:	2b2a      	cmp	r3, #42	; 0x2a
 8007de6:	d015      	beq.n	8007e14 <_vfiprintf_r+0x120>
 8007de8:	4654      	mov	r4, sl
 8007dea:	2000      	movs	r0, #0
 8007dec:	f04f 0c0a 	mov.w	ip, #10
 8007df0:	9a07      	ldr	r2, [sp, #28]
 8007df2:	4621      	mov	r1, r4
 8007df4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007df8:	3b30      	subs	r3, #48	; 0x30
 8007dfa:	2b09      	cmp	r3, #9
 8007dfc:	d94d      	bls.n	8007e9a <_vfiprintf_r+0x1a6>
 8007dfe:	b1b0      	cbz	r0, 8007e2e <_vfiprintf_r+0x13a>
 8007e00:	9207      	str	r2, [sp, #28]
 8007e02:	e014      	b.n	8007e2e <_vfiprintf_r+0x13a>
 8007e04:	eba0 0308 	sub.w	r3, r0, r8
 8007e08:	fa09 f303 	lsl.w	r3, r9, r3
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	46a2      	mov	sl, r4
 8007e10:	9304      	str	r3, [sp, #16]
 8007e12:	e7d2      	b.n	8007dba <_vfiprintf_r+0xc6>
 8007e14:	9b03      	ldr	r3, [sp, #12]
 8007e16:	1d19      	adds	r1, r3, #4
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	9103      	str	r1, [sp, #12]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	bfbb      	ittet	lt
 8007e20:	425b      	neglt	r3, r3
 8007e22:	f042 0202 	orrlt.w	r2, r2, #2
 8007e26:	9307      	strge	r3, [sp, #28]
 8007e28:	9307      	strlt	r3, [sp, #28]
 8007e2a:	bfb8      	it	lt
 8007e2c:	9204      	strlt	r2, [sp, #16]
 8007e2e:	7823      	ldrb	r3, [r4, #0]
 8007e30:	2b2e      	cmp	r3, #46	; 0x2e
 8007e32:	d10c      	bne.n	8007e4e <_vfiprintf_r+0x15a>
 8007e34:	7863      	ldrb	r3, [r4, #1]
 8007e36:	2b2a      	cmp	r3, #42	; 0x2a
 8007e38:	d134      	bne.n	8007ea4 <_vfiprintf_r+0x1b0>
 8007e3a:	9b03      	ldr	r3, [sp, #12]
 8007e3c:	3402      	adds	r4, #2
 8007e3e:	1d1a      	adds	r2, r3, #4
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	9203      	str	r2, [sp, #12]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	bfb8      	it	lt
 8007e48:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e4c:	9305      	str	r3, [sp, #20]
 8007e4e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007f18 <_vfiprintf_r+0x224>
 8007e52:	2203      	movs	r2, #3
 8007e54:	4650      	mov	r0, sl
 8007e56:	7821      	ldrb	r1, [r4, #0]
 8007e58:	f7fc fe1f 	bl	8004a9a <memchr>
 8007e5c:	b138      	cbz	r0, 8007e6e <_vfiprintf_r+0x17a>
 8007e5e:	2240      	movs	r2, #64	; 0x40
 8007e60:	9b04      	ldr	r3, [sp, #16]
 8007e62:	eba0 000a 	sub.w	r0, r0, sl
 8007e66:	4082      	lsls	r2, r0
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	3401      	adds	r4, #1
 8007e6c:	9304      	str	r3, [sp, #16]
 8007e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e72:	2206      	movs	r2, #6
 8007e74:	4829      	ldr	r0, [pc, #164]	; (8007f1c <_vfiprintf_r+0x228>)
 8007e76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e7a:	f7fc fe0e 	bl	8004a9a <memchr>
 8007e7e:	2800      	cmp	r0, #0
 8007e80:	d03f      	beq.n	8007f02 <_vfiprintf_r+0x20e>
 8007e82:	4b27      	ldr	r3, [pc, #156]	; (8007f20 <_vfiprintf_r+0x22c>)
 8007e84:	bb1b      	cbnz	r3, 8007ece <_vfiprintf_r+0x1da>
 8007e86:	9b03      	ldr	r3, [sp, #12]
 8007e88:	3307      	adds	r3, #7
 8007e8a:	f023 0307 	bic.w	r3, r3, #7
 8007e8e:	3308      	adds	r3, #8
 8007e90:	9303      	str	r3, [sp, #12]
 8007e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e94:	443b      	add	r3, r7
 8007e96:	9309      	str	r3, [sp, #36]	; 0x24
 8007e98:	e768      	b.n	8007d6c <_vfiprintf_r+0x78>
 8007e9a:	460c      	mov	r4, r1
 8007e9c:	2001      	movs	r0, #1
 8007e9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ea2:	e7a6      	b.n	8007df2 <_vfiprintf_r+0xfe>
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	f04f 0c0a 	mov.w	ip, #10
 8007eaa:	4619      	mov	r1, r3
 8007eac:	3401      	adds	r4, #1
 8007eae:	9305      	str	r3, [sp, #20]
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007eb6:	3a30      	subs	r2, #48	; 0x30
 8007eb8:	2a09      	cmp	r2, #9
 8007eba:	d903      	bls.n	8007ec4 <_vfiprintf_r+0x1d0>
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d0c6      	beq.n	8007e4e <_vfiprintf_r+0x15a>
 8007ec0:	9105      	str	r1, [sp, #20]
 8007ec2:	e7c4      	b.n	8007e4e <_vfiprintf_r+0x15a>
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ecc:	e7f0      	b.n	8007eb0 <_vfiprintf_r+0x1bc>
 8007ece:	ab03      	add	r3, sp, #12
 8007ed0:	9300      	str	r3, [sp, #0]
 8007ed2:	462a      	mov	r2, r5
 8007ed4:	4630      	mov	r0, r6
 8007ed6:	4b13      	ldr	r3, [pc, #76]	; (8007f24 <_vfiprintf_r+0x230>)
 8007ed8:	a904      	add	r1, sp, #16
 8007eda:	f7fb fe69 	bl	8003bb0 <_printf_float>
 8007ede:	4607      	mov	r7, r0
 8007ee0:	1c78      	adds	r0, r7, #1
 8007ee2:	d1d6      	bne.n	8007e92 <_vfiprintf_r+0x19e>
 8007ee4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ee6:	07d9      	lsls	r1, r3, #31
 8007ee8:	d405      	bmi.n	8007ef6 <_vfiprintf_r+0x202>
 8007eea:	89ab      	ldrh	r3, [r5, #12]
 8007eec:	059a      	lsls	r2, r3, #22
 8007eee:	d402      	bmi.n	8007ef6 <_vfiprintf_r+0x202>
 8007ef0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ef2:	f7fc fdd1 	bl	8004a98 <__retarget_lock_release_recursive>
 8007ef6:	89ab      	ldrh	r3, [r5, #12]
 8007ef8:	065b      	lsls	r3, r3, #25
 8007efa:	f53f af1d 	bmi.w	8007d38 <_vfiprintf_r+0x44>
 8007efe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f00:	e71c      	b.n	8007d3c <_vfiprintf_r+0x48>
 8007f02:	ab03      	add	r3, sp, #12
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	462a      	mov	r2, r5
 8007f08:	4630      	mov	r0, r6
 8007f0a:	4b06      	ldr	r3, [pc, #24]	; (8007f24 <_vfiprintf_r+0x230>)
 8007f0c:	a904      	add	r1, sp, #16
 8007f0e:	f7fc f8ef 	bl	80040f0 <_printf_i>
 8007f12:	e7e4      	b.n	8007ede <_vfiprintf_r+0x1ea>
 8007f14:	080085a9 	.word	0x080085a9
 8007f18:	080085af 	.word	0x080085af
 8007f1c:	080085b3 	.word	0x080085b3
 8007f20:	08003bb1 	.word	0x08003bb1
 8007f24:	08007cd1 	.word	0x08007cd1

08007f28 <__swbuf_r>:
 8007f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f2a:	460e      	mov	r6, r1
 8007f2c:	4614      	mov	r4, r2
 8007f2e:	4605      	mov	r5, r0
 8007f30:	b118      	cbz	r0, 8007f3a <__swbuf_r+0x12>
 8007f32:	6a03      	ldr	r3, [r0, #32]
 8007f34:	b90b      	cbnz	r3, 8007f3a <__swbuf_r+0x12>
 8007f36:	f7fc fc97 	bl	8004868 <__sinit>
 8007f3a:	69a3      	ldr	r3, [r4, #24]
 8007f3c:	60a3      	str	r3, [r4, #8]
 8007f3e:	89a3      	ldrh	r3, [r4, #12]
 8007f40:	071a      	lsls	r2, r3, #28
 8007f42:	d525      	bpl.n	8007f90 <__swbuf_r+0x68>
 8007f44:	6923      	ldr	r3, [r4, #16]
 8007f46:	b31b      	cbz	r3, 8007f90 <__swbuf_r+0x68>
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	6922      	ldr	r2, [r4, #16]
 8007f4c:	b2f6      	uxtb	r6, r6
 8007f4e:	1a98      	subs	r0, r3, r2
 8007f50:	6963      	ldr	r3, [r4, #20]
 8007f52:	4637      	mov	r7, r6
 8007f54:	4283      	cmp	r3, r0
 8007f56:	dc04      	bgt.n	8007f62 <__swbuf_r+0x3a>
 8007f58:	4621      	mov	r1, r4
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	f7ff fa30 	bl	80073c0 <_fflush_r>
 8007f60:	b9e0      	cbnz	r0, 8007f9c <__swbuf_r+0x74>
 8007f62:	68a3      	ldr	r3, [r4, #8]
 8007f64:	3b01      	subs	r3, #1
 8007f66:	60a3      	str	r3, [r4, #8]
 8007f68:	6823      	ldr	r3, [r4, #0]
 8007f6a:	1c5a      	adds	r2, r3, #1
 8007f6c:	6022      	str	r2, [r4, #0]
 8007f6e:	701e      	strb	r6, [r3, #0]
 8007f70:	6962      	ldr	r2, [r4, #20]
 8007f72:	1c43      	adds	r3, r0, #1
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d004      	beq.n	8007f82 <__swbuf_r+0x5a>
 8007f78:	89a3      	ldrh	r3, [r4, #12]
 8007f7a:	07db      	lsls	r3, r3, #31
 8007f7c:	d506      	bpl.n	8007f8c <__swbuf_r+0x64>
 8007f7e:	2e0a      	cmp	r6, #10
 8007f80:	d104      	bne.n	8007f8c <__swbuf_r+0x64>
 8007f82:	4621      	mov	r1, r4
 8007f84:	4628      	mov	r0, r5
 8007f86:	f7ff fa1b 	bl	80073c0 <_fflush_r>
 8007f8a:	b938      	cbnz	r0, 8007f9c <__swbuf_r+0x74>
 8007f8c:	4638      	mov	r0, r7
 8007f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f90:	4621      	mov	r1, r4
 8007f92:	4628      	mov	r0, r5
 8007f94:	f000 f806 	bl	8007fa4 <__swsetup_r>
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	d0d5      	beq.n	8007f48 <__swbuf_r+0x20>
 8007f9c:	f04f 37ff 	mov.w	r7, #4294967295
 8007fa0:	e7f4      	b.n	8007f8c <__swbuf_r+0x64>
	...

08007fa4 <__swsetup_r>:
 8007fa4:	b538      	push	{r3, r4, r5, lr}
 8007fa6:	4b2a      	ldr	r3, [pc, #168]	; (8008050 <__swsetup_r+0xac>)
 8007fa8:	4605      	mov	r5, r0
 8007faa:	6818      	ldr	r0, [r3, #0]
 8007fac:	460c      	mov	r4, r1
 8007fae:	b118      	cbz	r0, 8007fb8 <__swsetup_r+0x14>
 8007fb0:	6a03      	ldr	r3, [r0, #32]
 8007fb2:	b90b      	cbnz	r3, 8007fb8 <__swsetup_r+0x14>
 8007fb4:	f7fc fc58 	bl	8004868 <__sinit>
 8007fb8:	89a3      	ldrh	r3, [r4, #12]
 8007fba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fbe:	0718      	lsls	r0, r3, #28
 8007fc0:	d422      	bmi.n	8008008 <__swsetup_r+0x64>
 8007fc2:	06d9      	lsls	r1, r3, #27
 8007fc4:	d407      	bmi.n	8007fd6 <__swsetup_r+0x32>
 8007fc6:	2309      	movs	r3, #9
 8007fc8:	602b      	str	r3, [r5, #0]
 8007fca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007fce:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd2:	81a3      	strh	r3, [r4, #12]
 8007fd4:	e034      	b.n	8008040 <__swsetup_r+0x9c>
 8007fd6:	0758      	lsls	r0, r3, #29
 8007fd8:	d512      	bpl.n	8008000 <__swsetup_r+0x5c>
 8007fda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fdc:	b141      	cbz	r1, 8007ff0 <__swsetup_r+0x4c>
 8007fde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fe2:	4299      	cmp	r1, r3
 8007fe4:	d002      	beq.n	8007fec <__swsetup_r+0x48>
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	f7fd fbda 	bl	80057a0 <_free_r>
 8007fec:	2300      	movs	r3, #0
 8007fee:	6363      	str	r3, [r4, #52]	; 0x34
 8007ff0:	89a3      	ldrh	r3, [r4, #12]
 8007ff2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ff6:	81a3      	strh	r3, [r4, #12]
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	6063      	str	r3, [r4, #4]
 8007ffc:	6923      	ldr	r3, [r4, #16]
 8007ffe:	6023      	str	r3, [r4, #0]
 8008000:	89a3      	ldrh	r3, [r4, #12]
 8008002:	f043 0308 	orr.w	r3, r3, #8
 8008006:	81a3      	strh	r3, [r4, #12]
 8008008:	6923      	ldr	r3, [r4, #16]
 800800a:	b94b      	cbnz	r3, 8008020 <__swsetup_r+0x7c>
 800800c:	89a3      	ldrh	r3, [r4, #12]
 800800e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008016:	d003      	beq.n	8008020 <__swsetup_r+0x7c>
 8008018:	4621      	mov	r1, r4
 800801a:	4628      	mov	r0, r5
 800801c:	f000 f883 	bl	8008126 <__smakebuf_r>
 8008020:	89a0      	ldrh	r0, [r4, #12]
 8008022:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008026:	f010 0301 	ands.w	r3, r0, #1
 800802a:	d00a      	beq.n	8008042 <__swsetup_r+0x9e>
 800802c:	2300      	movs	r3, #0
 800802e:	60a3      	str	r3, [r4, #8]
 8008030:	6963      	ldr	r3, [r4, #20]
 8008032:	425b      	negs	r3, r3
 8008034:	61a3      	str	r3, [r4, #24]
 8008036:	6923      	ldr	r3, [r4, #16]
 8008038:	b943      	cbnz	r3, 800804c <__swsetup_r+0xa8>
 800803a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800803e:	d1c4      	bne.n	8007fca <__swsetup_r+0x26>
 8008040:	bd38      	pop	{r3, r4, r5, pc}
 8008042:	0781      	lsls	r1, r0, #30
 8008044:	bf58      	it	pl
 8008046:	6963      	ldrpl	r3, [r4, #20]
 8008048:	60a3      	str	r3, [r4, #8]
 800804a:	e7f4      	b.n	8008036 <__swsetup_r+0x92>
 800804c:	2000      	movs	r0, #0
 800804e:	e7f7      	b.n	8008040 <__swsetup_r+0x9c>
 8008050:	20000064 	.word	0x20000064

08008054 <_raise_r>:
 8008054:	291f      	cmp	r1, #31
 8008056:	b538      	push	{r3, r4, r5, lr}
 8008058:	4604      	mov	r4, r0
 800805a:	460d      	mov	r5, r1
 800805c:	d904      	bls.n	8008068 <_raise_r+0x14>
 800805e:	2316      	movs	r3, #22
 8008060:	6003      	str	r3, [r0, #0]
 8008062:	f04f 30ff 	mov.w	r0, #4294967295
 8008066:	bd38      	pop	{r3, r4, r5, pc}
 8008068:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800806a:	b112      	cbz	r2, 8008072 <_raise_r+0x1e>
 800806c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008070:	b94b      	cbnz	r3, 8008086 <_raise_r+0x32>
 8008072:	4620      	mov	r0, r4
 8008074:	f000 f830 	bl	80080d8 <_getpid_r>
 8008078:	462a      	mov	r2, r5
 800807a:	4601      	mov	r1, r0
 800807c:	4620      	mov	r0, r4
 800807e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008082:	f000 b817 	b.w	80080b4 <_kill_r>
 8008086:	2b01      	cmp	r3, #1
 8008088:	d00a      	beq.n	80080a0 <_raise_r+0x4c>
 800808a:	1c59      	adds	r1, r3, #1
 800808c:	d103      	bne.n	8008096 <_raise_r+0x42>
 800808e:	2316      	movs	r3, #22
 8008090:	6003      	str	r3, [r0, #0]
 8008092:	2001      	movs	r0, #1
 8008094:	e7e7      	b.n	8008066 <_raise_r+0x12>
 8008096:	2400      	movs	r4, #0
 8008098:	4628      	mov	r0, r5
 800809a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800809e:	4798      	blx	r3
 80080a0:	2000      	movs	r0, #0
 80080a2:	e7e0      	b.n	8008066 <_raise_r+0x12>

080080a4 <raise>:
 80080a4:	4b02      	ldr	r3, [pc, #8]	; (80080b0 <raise+0xc>)
 80080a6:	4601      	mov	r1, r0
 80080a8:	6818      	ldr	r0, [r3, #0]
 80080aa:	f7ff bfd3 	b.w	8008054 <_raise_r>
 80080ae:	bf00      	nop
 80080b0:	20000064 	.word	0x20000064

080080b4 <_kill_r>:
 80080b4:	b538      	push	{r3, r4, r5, lr}
 80080b6:	2300      	movs	r3, #0
 80080b8:	4d06      	ldr	r5, [pc, #24]	; (80080d4 <_kill_r+0x20>)
 80080ba:	4604      	mov	r4, r0
 80080bc:	4608      	mov	r0, r1
 80080be:	4611      	mov	r1, r2
 80080c0:	602b      	str	r3, [r5, #0]
 80080c2:	f7f9 fb6b 	bl	800179c <_kill>
 80080c6:	1c43      	adds	r3, r0, #1
 80080c8:	d102      	bne.n	80080d0 <_kill_r+0x1c>
 80080ca:	682b      	ldr	r3, [r5, #0]
 80080cc:	b103      	cbz	r3, 80080d0 <_kill_r+0x1c>
 80080ce:	6023      	str	r3, [r4, #0]
 80080d0:	bd38      	pop	{r3, r4, r5, pc}
 80080d2:	bf00      	nop
 80080d4:	20000454 	.word	0x20000454

080080d8 <_getpid_r>:
 80080d8:	f7f9 bb59 	b.w	800178e <_getpid>

080080dc <__swhatbuf_r>:
 80080dc:	b570      	push	{r4, r5, r6, lr}
 80080de:	460c      	mov	r4, r1
 80080e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080e4:	4615      	mov	r5, r2
 80080e6:	2900      	cmp	r1, #0
 80080e8:	461e      	mov	r6, r3
 80080ea:	b096      	sub	sp, #88	; 0x58
 80080ec:	da0c      	bge.n	8008108 <__swhatbuf_r+0x2c>
 80080ee:	89a3      	ldrh	r3, [r4, #12]
 80080f0:	2100      	movs	r1, #0
 80080f2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80080f6:	bf0c      	ite	eq
 80080f8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80080fc:	2340      	movne	r3, #64	; 0x40
 80080fe:	2000      	movs	r0, #0
 8008100:	6031      	str	r1, [r6, #0]
 8008102:	602b      	str	r3, [r5, #0]
 8008104:	b016      	add	sp, #88	; 0x58
 8008106:	bd70      	pop	{r4, r5, r6, pc}
 8008108:	466a      	mov	r2, sp
 800810a:	f000 f849 	bl	80081a0 <_fstat_r>
 800810e:	2800      	cmp	r0, #0
 8008110:	dbed      	blt.n	80080ee <__swhatbuf_r+0x12>
 8008112:	9901      	ldr	r1, [sp, #4]
 8008114:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008118:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800811c:	4259      	negs	r1, r3
 800811e:	4159      	adcs	r1, r3
 8008120:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008124:	e7eb      	b.n	80080fe <__swhatbuf_r+0x22>

08008126 <__smakebuf_r>:
 8008126:	898b      	ldrh	r3, [r1, #12]
 8008128:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800812a:	079d      	lsls	r5, r3, #30
 800812c:	4606      	mov	r6, r0
 800812e:	460c      	mov	r4, r1
 8008130:	d507      	bpl.n	8008142 <__smakebuf_r+0x1c>
 8008132:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008136:	6023      	str	r3, [r4, #0]
 8008138:	6123      	str	r3, [r4, #16]
 800813a:	2301      	movs	r3, #1
 800813c:	6163      	str	r3, [r4, #20]
 800813e:	b002      	add	sp, #8
 8008140:	bd70      	pop	{r4, r5, r6, pc}
 8008142:	466a      	mov	r2, sp
 8008144:	ab01      	add	r3, sp, #4
 8008146:	f7ff ffc9 	bl	80080dc <__swhatbuf_r>
 800814a:	9900      	ldr	r1, [sp, #0]
 800814c:	4605      	mov	r5, r0
 800814e:	4630      	mov	r0, r6
 8008150:	f7fd fb96 	bl	8005880 <_malloc_r>
 8008154:	b948      	cbnz	r0, 800816a <__smakebuf_r+0x44>
 8008156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800815a:	059a      	lsls	r2, r3, #22
 800815c:	d4ef      	bmi.n	800813e <__smakebuf_r+0x18>
 800815e:	f023 0303 	bic.w	r3, r3, #3
 8008162:	f043 0302 	orr.w	r3, r3, #2
 8008166:	81a3      	strh	r3, [r4, #12]
 8008168:	e7e3      	b.n	8008132 <__smakebuf_r+0xc>
 800816a:	89a3      	ldrh	r3, [r4, #12]
 800816c:	6020      	str	r0, [r4, #0]
 800816e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008172:	81a3      	strh	r3, [r4, #12]
 8008174:	9b00      	ldr	r3, [sp, #0]
 8008176:	6120      	str	r0, [r4, #16]
 8008178:	6163      	str	r3, [r4, #20]
 800817a:	9b01      	ldr	r3, [sp, #4]
 800817c:	b15b      	cbz	r3, 8008196 <__smakebuf_r+0x70>
 800817e:	4630      	mov	r0, r6
 8008180:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008184:	f000 f81e 	bl	80081c4 <_isatty_r>
 8008188:	b128      	cbz	r0, 8008196 <__smakebuf_r+0x70>
 800818a:	89a3      	ldrh	r3, [r4, #12]
 800818c:	f023 0303 	bic.w	r3, r3, #3
 8008190:	f043 0301 	orr.w	r3, r3, #1
 8008194:	81a3      	strh	r3, [r4, #12]
 8008196:	89a3      	ldrh	r3, [r4, #12]
 8008198:	431d      	orrs	r5, r3
 800819a:	81a5      	strh	r5, [r4, #12]
 800819c:	e7cf      	b.n	800813e <__smakebuf_r+0x18>
	...

080081a0 <_fstat_r>:
 80081a0:	b538      	push	{r3, r4, r5, lr}
 80081a2:	2300      	movs	r3, #0
 80081a4:	4d06      	ldr	r5, [pc, #24]	; (80081c0 <_fstat_r+0x20>)
 80081a6:	4604      	mov	r4, r0
 80081a8:	4608      	mov	r0, r1
 80081aa:	4611      	mov	r1, r2
 80081ac:	602b      	str	r3, [r5, #0]
 80081ae:	f7f9 fb53 	bl	8001858 <_fstat>
 80081b2:	1c43      	adds	r3, r0, #1
 80081b4:	d102      	bne.n	80081bc <_fstat_r+0x1c>
 80081b6:	682b      	ldr	r3, [r5, #0]
 80081b8:	b103      	cbz	r3, 80081bc <_fstat_r+0x1c>
 80081ba:	6023      	str	r3, [r4, #0]
 80081bc:	bd38      	pop	{r3, r4, r5, pc}
 80081be:	bf00      	nop
 80081c0:	20000454 	.word	0x20000454

080081c4 <_isatty_r>:
 80081c4:	b538      	push	{r3, r4, r5, lr}
 80081c6:	2300      	movs	r3, #0
 80081c8:	4d05      	ldr	r5, [pc, #20]	; (80081e0 <_isatty_r+0x1c>)
 80081ca:	4604      	mov	r4, r0
 80081cc:	4608      	mov	r0, r1
 80081ce:	602b      	str	r3, [r5, #0]
 80081d0:	f7f9 fb51 	bl	8001876 <_isatty>
 80081d4:	1c43      	adds	r3, r0, #1
 80081d6:	d102      	bne.n	80081de <_isatty_r+0x1a>
 80081d8:	682b      	ldr	r3, [r5, #0]
 80081da:	b103      	cbz	r3, 80081de <_isatty_r+0x1a>
 80081dc:	6023      	str	r3, [r4, #0]
 80081de:	bd38      	pop	{r3, r4, r5, pc}
 80081e0:	20000454 	.word	0x20000454

080081e4 <_init>:
 80081e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e6:	bf00      	nop
 80081e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ea:	bc08      	pop	{r3}
 80081ec:	469e      	mov	lr, r3
 80081ee:	4770      	bx	lr

080081f0 <_fini>:
 80081f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f2:	bf00      	nop
 80081f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081f6:	bc08      	pop	{r3}
 80081f8:	469e      	mov	lr, r3
 80081fa:	4770      	bx	lr
