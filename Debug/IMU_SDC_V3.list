
IMU_SDC_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ed4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  08009fe8  08009fe8  00019fe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a484  0800a484  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a484  0800a484  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a484  0800a484  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a484  0800a484  0001a484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a488  0800a488  0001a488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800a48c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  200001d8  0800a664  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000590  0800a664  00020590  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010973  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000294d  00000000  00000000  00030bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001020  00000000  00000000  00033508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c96  00000000  00000000  00034528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a199  00000000  00000000  000351be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001576c  00000000  00000000  0004f357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f518  00000000  00000000  00064ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b78  00000000  00000000  000f3fdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000f9b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009fcc 	.word	0x08009fcc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08009fcc 	.word	0x08009fcc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	4605      	mov	r5, r0
 8001114:	460c      	mov	r4, r1
 8001116:	2200      	movs	r2, #0
 8001118:	2300      	movs	r3, #0
 800111a:	4628      	mov	r0, r5
 800111c:	4621      	mov	r1, r4
 800111e:	f7ff fc4d 	bl	80009bc <__aeabi_dcmplt>
 8001122:	b928      	cbnz	r0, 8001130 <__aeabi_d2lz+0x20>
 8001124:	4628      	mov	r0, r5
 8001126:	4621      	mov	r1, r4
 8001128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800112c:	f000 b80a 	b.w	8001144 <__aeabi_d2ulz>
 8001130:	4628      	mov	r0, r5
 8001132:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001136:	f000 f805 	bl	8001144 <__aeabi_d2ulz>
 800113a:	4240      	negs	r0, r0
 800113c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001140:	bd38      	pop	{r3, r4, r5, pc}
 8001142:	bf00      	nop

08001144 <__aeabi_d2ulz>:
 8001144:	b5d0      	push	{r4, r6, r7, lr}
 8001146:	2200      	movs	r2, #0
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <__aeabi_d2ulz+0x34>)
 800114a:	4606      	mov	r6, r0
 800114c:	460f      	mov	r7, r1
 800114e:	f7ff f9c3 	bl	80004d8 <__aeabi_dmul>
 8001152:	f7ff fc99 	bl	8000a88 <__aeabi_d2uiz>
 8001156:	4604      	mov	r4, r0
 8001158:	f7ff f944 	bl	80003e4 <__aeabi_ui2d>
 800115c:	2200      	movs	r2, #0
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <__aeabi_d2ulz+0x38>)
 8001160:	f7ff f9ba 	bl	80004d8 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4630      	mov	r0, r6
 800116a:	4639      	mov	r1, r7
 800116c:	f7fe fffc 	bl	8000168 <__aeabi_dsub>
 8001170:	f7ff fc8a 	bl	8000a88 <__aeabi_d2uiz>
 8001174:	4621      	mov	r1, r4
 8001176:	bdd0      	pop	{r4, r6, r7, pc}
 8001178:	3df00000 	.word	0x3df00000
 800117c:	41f00000 	.word	0x41f00000

08001180 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001186:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <MX_GPIO_Init+0x58>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	4a13      	ldr	r2, [pc, #76]	; (80011d8 <MX_GPIO_Init+0x58>)
 800118c:	f043 0320 	orr.w	r3, r3, #32
 8001190:	6193      	str	r3, [r2, #24]
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <MX_GPIO_Init+0x58>)
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	f003 0320 	and.w	r3, r3, #32
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <MX_GPIO_Init+0x58>)
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	4a0d      	ldr	r2, [pc, #52]	; (80011d8 <MX_GPIO_Init+0x58>)
 80011a4:	f043 0304 	orr.w	r3, r3, #4
 80011a8:	6193      	str	r3, [r2, #24]
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <MX_GPIO_Init+0x58>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <MX_GPIO_Init+0x58>)
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <MX_GPIO_Init+0x58>)
 80011bc:	f043 0308 	orr.w	r3, r3, #8
 80011c0:	6193      	str	r3, [r2, #24]
 80011c2:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <MX_GPIO_Init+0x58>)
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	f003 0308 	and.w	r3, r3, #8
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]

}
 80011ce:	bf00      	nop
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	40021000 	.word	0x40021000

080011dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_I2C1_Init+0x50>)
 80011e2:	4a13      	ldr	r2, [pc, #76]	; (8001230 <MX_I2C1_Init+0x54>)
 80011e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_I2C1_Init+0x50>)
 80011e8:	4a12      	ldr	r2, [pc, #72]	; (8001234 <MX_I2C1_Init+0x58>)
 80011ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_I2C1_Init+0x50>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <MX_I2C1_Init+0x50>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <MX_I2C1_Init+0x50>)
 80011fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <MX_I2C1_Init+0x50>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <MX_I2C1_Init+0x50>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <MX_I2C1_Init+0x50>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <MX_I2C1_Init+0x50>)
 8001214:	2200      	movs	r2, #0
 8001216:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <MX_I2C1_Init+0x50>)
 800121a:	f001 fb63 	bl	80028e4 <HAL_I2C_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001224:	f000 f941 	bl	80014aa <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200001f4 	.word	0x200001f4
 8001230:	40005400 	.word	0x40005400
 8001234:	00061a80 	.word	0x00061a80

08001238 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a1d      	ldr	r2, [pc, #116]	; (80012c8 <HAL_I2C_MspInit+0x90>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d132      	bne.n	80012be <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001258:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <HAL_I2C_MspInit+0x94>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a1b      	ldr	r2, [pc, #108]	; (80012cc <HAL_I2C_MspInit+0x94>)
 800125e:	f043 0308 	orr.w	r3, r3, #8
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b19      	ldr	r3, [pc, #100]	; (80012cc <HAL_I2C_MspInit+0x94>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001270:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001276:	2312      	movs	r3, #18
 8001278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800127a:	2303      	movs	r3, #3
 800127c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4619      	mov	r1, r3
 8001284:	4812      	ldr	r0, [pc, #72]	; (80012d0 <HAL_I2C_MspInit+0x98>)
 8001286:	f001 f9a9 	bl	80025dc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800128a:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_I2C_MspInit+0x9c>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
 8001290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001292:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	f043 0302 	orr.w	r3, r3, #2
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
 80012a0:	4a0c      	ldr	r2, [pc, #48]	; (80012d4 <HAL_I2C_MspInit+0x9c>)
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HAL_I2C_MspInit+0x94>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	4a08      	ldr	r2, [pc, #32]	; (80012cc <HAL_I2C_MspInit+0x94>)
 80012ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012b0:	61d3      	str	r3, [r2, #28]
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_I2C_MspInit+0x94>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012be:	bf00      	nop
 80012c0:	3728      	adds	r7, #40	; 0x28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40005400 	.word	0x40005400
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40010c00 	.word	0x40010c00
 80012d4:	40010000 	.word	0x40010000

080012d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b085      	sub	sp, #20
 80012dc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012de:	f001 f813 	bl	8002308 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e2:	f000 f89d 	bl	8001420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e6:	f7ff ff4b 	bl	8001180 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012ea:	f7ff ff77 	bl	80011dc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80012ee:	f000 fae3 	bl	80018b8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80012f2:	f000 f9ff 	bl	80016f4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	motor_init(&tmotor, PPR);
 80012f6:	f641 11c8 	movw	r1, #6600	; 0x19c8
 80012fa:	4836      	ldr	r0, [pc, #216]	; (80013d4 <main+0xfc>)
 80012fc:	f000 fd98 	bl	8001e30 <motor_init>
	pid_init(&tpid, ZERO, ZERO, ZERO, PID_CONTROLLER_LIMIT_MAX, PID_CONTROLLER_LIMIT_MIN, SAMPLING_TIME);
 8001300:	4b35      	ldr	r3, [pc, #212]	; (80013d8 <main+0x100>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fce5 	bl	8000cd4 <__aeabi_ui2f>
 800130a:	4604      	mov	r4, r0
 800130c:	4b32      	ldr	r3, [pc, #200]	; (80013d8 <main+0x100>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fcdf 	bl	8000cd4 <__aeabi_ui2f>
 8001316:	4603      	mov	r3, r0
 8001318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800131c:	4a2f      	ldr	r2, [pc, #188]	; (80013dc <main+0x104>)
 800131e:	9202      	str	r2, [sp, #8]
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	9400      	str	r4, [sp, #0]
 8001324:	f04f 0300 	mov.w	r3, #0
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	f04f 0100 	mov.w	r1, #0
 8001330:	482b      	ldr	r0, [pc, #172]	; (80013e0 <main+0x108>)
 8001332:	f000 fdea 	bl	8001f0a <pid_init>
	serial_init();
 8001336:	f000 ff9f 	bl	8002278 <serial_init>
//	PIDController_Init(&tpid, 50, ZERO, ZERO, SAMPLING_TIME);
//	  while (MPU6050_Init(&hi2c1) == 1);

	MPU6050_Init(&hi2c1);
 800133a:	482a      	ldr	r0, [pc, #168]	; (80013e4 <main+0x10c>)
 800133c:	f000 fb65 	bl	8001a0a <MPU6050_Init>
	serial_handle(urx_buff);
 8001340:	4829      	ldr	r0, [pc, #164]	; (80013e8 <main+0x110>)
 8001342:	f000 ffa7 	bl	8002294 <serial_handle>
	pid_tunning_set(&tpid, dkp, dki, dkd);
 8001346:	4b29      	ldr	r3, [pc, #164]	; (80013ec <main+0x114>)
 8001348:	6819      	ldr	r1, [r3, #0]
 800134a:	4b29      	ldr	r3, [pc, #164]	; (80013f0 <main+0x118>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4b29      	ldr	r3, [pc, #164]	; (80013f4 <main+0x11c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4823      	ldr	r0, [pc, #140]	; (80013e0 <main+0x108>)
 8001354:	f000 fe24 	bl	8001fa0 <pid_tunning_set>
	desired_angle = dset_point;
 8001358:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <main+0x120>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a27      	ldr	r2, [pc, #156]	; (80013fc <main+0x124>)
 800135e:	6013      	str	r3, [r2, #0]
	pid_tunning_set(&tpid, 5, 0.0001, 0);
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	4a26      	ldr	r2, [pc, #152]	; (8001400 <main+0x128>)
 8001366:	4927      	ldr	r1, [pc, #156]	; (8001404 <main+0x12c>)
 8001368:	481d      	ldr	r0, [pc, #116]	; (80013e0 <main+0x108>)
 800136a:	f000 fe19 	bl	8001fa0 <pid_tunning_set>
   {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		MPU6050_Read_All(&hi2c1, &MPU6050);
 800136e:	4926      	ldr	r1, [pc, #152]	; (8001408 <main+0x130>)
 8001370:	481c      	ldr	r0, [pc, #112]	; (80013e4 <main+0x10c>)
 8001372:	f000 fc31 	bl	8001bd8 <MPU6050_Read_All>
		current_angle = MPU6050.yaw;
 8001376:	4b24      	ldr	r3, [pc, #144]	; (8001408 <main+0x130>)
 8001378:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800137c:	4923      	ldr	r1, [pc, #140]	; (800140c <main+0x134>)
 800137e:	e9c1 2300 	strd	r2, r3, [r1]
		control_signal = pid_compute(&tpid, desired_angle, current_angle);
 8001382:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <main+0x124>)
 8001384:	681c      	ldr	r4, [r3, #0]
 8001386:	4b21      	ldr	r3, [pc, #132]	; (800140c <main+0x134>)
 8001388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f7ff fb9a 	bl	8000ac8 <__aeabi_d2f>
 8001394:	4603      	mov	r3, r0
 8001396:	461a      	mov	r2, r3
 8001398:	4621      	mov	r1, r4
 800139a:	4811      	ldr	r0, [pc, #68]	; (80013e0 <main+0x108>)
 800139c:	f000 fe30 	bl	8002000 <pid_compute>
 80013a0:	4603      	mov	r3, r0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f840 	bl	8000428 <__aeabi_f2d>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4918      	ldr	r1, [pc, #96]	; (8001410 <main+0x138>)
 80013ae:	e9c1 2300 	strd	r2, r3, [r1]
//      control_signal = PIDController_Compute(&tpid, desired_angle, current_angle, SAMPLING_TIME); // 0.0 as reference value
//		motor_set_duty(control_signal);
//	    MPU6050_Read_All(&hi2c1, &MPU6050);
//		sprintf(buff, "%.4f\r\n",);
		sprintf(buff, "%.4f\r\n",control_signal);
 80013b2:	4b17      	ldr	r3, [pc, #92]	; (8001410 <main+0x138>)
 80013b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b8:	4916      	ldr	r1, [pc, #88]	; (8001414 <main+0x13c>)
 80013ba:	4817      	ldr	r0, [pc, #92]	; (8001418 <main+0x140>)
 80013bc:	f004 fd4e 	bl	8005e5c <siprintf>
		HAL_UART_Transmit( &huart1, buff, sizeof(buff),100);
 80013c0:	2364      	movs	r3, #100	; 0x64
 80013c2:	220a      	movs	r2, #10
 80013c4:	4914      	ldr	r1, [pc, #80]	; (8001418 <main+0x140>)
 80013c6:	4815      	ldr	r0, [pc, #84]	; (800141c <main+0x144>)
 80013c8:	f003 fc09 	bl	8004bde <HAL_UART_Transmit>
		HAL_Delay(100);
 80013cc:	2064      	movs	r0, #100	; 0x64
 80013ce:	f000 fffd 	bl	80023cc <HAL_Delay>
		MPU6050_Read_All(&hi2c1, &MPU6050);
 80013d2:	e7cc      	b.n	800136e <main+0x96>
 80013d4:	200002d8 	.word	0x200002d8
 80013d8:	20000334 	.word	0x20000334
 80013dc:	3c23d70a 	.word	0x3c23d70a
 80013e0:	200002f0 	.word	0x200002f0
 80013e4:	200001f4 	.word	0x200001f4
 80013e8:	200003c8 	.word	0x200003c8
 80013ec:	2000042c 	.word	0x2000042c
 80013f0:	20000430 	.word	0x20000430
 80013f4:	20000434 	.word	0x20000434
 80013f8:	20000438 	.word	0x20000438
 80013fc:	20000000 	.word	0x20000000
 8001400:	38d1b717 	.word	0x38d1b717
 8001404:	40a00000 	.word	0x40a00000
 8001408:	20000268 	.word	0x20000268
 800140c:	20000258 	.word	0x20000258
 8001410:	20000260 	.word	0x20000260
 8001414:	08009fe8 	.word	0x08009fe8
 8001418:	20000248 	.word	0x20000248
 800141c:	2000037c 	.word	0x2000037c

08001420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b090      	sub	sp, #64	; 0x40
 8001424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001426:	f107 0318 	add.w	r3, r7, #24
 800142a:	2228      	movs	r2, #40	; 0x28
 800142c:	2100      	movs	r1, #0
 800142e:	4618      	mov	r0, r3
 8001430:	f004 fda3 	bl	8005f7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001442:	2301      	movs	r3, #1
 8001444:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800144a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001450:	2301      	movs	r3, #1
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001454:	2302      	movs	r3, #2
 8001456:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001458:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800145c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800145e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001462:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001464:	f107 0318 	add.w	r3, r7, #24
 8001468:	4618      	mov	r0, r3
 800146a:	f002 fa95 	bl	8003998 <HAL_RCC_OscConfig>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001474:	f000 f819 	bl	80014aa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001478:	230f      	movs	r3, #15
 800147a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147c:	2302      	movs	r3, #2
 800147e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2102      	movs	r1, #2
 8001492:	4618      	mov	r0, r3
 8001494:	f002 fd02 	bl	8003e9c <HAL_RCC_ClockConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800149e:	f000 f804 	bl	80014aa <Error_Handler>
  }
}
 80014a2:	bf00      	nop
 80014a4:	3740      	adds	r7, #64	; 0x40
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ae:	b672      	cpsid	i
}
 80014b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <Error_Handler+0x8>

080014b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <HAL_MspInit+0x5c>)
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	4a14      	ldr	r2, [pc, #80]	; (8001510 <HAL_MspInit+0x5c>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6193      	str	r3, [r2, #24]
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_MspInit+0x5c>)
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d2:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <HAL_MspInit+0x5c>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	4a0e      	ldr	r2, [pc, #56]	; (8001510 <HAL_MspInit+0x5c>)
 80014d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014dc:	61d3      	str	r3, [r2, #28]
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <HAL_MspInit+0x5c>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_MspInit+0x60>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	4a04      	ldr	r2, [pc, #16]	; (8001514 <HAL_MspInit+0x60>)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001506:	bf00      	nop
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	40021000 	.word	0x40021000
 8001514:	40010000 	.word	0x40010000

08001518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800151c:	e7fe      	b.n	800151c <NMI_Handler+0x4>

0800151e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <HardFault_Handler+0x4>

08001524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <MemManage_Handler+0x4>

0800152a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <BusFault_Handler+0x4>

08001530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <UsageFault_Handler+0x4>

08001536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr

08001542 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr

0800154e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr

0800155a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800155e:	f000 ff19 	bl	8002394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}

08001566 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  return 1;
 800156a:	2301      	movs	r3, #1
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr

08001574 <_kill>:

int _kill(int pid, int sig)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800157e:	f004 fd4f 	bl	8006020 <__errno>
 8001582:	4603      	mov	r3, r0
 8001584:	2216      	movs	r2, #22
 8001586:	601a      	str	r2, [r3, #0]
  return -1;
 8001588:	f04f 33ff 	mov.w	r3, #4294967295
}
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <_exit>:

void _exit (int status)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800159c:	f04f 31ff 	mov.w	r1, #4294967295
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ffe7 	bl	8001574 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015a6:	e7fe      	b.n	80015a6 <_exit+0x12>

080015a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	e00a      	b.n	80015d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015ba:	f3af 8000 	nop.w
 80015be:	4601      	mov	r1, r0
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	1c5a      	adds	r2, r3, #1
 80015c4:	60ba      	str	r2, [r7, #8]
 80015c6:	b2ca      	uxtb	r2, r1
 80015c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	3301      	adds	r3, #1
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	dbf0      	blt.n	80015ba <_read+0x12>
  }

  return len;
 80015d8:	687b      	ldr	r3, [r7, #4]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b086      	sub	sp, #24
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	60f8      	str	r0, [r7, #12]
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	e009      	b.n	8001608 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	60ba      	str	r2, [r7, #8]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	3301      	adds	r3, #1
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	429a      	cmp	r2, r3
 800160e:	dbf1      	blt.n	80015f4 <_write+0x12>
  }
  return len;
 8001610:	687b      	ldr	r3, [r7, #4]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <_close>:

int _close(int file)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001622:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001626:	4618      	mov	r0, r3
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr

08001630 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001640:	605a      	str	r2, [r3, #4]
  return 0;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr

0800164e <_isatty>:

int _isatty(int file)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001656:	2301      	movs	r3, #1
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr

08001662 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001662:	b480      	push	{r7}
 8001664:	b085      	sub	sp, #20
 8001666:	af00      	add	r7, sp, #0
 8001668:	60f8      	str	r0, [r7, #12]
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
	...

0800167c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001684:	4a14      	ldr	r2, [pc, #80]	; (80016d8 <_sbrk+0x5c>)
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <_sbrk+0x60>)
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001690:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <_sbrk+0x64>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d102      	bne.n	800169e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001698:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <_sbrk+0x64>)
 800169a:	4a12      	ldr	r2, [pc, #72]	; (80016e4 <_sbrk+0x68>)
 800169c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <_sbrk+0x64>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d207      	bcs.n	80016bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016ac:	f004 fcb8 	bl	8006020 <__errno>
 80016b0:	4603      	mov	r3, r0
 80016b2:	220c      	movs	r2, #12
 80016b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ba:	e009      	b.n	80016d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <_sbrk+0x64>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016c2:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <_sbrk+0x64>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <_sbrk+0x64>)
 80016cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ce:	68fb      	ldr	r3, [r7, #12]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20005000 	.word	0x20005000
 80016dc:	00000400 	.word	0x00000400
 80016e0:	20000330 	.word	0x20000330
 80016e4:	20000590 	.word	0x20000590

080016e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b092      	sub	sp, #72	; 0x48
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
 8001714:	615a      	str	r2, [r3, #20]
 8001716:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	2220      	movs	r2, #32
 800171c:	2100      	movs	r1, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f004 fc2b 	bl	8005f7a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001724:	4b39      	ldr	r3, [pc, #228]	; (800180c <MX_TIM1_Init+0x118>)
 8001726:	4a3a      	ldr	r2, [pc, #232]	; (8001810 <MX_TIM1_Init+0x11c>)
 8001728:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800172a:	4b38      	ldr	r3, [pc, #224]	; (800180c <MX_TIM1_Init+0x118>)
 800172c:	2200      	movs	r2, #0
 800172e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001730:	4b36      	ldr	r3, [pc, #216]	; (800180c <MX_TIM1_Init+0x118>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001736:	4b35      	ldr	r3, [pc, #212]	; (800180c <MX_TIM1_Init+0x118>)
 8001738:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800173c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173e:	4b33      	ldr	r3, [pc, #204]	; (800180c <MX_TIM1_Init+0x118>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001744:	4b31      	ldr	r3, [pc, #196]	; (800180c <MX_TIM1_Init+0x118>)
 8001746:	2200      	movs	r2, #0
 8001748:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174a:	4b30      	ldr	r3, [pc, #192]	; (800180c <MX_TIM1_Init+0x118>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001750:	482e      	ldr	r0, [pc, #184]	; (800180c <MX_TIM1_Init+0x118>)
 8001752:	f002 fd83 	bl	800425c <HAL_TIM_PWM_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800175c:	f7ff fea5 	bl	80014aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001760:	2300      	movs	r3, #0
 8001762:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001768:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800176c:	4619      	mov	r1, r3
 800176e:	4827      	ldr	r0, [pc, #156]	; (800180c <MX_TIM1_Init+0x118>)
 8001770:	f003 f936 	bl	80049e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800177a:	f7ff fe96 	bl	80014aa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800177e:	2360      	movs	r3, #96	; 0x60
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001786:	2300      	movs	r3, #0
 8001788:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800178a:	2300      	movs	r3, #0
 800178c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001792:	2300      	movs	r3, #0
 8001794:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001796:	2300      	movs	r3, #0
 8001798:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800179a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179e:	2200      	movs	r2, #0
 80017a0:	4619      	mov	r1, r3
 80017a2:	481a      	ldr	r0, [pc, #104]	; (800180c <MX_TIM1_Init+0x118>)
 80017a4:	f002 fe4c 	bl	8004440 <HAL_TIM_PWM_ConfigChannel>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80017ae:	f7ff fe7c 	bl	80014aa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b6:	2204      	movs	r2, #4
 80017b8:	4619      	mov	r1, r3
 80017ba:	4814      	ldr	r0, [pc, #80]	; (800180c <MX_TIM1_Init+0x118>)
 80017bc:	f002 fe40 	bl	8004440 <HAL_TIM_PWM_ConfigChannel>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80017c6:	f7ff fe70 	bl	80014aa <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	4619      	mov	r1, r3
 80017ec:	4807      	ldr	r0, [pc, #28]	; (800180c <MX_TIM1_Init+0x118>)
 80017ee:	f003 f955 	bl	8004a9c <HAL_TIMEx_ConfigBreakDeadTime>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80017f8:	f7ff fe57 	bl	80014aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017fc:	4803      	ldr	r0, [pc, #12]	; (800180c <MX_TIM1_Init+0x118>)
 80017fe:	f000 f827 	bl	8001850 <HAL_TIM_MspPostInit>

}
 8001802:	bf00      	nop
 8001804:	3748      	adds	r7, #72	; 0x48
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000334 	.word	0x20000334
 8001810:	40012c00 	.word	0x40012c00

08001814 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a09      	ldr	r2, [pc, #36]	; (8001848 <HAL_TIM_PWM_MspInit+0x34>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d10b      	bne.n	800183e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_TIM_PWM_MspInit+0x38>)
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	4a08      	ldr	r2, [pc, #32]	; (800184c <HAL_TIM_PWM_MspInit+0x38>)
 800182c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001830:	6193      	str	r3, [r2, #24]
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_TIM_PWM_MspInit+0x38>)
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800183e:	bf00      	nop
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	40012c00 	.word	0x40012c00
 800184c:	40021000 	.word	0x40021000

08001850 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 0310 	add.w	r3, r7, #16
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a10      	ldr	r2, [pc, #64]	; (80018ac <HAL_TIM_MspPostInit+0x5c>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d118      	bne.n	80018a2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001870:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <HAL_TIM_MspPostInit+0x60>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	4a0e      	ldr	r2, [pc, #56]	; (80018b0 <HAL_TIM_MspPostInit+0x60>)
 8001876:	f043 0304 	orr.w	r3, r3, #4
 800187a:	6193      	str	r3, [r2, #24]
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <HAL_TIM_MspPostInit+0x60>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001888:	f44f 7340 	mov.w	r3, #768	; 0x300
 800188c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001892:	2302      	movs	r3, #2
 8001894:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	f107 0310 	add.w	r3, r7, #16
 800189a:	4619      	mov	r1, r3
 800189c:	4805      	ldr	r0, [pc, #20]	; (80018b4 <HAL_TIM_MspPostInit+0x64>)
 800189e:	f000 fe9d 	bl	80025dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018a2:	bf00      	nop
 80018a4:	3720      	adds	r7, #32
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40012c00 	.word	0x40012c00
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40010800 	.word	0x40010800

080018b8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018bc:	4b11      	ldr	r3, [pc, #68]	; (8001904 <MX_USART1_UART_Init+0x4c>)
 80018be:	4a12      	ldr	r2, [pc, #72]	; (8001908 <MX_USART1_UART_Init+0x50>)
 80018c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <MX_USART1_UART_Init+0x4c>)
 80018c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <MX_USART1_UART_Init+0x4c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <MX_USART1_UART_Init+0x4c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <MX_USART1_UART_Init+0x4c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018dc:	4b09      	ldr	r3, [pc, #36]	; (8001904 <MX_USART1_UART_Init+0x4c>)
 80018de:	220c      	movs	r2, #12
 80018e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <MX_USART1_UART_Init+0x4c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <MX_USART1_UART_Init+0x4c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018ee:	4805      	ldr	r0, [pc, #20]	; (8001904 <MX_USART1_UART_Init+0x4c>)
 80018f0:	f003 f925 	bl	8004b3e <HAL_UART_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018fa:	f7ff fdd6 	bl	80014aa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	2000037c 	.word	0x2000037c
 8001908:	40013800 	.word	0x40013800

0800190c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	; 0x28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a22      	ldr	r2, [pc, #136]	; (80019b0 <HAL_UART_MspInit+0xa4>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d13d      	bne.n	80019a8 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800192c:	4b21      	ldr	r3, [pc, #132]	; (80019b4 <HAL_UART_MspInit+0xa8>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	4a20      	ldr	r2, [pc, #128]	; (80019b4 <HAL_UART_MspInit+0xa8>)
 8001932:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001936:	6193      	str	r3, [r2, #24]
 8001938:	4b1e      	ldr	r3, [pc, #120]	; (80019b4 <HAL_UART_MspInit+0xa8>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <HAL_UART_MspInit+0xa8>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	4a1a      	ldr	r2, [pc, #104]	; (80019b4 <HAL_UART_MspInit+0xa8>)
 800194a:	f043 0308 	orr.w	r3, r3, #8
 800194e:	6193      	str	r3, [r2, #24]
 8001950:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <HAL_UART_MspInit+0xa8>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f003 0308 	and.w	r3, r3, #8
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800195c:	2340      	movs	r3, #64	; 0x40
 800195e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001964:	2303      	movs	r3, #3
 8001966:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	4619      	mov	r1, r3
 800196e:	4812      	ldr	r0, [pc, #72]	; (80019b8 <HAL_UART_MspInit+0xac>)
 8001970:	f000 fe34 	bl	80025dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001978:	2300      	movs	r3, #0
 800197a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	4619      	mov	r1, r3
 8001986:	480c      	ldr	r0, [pc, #48]	; (80019b8 <HAL_UART_MspInit+0xac>)
 8001988:	f000 fe28 	bl	80025dc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_UART_MspInit+0xb0>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	f043 0304 	orr.w	r3, r3, #4
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
 80019a2:	4a06      	ldr	r2, [pc, #24]	; (80019bc <HAL_UART_MspInit+0xb0>)
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80019a8:	bf00      	nop
 80019aa:	3728      	adds	r7, #40	; 0x28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40013800 	.word	0x40013800
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40010c00 	.word	0x40010c00
 80019bc:	40010000 	.word	0x40010000

080019c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019c0:	f7ff fe92 	bl	80016e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c4:	480b      	ldr	r0, [pc, #44]	; (80019f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019c6:	490c      	ldr	r1, [pc, #48]	; (80019f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019cc:	e002      	b.n	80019d4 <LoopCopyDataInit>

080019ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d2:	3304      	adds	r3, #4

080019d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d8:	d3f9      	bcc.n	80019ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019da:	4a09      	ldr	r2, [pc, #36]	; (8001a00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019dc:	4c09      	ldr	r4, [pc, #36]	; (8001a04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e0:	e001      	b.n	80019e6 <LoopFillZerobss>

080019e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e4:	3204      	adds	r2, #4

080019e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e8:	d3fb      	bcc.n	80019e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ea:	f004 fb1f 	bl	800602c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ee:	f7ff fc73 	bl	80012d8 <main>
  bx lr
 80019f2:	4770      	bx	lr
  ldr r0, =_sdata
 80019f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80019fc:	0800a48c 	.word	0x0800a48c
  ldr r2, =_sbss
 8001a00:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001a04:	20000590 	.word	0x20000590

08001a08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a08:	e7fe      	b.n	8001a08 <ADC1_2_IRQHandler>

08001a0a <MPU6050_Init>:
const double Accel_Z_corrector = 14418.0;

uint32_t timer;

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b088      	sub	sp, #32
 8001a0e:	af04      	add	r7, sp, #16
 8001a10:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001a12:	2364      	movs	r3, #100	; 0x64
 8001a14:	9302      	str	r3, [sp, #8]
 8001a16:	2301      	movs	r3, #1
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	f107 030f 	add.w	r3, r7, #15
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	2301      	movs	r3, #1
 8001a22:	2275      	movs	r2, #117	; 0x75
 8001a24:	21d0      	movs	r1, #208	; 0xd0
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f001 f99a 	bl	8002d60 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	2b68      	cmp	r3, #104	; 0x68
 8001a30:	d13d      	bne.n	8001aae <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001a36:	2364      	movs	r3, #100	; 0x64
 8001a38:	9302      	str	r3, [sp, #8]
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	9301      	str	r3, [sp, #4]
 8001a3e:	f107 030e 	add.w	r3, r7, #14
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	2301      	movs	r3, #1
 8001a46:	226b      	movs	r2, #107	; 0x6b
 8001a48:	21d0      	movs	r1, #208	; 0xd0
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f001 f88e 	bl	8002b6c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001a50:	2307      	movs	r3, #7
 8001a52:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001a54:	2364      	movs	r3, #100	; 0x64
 8001a56:	9302      	str	r3, [sp, #8]
 8001a58:	2301      	movs	r3, #1
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	f107 030e 	add.w	r3, r7, #14
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	2301      	movs	r3, #1
 8001a64:	2219      	movs	r2, #25
 8001a66:	21d0      	movs	r1, #208	; 0xd0
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f001 f87f 	bl	8002b6c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001a72:	2364      	movs	r3, #100	; 0x64
 8001a74:	9302      	str	r3, [sp, #8]
 8001a76:	2301      	movs	r3, #1
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	f107 030e 	add.w	r3, r7, #14
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	2301      	movs	r3, #1
 8001a82:	221c      	movs	r2, #28
 8001a84:	21d0      	movs	r1, #208	; 0xd0
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f001 f870 	bl	8002b6c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001a90:	2364      	movs	r3, #100	; 0x64
 8001a92:	9302      	str	r3, [sp, #8]
 8001a94:	2301      	movs	r3, #1
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	f107 030e 	add.w	r3, r7, #14
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	221b      	movs	r2, #27
 8001aa2:	21d0      	movs	r1, #208	; 0xd0
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f001 f861 	bl	8002b6c <HAL_I2C_Mem_Write>
        return 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	e000      	b.n	8001ab0 <MPU6050_Init+0xa6>
    }
    return 1;
 8001aae:	2301      	movs	r3, #1
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <lpf_trap>:
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
}
float lpf_trap(float draw_signal_value, float dpre_raw_signal_value, float dpre_filtered_value, float dfc, float dts)
{
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b08b      	sub	sp, #44	; 0x2c
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
 8001ac4:	603b      	str	r3, [r7, #0]
    float dfiltered_value = 0.0f;
 8001ac6:	f04f 0300 	mov.w	r3, #0
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
    float da1 = 0.0f;
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	623b      	str	r3, [r7, #32]
    float db0 = 0.0f;
 8001ad2:	f04f 0300 	mov.w	r3, #0
 8001ad6:	61fb      	str	r3, [r7, #28]
    float db1 = 0.0f;
 8001ad8:	f04f 0300 	mov.w	r3, #0
 8001adc:	61bb      	str	r3, [r7, #24]
    float dwc = 0.0f;
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]

    if (dfc < 0.0f || dts < 0.0f)
 8001ae4:	f04f 0100 	mov.w	r1, #0
 8001ae8:	6838      	ldr	r0, [r7, #0]
 8001aea:	f7ff fae9 	bl	80010c0 <__aeabi_fcmplt>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d107      	bne.n	8001b04 <lpf_trap+0x4c>
 8001af4:	f04f 0100 	mov.w	r1, #0
 8001af8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001afa:	f7ff fae1 	bl	80010c0 <__aeabi_fcmplt>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <lpf_trap+0x50>
    {
        return dfiltered_value;
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	e05e      	b.n	8001bc6 <lpf_trap+0x10e>
    }

    dwc = dfc * 2 * 3.141592f; // rad/s
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff f831 	bl	8000b74 <__addsf3>
 8001b12:	4603      	mov	r3, r0
 8001b14:	492e      	ldr	r1, [pc, #184]	; (8001bd0 <lpf_trap+0x118>)
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff f934 	bl	8000d84 <__aeabi_fmul>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	617b      	str	r3, [r7, #20]
    da1 = (2.0f - dwc * dts) / (2.0f + dwc * dts);
 8001b20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001b22:	6978      	ldr	r0, [r7, #20]
 8001b24:	f7ff f92e 	bl	8000d84 <__aeabi_fmul>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001b30:	f7ff f81e 	bl	8000b70 <__aeabi_fsub>
 8001b34:	4603      	mov	r3, r0
 8001b36:	461c      	mov	r4, r3
 8001b38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001b3a:	6978      	ldr	r0, [r7, #20]
 8001b3c:	f7ff f922 	bl	8000d84 <__aeabi_fmul>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff f814 	bl	8000b74 <__addsf3>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4620      	mov	r0, r4
 8001b52:	f7ff f9cb 	bl	8000eec <__aeabi_fdiv>
 8001b56:	4603      	mov	r3, r0
 8001b58:	623b      	str	r3, [r7, #32]
    db0 = (dwc * dts) / (2.0f + dwc * dts);
 8001b5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001b5c:	6978      	ldr	r0, [r7, #20]
 8001b5e:	f7ff f911 	bl	8000d84 <__aeabi_fmul>
 8001b62:	4603      	mov	r3, r0
 8001b64:	461c      	mov	r4, r3
 8001b66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001b68:	6978      	ldr	r0, [r7, #20]
 8001b6a:	f7ff f90b 	bl	8000d84 <__aeabi_fmul>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fffd 	bl	8000b74 <__addsf3>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4620      	mov	r0, r4
 8001b80:	f7ff f9b4 	bl	8000eec <__aeabi_fdiv>
 8001b84:	4603      	mov	r3, r0
 8001b86:	61fb      	str	r3, [r7, #28]
    db1 = db0;
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	61bb      	str	r3, [r7, #24]
    dfiltered_value = da1 * dpre_filtered_value + db0 * draw_signal_value + db1 * dpre_raw_signal_value;
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	6a38      	ldr	r0, [r7, #32]
 8001b90:	f7ff f8f8 	bl	8000d84 <__aeabi_fmul>
 8001b94:	4603      	mov	r3, r0
 8001b96:	461c      	mov	r4, r3
 8001b98:	68f9      	ldr	r1, [r7, #12]
 8001b9a:	69f8      	ldr	r0, [r7, #28]
 8001b9c:	f7ff f8f2 	bl	8000d84 <__aeabi_fmul>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	f7fe ffe5 	bl	8000b74 <__addsf3>
 8001baa:	4603      	mov	r3, r0
 8001bac:	461c      	mov	r4, r3
 8001bae:	68b9      	ldr	r1, [r7, #8]
 8001bb0:	69b8      	ldr	r0, [r7, #24]
 8001bb2:	f7ff f8e7 	bl	8000d84 <__aeabi_fmul>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4620      	mov	r0, r4
 8001bbc:	f7fe ffda 	bl	8000b74 <__addsf3>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
//    dpre_raw_signal_value = draw_signal_value;
//    dpre_filtered_value = dfiltered_value;
    return dfiltered_value;
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	372c      	adds	r7, #44	; 0x2c
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd90      	pop	{r4, r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40490fd8 	.word	0x40490fd8
 8001bd4:	00000000 	.word	0x00000000

08001bd8 <MPU6050_Read_All>:

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bda:	b08f      	sub	sp, #60	; 0x3c
 8001bdc:	af04      	add	r7, sp, #16
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001be2:	2364      	movs	r3, #100	; 0x64
 8001be4:	9302      	str	r3, [sp, #8]
 8001be6:	230e      	movs	r3, #14
 8001be8:	9301      	str	r3, [sp, #4]
 8001bea:	f107 0308 	add.w	r3, r7, #8
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	223b      	movs	r2, #59	; 0x3b
 8001bf4:	21d0      	movs	r1, #208	; 0xd0
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f001 f8b2 	bl	8002d60 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001bfc:	7a3b      	ldrb	r3, [r7, #8]
 8001bfe:	021b      	lsls	r3, r3, #8
 8001c00:	b21a      	sxth	r2, r3
 8001c02:	7a7b      	ldrb	r3, [r7, #9]
 8001c04:	b21b      	sxth	r3, r3
 8001c06:	4313      	orrs	r3, r2
 8001c08:	b21a      	sxth	r2, r3
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001c0e:	7abb      	ldrb	r3, [r7, #10]
 8001c10:	021b      	lsls	r3, r3, #8
 8001c12:	b21a      	sxth	r2, r3
 8001c14:	7afb      	ldrb	r3, [r7, #11]
 8001c16:	b21b      	sxth	r3, r3
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	b21a      	sxth	r2, r3
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001c20:	7b3b      	ldrb	r3, [r7, #12]
 8001c22:	021b      	lsls	r3, r3, #8
 8001c24:	b21a      	sxth	r2, r3
 8001c26:	7b7b      	ldrb	r3, [r7, #13]
 8001c28:	b21b      	sxth	r3, r3
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	b21a      	sxth	r2, r3
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8001c32:	7bbb      	ldrb	r3, [r7, #14]
 8001c34:	021b      	lsls	r3, r3, #8
 8001c36:	b21a      	sxth	r2, r3
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	b21b      	sxth	r3, r3
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	84fb      	strh	r3, [r7, #38]	; 0x26
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001c40:	7c3b      	ldrb	r3, [r7, #16]
 8001c42:	021b      	lsls	r3, r3, #8
 8001c44:	b21a      	sxth	r2, r3
 8001c46:	7c7b      	ldrb	r3, [r7, #17]
 8001c48:	b21b      	sxth	r3, r3
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	b21a      	sxth	r2, r3
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8001c54:	7cbb      	ldrb	r3, [r7, #18]
 8001c56:	021b      	lsls	r3, r3, #8
 8001c58:	b21a      	sxth	r2, r3
 8001c5a:	7cfb      	ldrb	r3, [r7, #19]
 8001c5c:	b21b      	sxth	r3, r3
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	b21a      	sxth	r2, r3
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8001c68:	7d3b      	ldrb	r3, [r7, #20]
 8001c6a:	021b      	lsls	r3, r3, #8
 8001c6c:	b21a      	sxth	r2, r3
 8001c6e:	7d7b      	ldrb	r3, [r7, #21]
 8001c70:	b21b      	sxth	r3, r3
 8001c72:	4313      	orrs	r3, r2
 8001c74:	b21a      	sxth	r2, r3
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe fbbe 	bl	8000404 <__aeabi_i2d>
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	4b64      	ldr	r3, [pc, #400]	; (8001e20 <MPU6050_Read_All+0x248>)
 8001c8e:	f7fe fd4d 	bl	800072c <__aeabi_ddiv>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	6839      	ldr	r1, [r7, #0]
 8001c98:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fbae 	bl	8000404 <__aeabi_i2d>
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	4b5c      	ldr	r3, [pc, #368]	; (8001e20 <MPU6050_Read_All+0x248>)
 8001cae:	f7fe fd3d 	bl	800072c <__aeabi_ddiv>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	6839      	ldr	r1, [r7, #0]
 8001cb8:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe fb9e 	bl	8000404 <__aeabi_i2d>
 8001cc8:	a34f      	add	r3, pc, #316	; (adr r3, 8001e08 <MPU6050_Read_All+0x230>)
 8001cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cce:	f7fe fd2d 	bl	800072c <__aeabi_ddiv>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	6839      	ldr	r1, [r7, #0]
 8001cd8:	e9c1 2306 	strd	r2, r3, [r1, #24]
//    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fb8e 	bl	8000404 <__aeabi_i2d>
 8001ce8:	a349      	add	r3, pc, #292	; (adr r3, 8001e10 <MPU6050_Read_All+0x238>)
 8001cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cee:	f7fe fd1d 	bl	800072c <__aeabi_ddiv>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	6839      	ldr	r1, [r7, #0]
 8001cf8:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fb7e 	bl	8000404 <__aeabi_i2d>
 8001d08:	a341      	add	r3, pc, #260	; (adr r3, 8001e10 <MPU6050_Read_All+0x238>)
 8001d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0e:	f7fe fd0d 	bl	800072c <__aeabi_ddiv>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	6839      	ldr	r1, [r7, #0]
 8001d18:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0 + 1.1244;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe fb6e 	bl	8000404 <__aeabi_i2d>
 8001d28:	a339      	add	r3, pc, #228	; (adr r3, 8001e10 <MPU6050_Read_All+0x238>)
 8001d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2e:	f7fe fcfd 	bl	800072c <__aeabi_ddiv>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4610      	mov	r0, r2
 8001d38:	4619      	mov	r1, r3
 8001d3a:	a337      	add	r3, pc, #220	; (adr r3, 8001e18 <MPU6050_Read_All+0x240>)
 8001d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d40:	f7fe fa14 	bl	800016c <__adddf3>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	6839      	ldr	r1, [r7, #0]
 8001d4a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
// DFL
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001d4e:	f000 fb33 	bl	80023b8 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	4b33      	ldr	r3, [pc, #204]	; (8001e24 <MPU6050_Read_All+0x24c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fb42 	bl	80003e4 <__aeabi_ui2d>
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	4b30      	ldr	r3, [pc, #192]	; (8001e28 <MPU6050_Read_All+0x250>)
 8001d66:	f7fe fce1 	bl	800072c <__aeabi_ddiv>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	e9c7 2306 	strd	r2, r3, [r7, #24]
       timer = HAL_GetTick();
 8001d72:	f000 fb21 	bl	80023b8 <HAL_GetTick>
 8001d76:	4603      	mov	r3, r0
 8001d78:	4a2a      	ldr	r2, [pc, #168]	; (8001e24 <MPU6050_Read_All+0x24c>)
 8001d7a:	6013      	str	r3, [r2, #0]

       DataStruct->fil_Gz = lpf_trap(DataStruct->Gz, DataStruct->pre_Gz, DataStruct->pf_Gz, 10000, dt);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001d82:	4610      	mov	r0, r2
 8001d84:	4619      	mov	r1, r3
 8001d86:	f7fe fe9f 	bl	8000ac8 <__aeabi_d2f>
 8001d8a:	4604      	mov	r4, r0
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001d92:	4610      	mov	r0, r2
 8001d94:	4619      	mov	r1, r3
 8001d96:	f7fe fe97 	bl	8000ac8 <__aeabi_d2f>
 8001d9a:	4605      	mov	r5, r0
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001da2:	4610      	mov	r0, r2
 8001da4:	4619      	mov	r1, r3
 8001da6:	f7fe fe8f 	bl	8000ac8 <__aeabi_d2f>
 8001daa:	4606      	mov	r6, r0
 8001dac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001db0:	f7fe fe8a 	bl	8000ac8 <__aeabi_d2f>
 8001db4:	4603      	mov	r3, r0
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <MPU6050_Read_All+0x254>)
 8001dba:	4632      	mov	r2, r6
 8001dbc:	4629      	mov	r1, r5
 8001dbe:	4620      	mov	r0, r4
 8001dc0:	f7ff fe7a 	bl	8001ab8 <lpf_trap>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fb2e 	bl	8000428 <__aeabi_f2d>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	6839      	ldr	r1, [r7, #0]
 8001dd2:	e9c1 2308 	strd	r2, r3, [r1, #32]

       DataStruct->yaw += DataStruct->fil_Gz * dt;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001de2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001de6:	f7fe fb77 	bl	80004d8 <__aeabi_dmul>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4620      	mov	r0, r4
 8001df0:	4629      	mov	r1, r5
 8001df2:	f7fe f9bb 	bl	800016c <__adddf3>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	6839      	ldr	r1, [r7, #0]
 8001dfc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8001e00:	bf00      	nop
 8001e02:	372c      	adds	r7, #44	; 0x2c
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e08:	00000000 	.word	0x00000000
 8001e0c:	40cc2900 	.word	0x40cc2900
 8001e10:	00000000 	.word	0x00000000
 8001e14:	40606000 	.word	0x40606000
 8001e18:	dab9f55a 	.word	0xdab9f55a
 8001e1c:	3ff1fd8a 	.word	0x3ff1fd8a
 8001e20:	40d00000 	.word	0x40d00000
 8001e24:	200003c4 	.word	0x200003c4
 8001e28:	408f4000 	.word	0x408f4000
 8001e2c:	461c4000 	.word	0x461c4000

08001e30 <motor_init>:
#include "motor.h"

void motor_init(Motor_t *tmotor, uint32_t ipulse)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
    if (tmotor == NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d011      	beq.n	8001e64 <motor_init+0x34>
    {
        // Handle null pointer error
        return;
    }

    motor_reset(tmotor);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f815 	bl	8001e70 <motor_reset>
    tmotor->ipulse_per_round = ipulse;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&INTERUPT_TIMER);
 8001e4c:	4807      	ldr	r0, [pc, #28]	; (8001e6c <motor_init+0x3c>)
 8001e4e:	f002 f9b3 	bl	80041b8 <HAL_TIM_Base_Start_IT>
//    HAL_TIM_Encoder_Start(&ECODER_TIMER, TIM_CHANNEL_1);
//    HAL_TIM_Encoder_Start(&ECODER_TIMER, TIM_CHANNEL_2);
    HAL_TIM_PWM_Start(&PWM_TIMER, TIM_CHANNEL_1);
 8001e52:	2100      	movs	r1, #0
 8001e54:	4805      	ldr	r0, [pc, #20]	; (8001e6c <motor_init+0x3c>)
 8001e56:	f002 fa51 	bl	80042fc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&PWM_TIMER, TIM_CHANNEL_2);
 8001e5a:	2104      	movs	r1, #4
 8001e5c:	4803      	ldr	r0, [pc, #12]	; (8001e6c <motor_init+0x3c>)
 8001e5e:	f002 fa4d 	bl	80042fc <HAL_TIM_PWM_Start>
 8001e62:	e000      	b.n	8001e66 <motor_init+0x36>
        return;
 8001e64:	bf00      	nop
}
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000334 	.word	0x20000334

08001e70 <motor_reset>:
void motor_reset(Motor_t *tmotor)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
    if (tmotor == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d013      	beq.n	8001ea6 <motor_reset+0x36>
    {
        // Handle null pointer error
        return;
    }
    tmotor->icounter = 0;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	809a      	strh	r2, [r3, #4]
    tmotor->dvelocity = 0.0f;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	609a      	str	r2, [r3, #8]
    tmotor->dposition = 0.0f;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	60da      	str	r2, [r3, #12]
    tmotor->dreference_velocity = 0.0f;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
    tmotor->dreference_position = 0.0f;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	615a      	str	r2, [r3, #20]
 8001ea4:	e000      	b.n	8001ea8 <motor_reset+0x38>
        return;
 8001ea6:	bf00      	nop
}
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr

08001eb0 <pid_reset>:
#include "pid.h"

// reset PID params
void pid_reset(PID_CONTROL_t *tpid_ctrl)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
    if (tpid_ctrl == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d020      	beq.n	8001f00 <pid_reset+0x50>
    {
        // Handle null pointer error
        return;
    }
    tpid_ctrl->dlim_max_int = 0.0f;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	615a      	str	r2, [r3, #20]
    tpid_ctrl->dlim_min_int = 0.0f;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	619a      	str	r2, [r3, #24]

    tpid_ctrl->derror = 0.0f;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	621a      	str	r2, [r3, #32]
    tpid_ctrl->dpre_error = 0.0f;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	625a      	str	r2, [r3, #36]	; 0x24

    tpid_ctrl->dproportional = 0.0f;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	631a      	str	r2, [r3, #48]	; 0x30
    tpid_ctrl->dintergral = 0.0f;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	635a      	str	r2, [r3, #52]	; 0x34
    tpid_ctrl->dderivative = 0.0f;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	639a      	str	r2, [r3, #56]	; 0x38

    tpid_ctrl->dresult = 0.0f;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	63da      	str	r2, [r3, #60]	; 0x3c
 8001efe:	e000      	b.n	8001f02 <pid_reset+0x52>
        return;
 8001f00:	bf00      	nop
}
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr

08001f0a <pid_init>:

// init PID
void pid_init(PID_CONTROL_t *tpid_ctrl, float dkp, float dki, float dkd, float dlimit_max, float dlimit_min, float dts)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b084      	sub	sp, #16
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
 8001f16:	603b      	str	r3, [r7, #0]
    if (tpid_ctrl == NULL || dkp < 0.0f || dki < 0.0f || dkd < 0.0f || dts < 0.0f || dlimit_max < dlimit_min)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d03c      	beq.n	8001f98 <pid_init+0x8e>
 8001f1e:	f04f 0100 	mov.w	r1, #0
 8001f22:	68b8      	ldr	r0, [r7, #8]
 8001f24:	f7ff f8cc 	bl	80010c0 <__aeabi_fcmplt>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d134      	bne.n	8001f98 <pid_init+0x8e>
 8001f2e:	f04f 0100 	mov.w	r1, #0
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff f8c4 	bl	80010c0 <__aeabi_fcmplt>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d12c      	bne.n	8001f98 <pid_init+0x8e>
 8001f3e:	f04f 0100 	mov.w	r1, #0
 8001f42:	6838      	ldr	r0, [r7, #0]
 8001f44:	f7ff f8bc 	bl	80010c0 <__aeabi_fcmplt>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d124      	bne.n	8001f98 <pid_init+0x8e>
 8001f4e:	f04f 0100 	mov.w	r1, #0
 8001f52:	6a38      	ldr	r0, [r7, #32]
 8001f54:	f7ff f8b4 	bl	80010c0 <__aeabi_fcmplt>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d11c      	bne.n	8001f98 <pid_init+0x8e>
 8001f5e:	69f9      	ldr	r1, [r7, #28]
 8001f60:	69b8      	ldr	r0, [r7, #24]
 8001f62:	f7ff f8ad 	bl	80010c0 <__aeabi_fcmplt>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d115      	bne.n	8001f98 <pid_init+0x8e>
    {
        // Handle invalid parameters or null pointer error
        return;
    }
    pid_reset(tpid_ctrl);
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f7ff ff9f 	bl	8001eb0 <pid_reset>
    tpid_ctrl->dkp = dkp;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	601a      	str	r2, [r3, #0]
    tpid_ctrl->dki = dki;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	605a      	str	r2, [r3, #4]
    tpid_ctrl->dkd = dkd;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	609a      	str	r2, [r3, #8]

    tpid_ctrl->dlim_max = dlimit_max;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	611a      	str	r2, [r3, #16]
    tpid_ctrl->dlim_min = dlimit_min;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	69fa      	ldr	r2, [r7, #28]
 8001f8e:	60da      	str	r2, [r3, #12]

    tpid_ctrl->dts = dts;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6a3a      	ldr	r2, [r7, #32]
 8001f94:	61da      	str	r2, [r3, #28]
 8001f96:	e000      	b.n	8001f9a <pid_init+0x90>
        return;
 8001f98:	bf00      	nop
}
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <pid_tunning_set>:

// set new PID params
void pid_tunning_set(PID_CONTROL_t *tpid_ctrl, float dkp, float dki, float dkd)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
 8001fac:	603b      	str	r3, [r7, #0]
    if (tpid_ctrl == NULL || dkp < 0.0f || dki < 0.0f || dkd < 0.0f)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d021      	beq.n	8001ff8 <pid_tunning_set+0x58>
 8001fb4:	f04f 0100 	mov.w	r1, #0
 8001fb8:	68b8      	ldr	r0, [r7, #8]
 8001fba:	f7ff f881 	bl	80010c0 <__aeabi_fcmplt>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d119      	bne.n	8001ff8 <pid_tunning_set+0x58>
 8001fc4:	f04f 0100 	mov.w	r1, #0
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff f879 	bl	80010c0 <__aeabi_fcmplt>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d111      	bne.n	8001ff8 <pid_tunning_set+0x58>
 8001fd4:	f04f 0100 	mov.w	r1, #0
 8001fd8:	6838      	ldr	r0, [r7, #0]
 8001fda:	f7ff f871 	bl	80010c0 <__aeabi_fcmplt>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d109      	bne.n	8001ff8 <pid_tunning_set+0x58>
    {
        // Handle invalid parameters or null pointer error
        return;
    }

    tpid_ctrl->dkp = dkp;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	601a      	str	r2, [r3, #0]
    tpid_ctrl->dki = dki;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	605a      	str	r2, [r3, #4]
    tpid_ctrl->dkd = dkd;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	609a      	str	r2, [r3, #8]
 8001ff6:	e000      	b.n	8001ffa <pid_tunning_set+0x5a>
        return;
 8001ff8:	bf00      	nop
}
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <pid_compute>:
	return tpid_ctrl->dresult;
}

// Compute PID Controllers
float pid_compute(PID_CONTROL_t *tpid_ctrl, float dcmd_value, float dact_value)
{
 8002000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002004:	b08a      	sub	sp, #40	; 0x28
 8002006:	af06      	add	r7, sp, #24
 8002008:	60f8      	str	r0, [r7, #12]
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
    if (tpid_ctrl == NULL)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d102      	bne.n	800201a <pid_compute+0x1a>
    {
        // Handle null pointer error
        return 0.0f; // or any default value indicating an error
 8002014:	f04f 0300 	mov.w	r3, #0
 8002018:	e128      	b.n	800226c <pid_compute+0x26c>
    }

    // Calculate error value
    tpid_ctrl->derror = dcmd_value - dact_value;
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	68b8      	ldr	r0, [r7, #8]
 800201e:	f7fe fda7 	bl	8000b70 <__aeabi_fsub>
 8002022:	4603      	mov	r3, r0
 8002024:	461a      	mov	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	621a      	str	r2, [r3, #32]

    // P part
    tpid_ctrl->dproportional = tpid_ctrl->dkp * tpid_ctrl->derror;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	4619      	mov	r1, r3
 8002034:	4610      	mov	r0, r2
 8002036:	f7fe fea5 	bl	8000d84 <__aeabi_fmul>
 800203a:	4603      	mov	r3, r0
 800203c:	461a      	mov	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	631a      	str	r2, [r3, #48]	; 0x30

    // I part
    tpid_ctrl->dintergral += 0.5f * tpid_ctrl->dki * tpid_ctrl->dts * (tpid_ctrl->derror + tpid_ctrl->dpre_error);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe fe98 	bl	8000d84 <__aeabi_fmul>
 8002054:	4603      	mov	r3, r0
 8002056:	461a      	mov	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	4619      	mov	r1, r3
 800205e:	4610      	mov	r0, r2
 8002060:	f7fe fe90 	bl	8000d84 <__aeabi_fmul>
 8002064:	4603      	mov	r3, r0
 8002066:	461d      	mov	r5, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6a1a      	ldr	r2, [r3, #32]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	4619      	mov	r1, r3
 8002072:	4610      	mov	r0, r2
 8002074:	f7fe fd7e 	bl	8000b74 <__addsf3>
 8002078:	4603      	mov	r3, r0
 800207a:	4619      	mov	r1, r3
 800207c:	4628      	mov	r0, r5
 800207e:	f7fe fe81 	bl	8000d84 <__aeabi_fmul>
 8002082:	4603      	mov	r3, r0
 8002084:	4619      	mov	r1, r3
 8002086:	4620      	mov	r0, r4
 8002088:	f7fe fd74 	bl	8000b74 <__addsf3>
 800208c:	4603      	mov	r3, r0
 800208e:	461a      	mov	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	635a      	str	r2, [r3, #52]	; 0x34

    // Integrator Anti-windup

    // Update integral Limits
    if (tpid_ctrl->dlim_max > tpid_ctrl->dproportional)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209c:	4619      	mov	r1, r3
 800209e:	4610      	mov	r0, r2
 80020a0:	f7ff f82c 	bl	80010fc <__aeabi_fcmpgt>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00c      	beq.n	80020c4 <pid_compute+0xc4>
    {
        tpid_ctrl->dlim_max_int = tpid_ctrl->dlim_max - tpid_ctrl->dproportional;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	691a      	ldr	r2, [r3, #16]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4619      	mov	r1, r3
 80020b4:	4610      	mov	r0, r2
 80020b6:	f7fe fd5b 	bl	8000b70 <__aeabi_fsub>
 80020ba:	4603      	mov	r3, r0
 80020bc:	461a      	mov	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	615a      	str	r2, [r3, #20]
 80020c2:	e003      	b.n	80020cc <pid_compute+0xcc>
    }
    else
    {
        tpid_ctrl->dlim_max_int = 0.0f;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	615a      	str	r2, [r3, #20]
    }
    if (tpid_ctrl->dlim_min < tpid_ctrl->dproportional)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	4619      	mov	r1, r3
 80020d6:	4610      	mov	r0, r2
 80020d8:	f7fe fff2 	bl	80010c0 <__aeabi_fcmplt>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00c      	beq.n	80020fc <pid_compute+0xfc>
    {
        tpid_ctrl->dlim_min_int = tpid_ctrl->dlim_min - tpid_ctrl->dproportional;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4619      	mov	r1, r3
 80020ec:	4610      	mov	r0, r2
 80020ee:	f7fe fd3f 	bl	8000b70 <__aeabi_fsub>
 80020f2:	4603      	mov	r3, r0
 80020f4:	461a      	mov	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	619a      	str	r2, [r3, #24]
 80020fa:	e003      	b.n	8002104 <pid_compute+0x104>
    }
    else
    {
        tpid_ctrl->dlim_min_int = 0.0f;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	619a      	str	r2, [r3, #24]
    }
    // Apply integral limits
    if (tpid_ctrl->dintergral > tpid_ctrl->dlim_max_int)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	4619      	mov	r1, r3
 800210e:	4610      	mov	r0, r2
 8002110:	f7fe fff4 	bl	80010fc <__aeabi_fcmpgt>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d004      	beq.n	8002124 <pid_compute+0x124>
    {
        tpid_ctrl->dintergral = tpid_ctrl->dlim_max_int;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	695a      	ldr	r2, [r3, #20]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	635a      	str	r2, [r3, #52]	; 0x34
 8002122:	e00e      	b.n	8002142 <pid_compute+0x142>
    }
    else if (tpid_ctrl->dintergral < tpid_ctrl->dlim_min_int)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	4619      	mov	r1, r3
 800212e:	4610      	mov	r0, r2
 8002130:	f7fe ffc6 	bl	80010c0 <__aeabi_fcmplt>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <pid_compute+0x142>
    {
        tpid_ctrl->dintergral = tpid_ctrl->dlim_min_int;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	699a      	ldr	r2, [r3, #24]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	635a      	str	r2, [r3, #52]	; 0x34
    }
    // D part
    tpid_ctrl->dfiltered_error = lpf_trap(tpid_ctrl->derror, tpid_ctrl->dpre_error, tpid_ctrl->dpre_filtered_error, CUT_OFF_FREQUENCY, tpid_ctrl->dts);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe f96e 	bl	8000428 <__aeabi_f2d>
 800214c:	4680      	mov	r8, r0
 800214e:	4689      	mov	r9, r1
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe f967 	bl	8000428 <__aeabi_f2d>
 800215a:	4682      	mov	sl, r0
 800215c:	468b      	mov	fp, r1
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe f960 	bl	8000428 <__aeabi_f2d>
 8002168:	4604      	mov	r4, r0
 800216a:	460d      	mov	r5, r1
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe f959 	bl	8000428 <__aeabi_f2d>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800217e:	230a      	movs	r3, #10
 8002180:	9302      	str	r3, [sp, #8]
 8002182:	e9cd 4500 	strd	r4, r5, [sp]
 8002186:	4652      	mov	r2, sl
 8002188:	465b      	mov	r3, fp
 800218a:	4640      	mov	r0, r8
 800218c:	4649      	mov	r1, r9
 800218e:	f7ff fc93 	bl	8001ab8 <lpf_trap>
 8002192:	4603      	mov	r3, r0
 8002194:	4618      	mov	r0, r3
 8002196:	f7fe fda1 	bl	8000cdc <__aeabi_i2f>
 800219a:	4602      	mov	r2, r0
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	629a      	str	r2, [r3, #40]	; 0x28


    tpid_ctrl->dderivative = 2.0f * tpid_ctrl->dkd / tpid_ctrl->dts * (tpid_ctrl->dfiltered_error - tpid_ctrl->dpre_filtered_error) - (tpid_ctrl->dderivative);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	4619      	mov	r1, r3
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe fce4 	bl	8000b74 <__addsf3>
 80021ac:	4603      	mov	r3, r0
 80021ae:	461a      	mov	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	4619      	mov	r1, r3
 80021b6:	4610      	mov	r0, r2
 80021b8:	f7fe fe98 	bl	8000eec <__aeabi_fdiv>
 80021bc:	4603      	mov	r3, r0
 80021be:	461c      	mov	r4, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c8:	4619      	mov	r1, r3
 80021ca:	4610      	mov	r0, r2
 80021cc:	f7fe fcd0 	bl	8000b70 <__aeabi_fsub>
 80021d0:	4603      	mov	r3, r0
 80021d2:	4619      	mov	r1, r3
 80021d4:	4620      	mov	r0, r4
 80021d6:	f7fe fdd5 	bl	8000d84 <__aeabi_fmul>
 80021da:	4603      	mov	r3, r0
 80021dc:	461a      	mov	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e2:	4619      	mov	r1, r3
 80021e4:	4610      	mov	r0, r2
 80021e6:	f7fe fcc3 	bl	8000b70 <__aeabi_fsub>
 80021ea:	4603      	mov	r3, r0
 80021ec:	461a      	mov	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	639a      	str	r2, [r3, #56]	; 0x38

    // Compute output and apply limits
    tpid_ctrl->dresult = tpid_ctrl->dproportional + tpid_ctrl->dintergral + tpid_ctrl->dderivative;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021fa:	4619      	mov	r1, r3
 80021fc:	4610      	mov	r0, r2
 80021fe:	f7fe fcb9 	bl	8000b74 <__addsf3>
 8002202:	4603      	mov	r3, r0
 8002204:	461a      	mov	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220a:	4619      	mov	r1, r3
 800220c:	4610      	mov	r0, r2
 800220e:	f7fe fcb1 	bl	8000b74 <__addsf3>
 8002212:	4603      	mov	r3, r0
 8002214:	461a      	mov	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	63da      	str	r2, [r3, #60]	; 0x3c

    if (tpid_ctrl->dresult > tpid_ctrl->dlim_max)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	4619      	mov	r1, r3
 8002224:	4610      	mov	r0, r2
 8002226:	f7fe ff69 	bl	80010fc <__aeabi_fcmpgt>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d004      	beq.n	800223a <pid_compute+0x23a>
    {
        tpid_ctrl->dresult = tpid_ctrl->dlim_max;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	63da      	str	r2, [r3, #60]	; 0x3c
 8002238:	e00e      	b.n	8002258 <pid_compute+0x258>
    }
    else if (tpid_ctrl->dresult < tpid_ctrl->dlim_min)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	4619      	mov	r1, r3
 8002244:	4610      	mov	r0, r2
 8002246:	f7fe ff3b 	bl	80010c0 <__aeabi_fcmplt>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <pid_compute+0x258>
    {
        tpid_ctrl->dresult = tpid_ctrl->dlim_min;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    // Update pre-error
    tpid_ctrl->dpre_error = tpid_ctrl->derror;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6a1a      	ldr	r2, [r3, #32]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	625a      	str	r2, [r3, #36]	; 0x24
    tpid_ctrl->dpre_filtered_error = tpid_ctrl->dfiltered_error;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	62da      	str	r2, [r3, #44]	; 0x2c

    return tpid_ctrl->dresult;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002278 <serial_init>:
uint8_t urx_index = 0;
uint8_t urx = 0;
PROCESS_t tprocess;

void serial_init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&UART_COM, &urx, 1);
 800227c:	2201      	movs	r2, #1
 800227e:	4903      	ldr	r1, [pc, #12]	; (800228c <serial_init+0x14>)
 8002280:	4803      	ldr	r0, [pc, #12]	; (8002290 <serial_init+0x18>)
 8002282:	f002 fd2f 	bl	8004ce4 <HAL_UART_Receive_IT>
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	2000043d 	.word	0x2000043d
 8002290:	2000037c 	.word	0x2000037c

08002294 <serial_handle>:
	        count++;
	    }
	HAL_UART_Transmit(&UART_COM, utx_buff, (count+1), HAL_MAX_DELAY);
}
void serial_handle(uint8_t *ubuff)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b09e      	sub	sp, #120	; 0x78
 8002298:	af02      	add	r7, sp, #8
 800229a:	6078      	str	r0, [r7, #4]
	if (ubuff == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d01e      	beq.n	80022e0 <serial_handle+0x4c>
	{
		// Handle the case where ubuff is nullptr
		return;
	}
	char str[MAX_LEN];
	snprintf(str, sizeof(str), "%s", ubuff);
 80022a2:	f107 000c 	add.w	r0, r7, #12
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a0f      	ldr	r2, [pc, #60]	; (80022e8 <serial_handle+0x54>)
 80022aa:	2164      	movs	r1, #100	; 0x64
 80022ac:	f003 fda2 	bl	8005df4 <sniprintf>
	sscanf(str, "%f %f %f %f" , &dkp, &dki, &dkd, &dset_point);
 80022b0:	f107 000c 	add.w	r0, r7, #12
 80022b4:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <serial_handle+0x58>)
 80022b6:	9301      	str	r3, [sp, #4]
 80022b8:	4b0d      	ldr	r3, [pc, #52]	; (80022f0 <serial_handle+0x5c>)
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <serial_handle+0x60>)
 80022be:	4a0e      	ldr	r2, [pc, #56]	; (80022f8 <serial_handle+0x64>)
 80022c0:	490e      	ldr	r1, [pc, #56]	; (80022fc <serial_handle+0x68>)
 80022c2:	f003 fdeb 	bl	8005e9c <siscanf>
	HAL_UART_Transmit(&UART_COM, ubuff, urx_index, HAL_MAX_DELAY);
 80022c6:	4b0e      	ldr	r3, [pc, #56]	; (8002300 <serial_handle+0x6c>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	f04f 33ff 	mov.w	r3, #4294967295
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	480c      	ldr	r0, [pc, #48]	; (8002304 <serial_handle+0x70>)
 80022d4:	f002 fc83 	bl	8004bde <HAL_UART_Transmit>
	urx_index = 0;
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <serial_handle+0x6c>)
 80022da:	2200      	movs	r2, #0
 80022dc:	701a      	strb	r2, [r3, #0]
 80022de:	e000      	b.n	80022e2 <serial_handle+0x4e>
		return;
 80022e0:	bf00      	nop
//	    }
//	    else
//	    {
//	      tprocess = NONE;
//	    }
}
 80022e2:	3770      	adds	r7, #112	; 0x70
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	08009ff8 	.word	0x08009ff8
 80022ec:	20000438 	.word	0x20000438
 80022f0:	20000434 	.word	0x20000434
 80022f4:	20000430 	.word	0x20000430
 80022f8:	2000042c 	.word	0x2000042c
 80022fc:	08009ffc 	.word	0x08009ffc
 8002300:	2000043c 	.word	0x2000043c
 8002304:	2000037c 	.word	0x2000037c

08002308 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800230c:	4b08      	ldr	r3, [pc, #32]	; (8002330 <HAL_Init+0x28>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a07      	ldr	r2, [pc, #28]	; (8002330 <HAL_Init+0x28>)
 8002312:	f043 0310 	orr.w	r3, r3, #16
 8002316:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002318:	2003      	movs	r0, #3
 800231a:	f000 f92b 	bl	8002574 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800231e:	200f      	movs	r0, #15
 8002320:	f000 f808 	bl	8002334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002324:	f7ff f8c6 	bl	80014b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40022000 	.word	0x40022000

08002334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800233c:	4b12      	ldr	r3, [pc, #72]	; (8002388 <HAL_InitTick+0x54>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4b12      	ldr	r3, [pc, #72]	; (800238c <HAL_InitTick+0x58>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	4619      	mov	r1, r3
 8002346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800234a:	fbb3 f3f1 	udiv	r3, r3, r1
 800234e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002352:	4618      	mov	r0, r3
 8002354:	f000 f935 	bl	80025c2 <HAL_SYSTICK_Config>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e00e      	b.n	8002380 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b0f      	cmp	r3, #15
 8002366:	d80a      	bhi.n	800237e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002368:	2200      	movs	r2, #0
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	f04f 30ff 	mov.w	r0, #4294967295
 8002370:	f000 f90b 	bl	800258a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002374:	4a06      	ldr	r2, [pc, #24]	; (8002390 <HAL_InitTick+0x5c>)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800237a:	2300      	movs	r3, #0
 800237c:	e000      	b.n	8002380 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
}
 8002380:	4618      	mov	r0, r3
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	20000004 	.word	0x20000004
 800238c:	2000000c 	.word	0x2000000c
 8002390:	20000008 	.word	0x20000008

08002394 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002398:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <HAL_IncTick+0x1c>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	461a      	mov	r2, r3
 800239e:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <HAL_IncTick+0x20>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4413      	add	r3, r2
 80023a4:	4a03      	ldr	r2, [pc, #12]	; (80023b4 <HAL_IncTick+0x20>)
 80023a6:	6013      	str	r3, [r2, #0]
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr
 80023b0:	2000000c 	.word	0x2000000c
 80023b4:	20000440 	.word	0x20000440

080023b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return uwTick;
 80023bc:	4b02      	ldr	r3, [pc, #8]	; (80023c8 <HAL_GetTick+0x10>)
 80023be:	681b      	ldr	r3, [r3, #0]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr
 80023c8:	20000440 	.word	0x20000440

080023cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023d4:	f7ff fff0 	bl	80023b8 <HAL_GetTick>
 80023d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e4:	d005      	beq.n	80023f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023e6:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <HAL_Delay+0x44>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4413      	add	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023f2:	bf00      	nop
 80023f4:	f7ff ffe0 	bl	80023b8 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	429a      	cmp	r2, r3
 8002402:	d8f7      	bhi.n	80023f4 <HAL_Delay+0x28>
  {
  }
}
 8002404:	bf00      	nop
 8002406:	bf00      	nop
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	2000000c 	.word	0x2000000c

08002414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <__NVIC_SetPriorityGrouping+0x44>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002430:	4013      	ands	r3, r2
 8002432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800243c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002446:	4a04      	ldr	r2, [pc, #16]	; (8002458 <__NVIC_SetPriorityGrouping+0x44>)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	60d3      	str	r3, [r2, #12]
}
 800244c:	bf00      	nop
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002460:	4b04      	ldr	r3, [pc, #16]	; (8002474 <__NVIC_GetPriorityGrouping+0x18>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	0a1b      	lsrs	r3, r3, #8
 8002466:	f003 0307 	and.w	r3, r3, #7
}
 800246a:	4618      	mov	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	6039      	str	r1, [r7, #0]
 8002482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002488:	2b00      	cmp	r3, #0
 800248a:	db0a      	blt.n	80024a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	b2da      	uxtb	r2, r3
 8002490:	490c      	ldr	r1, [pc, #48]	; (80024c4 <__NVIC_SetPriority+0x4c>)
 8002492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002496:	0112      	lsls	r2, r2, #4
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	440b      	add	r3, r1
 800249c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024a0:	e00a      	b.n	80024b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4908      	ldr	r1, [pc, #32]	; (80024c8 <__NVIC_SetPriority+0x50>)
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	3b04      	subs	r3, #4
 80024b0:	0112      	lsls	r2, r2, #4
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	440b      	add	r3, r1
 80024b6:	761a      	strb	r2, [r3, #24]
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	e000e100 	.word	0xe000e100
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b089      	sub	sp, #36	; 0x24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f1c3 0307 	rsb	r3, r3, #7
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	bf28      	it	cs
 80024ea:	2304      	movcs	r3, #4
 80024ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	3304      	adds	r3, #4
 80024f2:	2b06      	cmp	r3, #6
 80024f4:	d902      	bls.n	80024fc <NVIC_EncodePriority+0x30>
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3b03      	subs	r3, #3
 80024fa:	e000      	b.n	80024fe <NVIC_EncodePriority+0x32>
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002500:	f04f 32ff 	mov.w	r2, #4294967295
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43da      	mvns	r2, r3
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	401a      	ands	r2, r3
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002514:	f04f 31ff 	mov.w	r1, #4294967295
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	fa01 f303 	lsl.w	r3, r1, r3
 800251e:	43d9      	mvns	r1, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002524:	4313      	orrs	r3, r2
         );
}
 8002526:	4618      	mov	r0, r3
 8002528:	3724      	adds	r7, #36	; 0x24
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr

08002530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3b01      	subs	r3, #1
 800253c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002540:	d301      	bcc.n	8002546 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002542:	2301      	movs	r3, #1
 8002544:	e00f      	b.n	8002566 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002546:	4a0a      	ldr	r2, [pc, #40]	; (8002570 <SysTick_Config+0x40>)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3b01      	subs	r3, #1
 800254c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800254e:	210f      	movs	r1, #15
 8002550:	f04f 30ff 	mov.w	r0, #4294967295
 8002554:	f7ff ff90 	bl	8002478 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002558:	4b05      	ldr	r3, [pc, #20]	; (8002570 <SysTick_Config+0x40>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800255e:	4b04      	ldr	r3, [pc, #16]	; (8002570 <SysTick_Config+0x40>)
 8002560:	2207      	movs	r2, #7
 8002562:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	e000e010 	.word	0xe000e010

08002574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff ff49 	bl	8002414 <__NVIC_SetPriorityGrouping>
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800258a:	b580      	push	{r7, lr}
 800258c:	b086      	sub	sp, #24
 800258e:	af00      	add	r7, sp, #0
 8002590:	4603      	mov	r3, r0
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
 8002596:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800259c:	f7ff ff5e 	bl	800245c <__NVIC_GetPriorityGrouping>
 80025a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	68b9      	ldr	r1, [r7, #8]
 80025a6:	6978      	ldr	r0, [r7, #20]
 80025a8:	f7ff ff90 	bl	80024cc <NVIC_EncodePriority>
 80025ac:	4602      	mov	r2, r0
 80025ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025b2:	4611      	mov	r1, r2
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ff5f 	bl	8002478 <__NVIC_SetPriority>
}
 80025ba:	bf00      	nop
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff ffb0 	bl	8002530 <SysTick_Config>
 80025d0:	4603      	mov	r3, r0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025dc:	b480      	push	{r7}
 80025de:	b08b      	sub	sp, #44	; 0x2c
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025e6:	2300      	movs	r3, #0
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025ea:	2300      	movs	r3, #0
 80025ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ee:	e169      	b.n	80028c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025f0:	2201      	movs	r2, #1
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	69fa      	ldr	r2, [r7, #28]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	429a      	cmp	r2, r3
 800260a:	f040 8158 	bne.w	80028be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	4a9a      	ldr	r2, [pc, #616]	; (800287c <HAL_GPIO_Init+0x2a0>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d05e      	beq.n	80026d6 <HAL_GPIO_Init+0xfa>
 8002618:	4a98      	ldr	r2, [pc, #608]	; (800287c <HAL_GPIO_Init+0x2a0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d875      	bhi.n	800270a <HAL_GPIO_Init+0x12e>
 800261e:	4a98      	ldr	r2, [pc, #608]	; (8002880 <HAL_GPIO_Init+0x2a4>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d058      	beq.n	80026d6 <HAL_GPIO_Init+0xfa>
 8002624:	4a96      	ldr	r2, [pc, #600]	; (8002880 <HAL_GPIO_Init+0x2a4>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d86f      	bhi.n	800270a <HAL_GPIO_Init+0x12e>
 800262a:	4a96      	ldr	r2, [pc, #600]	; (8002884 <HAL_GPIO_Init+0x2a8>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d052      	beq.n	80026d6 <HAL_GPIO_Init+0xfa>
 8002630:	4a94      	ldr	r2, [pc, #592]	; (8002884 <HAL_GPIO_Init+0x2a8>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d869      	bhi.n	800270a <HAL_GPIO_Init+0x12e>
 8002636:	4a94      	ldr	r2, [pc, #592]	; (8002888 <HAL_GPIO_Init+0x2ac>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d04c      	beq.n	80026d6 <HAL_GPIO_Init+0xfa>
 800263c:	4a92      	ldr	r2, [pc, #584]	; (8002888 <HAL_GPIO_Init+0x2ac>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d863      	bhi.n	800270a <HAL_GPIO_Init+0x12e>
 8002642:	4a92      	ldr	r2, [pc, #584]	; (800288c <HAL_GPIO_Init+0x2b0>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d046      	beq.n	80026d6 <HAL_GPIO_Init+0xfa>
 8002648:	4a90      	ldr	r2, [pc, #576]	; (800288c <HAL_GPIO_Init+0x2b0>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d85d      	bhi.n	800270a <HAL_GPIO_Init+0x12e>
 800264e:	2b12      	cmp	r3, #18
 8002650:	d82a      	bhi.n	80026a8 <HAL_GPIO_Init+0xcc>
 8002652:	2b12      	cmp	r3, #18
 8002654:	d859      	bhi.n	800270a <HAL_GPIO_Init+0x12e>
 8002656:	a201      	add	r2, pc, #4	; (adr r2, 800265c <HAL_GPIO_Init+0x80>)
 8002658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265c:	080026d7 	.word	0x080026d7
 8002660:	080026b1 	.word	0x080026b1
 8002664:	080026c3 	.word	0x080026c3
 8002668:	08002705 	.word	0x08002705
 800266c:	0800270b 	.word	0x0800270b
 8002670:	0800270b 	.word	0x0800270b
 8002674:	0800270b 	.word	0x0800270b
 8002678:	0800270b 	.word	0x0800270b
 800267c:	0800270b 	.word	0x0800270b
 8002680:	0800270b 	.word	0x0800270b
 8002684:	0800270b 	.word	0x0800270b
 8002688:	0800270b 	.word	0x0800270b
 800268c:	0800270b 	.word	0x0800270b
 8002690:	0800270b 	.word	0x0800270b
 8002694:	0800270b 	.word	0x0800270b
 8002698:	0800270b 	.word	0x0800270b
 800269c:	0800270b 	.word	0x0800270b
 80026a0:	080026b9 	.word	0x080026b9
 80026a4:	080026cd 	.word	0x080026cd
 80026a8:	4a79      	ldr	r2, [pc, #484]	; (8002890 <HAL_GPIO_Init+0x2b4>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d013      	beq.n	80026d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026ae:	e02c      	b.n	800270a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	623b      	str	r3, [r7, #32]
          break;
 80026b6:	e029      	b.n	800270c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	3304      	adds	r3, #4
 80026be:	623b      	str	r3, [r7, #32]
          break;
 80026c0:	e024      	b.n	800270c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	3308      	adds	r3, #8
 80026c8:	623b      	str	r3, [r7, #32]
          break;
 80026ca:	e01f      	b.n	800270c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	330c      	adds	r3, #12
 80026d2:	623b      	str	r3, [r7, #32]
          break;
 80026d4:	e01a      	b.n	800270c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d102      	bne.n	80026e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026de:	2304      	movs	r3, #4
 80026e0:	623b      	str	r3, [r7, #32]
          break;
 80026e2:	e013      	b.n	800270c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d105      	bne.n	80026f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026ec:	2308      	movs	r3, #8
 80026ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69fa      	ldr	r2, [r7, #28]
 80026f4:	611a      	str	r2, [r3, #16]
          break;
 80026f6:	e009      	b.n	800270c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026f8:	2308      	movs	r3, #8
 80026fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69fa      	ldr	r2, [r7, #28]
 8002700:	615a      	str	r2, [r3, #20]
          break;
 8002702:	e003      	b.n	800270c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002704:	2300      	movs	r3, #0
 8002706:	623b      	str	r3, [r7, #32]
          break;
 8002708:	e000      	b.n	800270c <HAL_GPIO_Init+0x130>
          break;
 800270a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	2bff      	cmp	r3, #255	; 0xff
 8002710:	d801      	bhi.n	8002716 <HAL_GPIO_Init+0x13a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	e001      	b.n	800271a <HAL_GPIO_Init+0x13e>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3304      	adds	r3, #4
 800271a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	2bff      	cmp	r3, #255	; 0xff
 8002720:	d802      	bhi.n	8002728 <HAL_GPIO_Init+0x14c>
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	e002      	b.n	800272e <HAL_GPIO_Init+0x152>
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	3b08      	subs	r3, #8
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	210f      	movs	r1, #15
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	fa01 f303 	lsl.w	r3, r1, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	401a      	ands	r2, r3
 8002740:	6a39      	ldr	r1, [r7, #32]
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	fa01 f303 	lsl.w	r3, r1, r3
 8002748:	431a      	orrs	r2, r3
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 80b1 	beq.w	80028be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800275c:	4b4d      	ldr	r3, [pc, #308]	; (8002894 <HAL_GPIO_Init+0x2b8>)
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	4a4c      	ldr	r2, [pc, #304]	; (8002894 <HAL_GPIO_Init+0x2b8>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	6193      	str	r3, [r2, #24]
 8002768:	4b4a      	ldr	r3, [pc, #296]	; (8002894 <HAL_GPIO_Init+0x2b8>)
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002774:	4a48      	ldr	r2, [pc, #288]	; (8002898 <HAL_GPIO_Init+0x2bc>)
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	089b      	lsrs	r3, r3, #2
 800277a:	3302      	adds	r3, #2
 800277c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002780:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	220f      	movs	r2, #15
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	4013      	ands	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a40      	ldr	r2, [pc, #256]	; (800289c <HAL_GPIO_Init+0x2c0>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d013      	beq.n	80027c8 <HAL_GPIO_Init+0x1ec>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a3f      	ldr	r2, [pc, #252]	; (80028a0 <HAL_GPIO_Init+0x2c4>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d00d      	beq.n	80027c4 <HAL_GPIO_Init+0x1e8>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a3e      	ldr	r2, [pc, #248]	; (80028a4 <HAL_GPIO_Init+0x2c8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d007      	beq.n	80027c0 <HAL_GPIO_Init+0x1e4>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a3d      	ldr	r2, [pc, #244]	; (80028a8 <HAL_GPIO_Init+0x2cc>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d101      	bne.n	80027bc <HAL_GPIO_Init+0x1e0>
 80027b8:	2303      	movs	r3, #3
 80027ba:	e006      	b.n	80027ca <HAL_GPIO_Init+0x1ee>
 80027bc:	2304      	movs	r3, #4
 80027be:	e004      	b.n	80027ca <HAL_GPIO_Init+0x1ee>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e002      	b.n	80027ca <HAL_GPIO_Init+0x1ee>
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <HAL_GPIO_Init+0x1ee>
 80027c8:	2300      	movs	r3, #0
 80027ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027cc:	f002 0203 	and.w	r2, r2, #3
 80027d0:	0092      	lsls	r2, r2, #2
 80027d2:	4093      	lsls	r3, r2
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027da:	492f      	ldr	r1, [pc, #188]	; (8002898 <HAL_GPIO_Init+0x2bc>)
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	089b      	lsrs	r3, r3, #2
 80027e0:	3302      	adds	r3, #2
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d006      	beq.n	8002802 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027f4:	4b2d      	ldr	r3, [pc, #180]	; (80028ac <HAL_GPIO_Init+0x2d0>)
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	492c      	ldr	r1, [pc, #176]	; (80028ac <HAL_GPIO_Init+0x2d0>)
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	608b      	str	r3, [r1, #8]
 8002800:	e006      	b.n	8002810 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002802:	4b2a      	ldr	r3, [pc, #168]	; (80028ac <HAL_GPIO_Init+0x2d0>)
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	43db      	mvns	r3, r3
 800280a:	4928      	ldr	r1, [pc, #160]	; (80028ac <HAL_GPIO_Init+0x2d0>)
 800280c:	4013      	ands	r3, r2
 800280e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d006      	beq.n	800282a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800281c:	4b23      	ldr	r3, [pc, #140]	; (80028ac <HAL_GPIO_Init+0x2d0>)
 800281e:	68da      	ldr	r2, [r3, #12]
 8002820:	4922      	ldr	r1, [pc, #136]	; (80028ac <HAL_GPIO_Init+0x2d0>)
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	4313      	orrs	r3, r2
 8002826:	60cb      	str	r3, [r1, #12]
 8002828:	e006      	b.n	8002838 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800282a:	4b20      	ldr	r3, [pc, #128]	; (80028ac <HAL_GPIO_Init+0x2d0>)
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	43db      	mvns	r3, r3
 8002832:	491e      	ldr	r1, [pc, #120]	; (80028ac <HAL_GPIO_Init+0x2d0>)
 8002834:	4013      	ands	r3, r2
 8002836:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d006      	beq.n	8002852 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002844:	4b19      	ldr	r3, [pc, #100]	; (80028ac <HAL_GPIO_Init+0x2d0>)
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	4918      	ldr	r1, [pc, #96]	; (80028ac <HAL_GPIO_Init+0x2d0>)
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	4313      	orrs	r3, r2
 800284e:	604b      	str	r3, [r1, #4]
 8002850:	e006      	b.n	8002860 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002852:	4b16      	ldr	r3, [pc, #88]	; (80028ac <HAL_GPIO_Init+0x2d0>)
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	43db      	mvns	r3, r3
 800285a:	4914      	ldr	r1, [pc, #80]	; (80028ac <HAL_GPIO_Init+0x2d0>)
 800285c:	4013      	ands	r3, r2
 800285e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d021      	beq.n	80028b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800286c:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <HAL_GPIO_Init+0x2d0>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	490e      	ldr	r1, [pc, #56]	; (80028ac <HAL_GPIO_Init+0x2d0>)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	4313      	orrs	r3, r2
 8002876:	600b      	str	r3, [r1, #0]
 8002878:	e021      	b.n	80028be <HAL_GPIO_Init+0x2e2>
 800287a:	bf00      	nop
 800287c:	10320000 	.word	0x10320000
 8002880:	10310000 	.word	0x10310000
 8002884:	10220000 	.word	0x10220000
 8002888:	10210000 	.word	0x10210000
 800288c:	10120000 	.word	0x10120000
 8002890:	10110000 	.word	0x10110000
 8002894:	40021000 	.word	0x40021000
 8002898:	40010000 	.word	0x40010000
 800289c:	40010800 	.word	0x40010800
 80028a0:	40010c00 	.word	0x40010c00
 80028a4:	40011000 	.word	0x40011000
 80028a8:	40011400 	.word	0x40011400
 80028ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <HAL_GPIO_Init+0x304>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	43db      	mvns	r3, r3
 80028b8:	4909      	ldr	r1, [pc, #36]	; (80028e0 <HAL_GPIO_Init+0x304>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	3301      	adds	r3, #1
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	fa22 f303 	lsr.w	r3, r2, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f47f ae8e 	bne.w	80025f0 <HAL_GPIO_Init+0x14>
  }
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	372c      	adds	r7, #44	; 0x2c
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr
 80028e0:	40010400 	.word	0x40010400

080028e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e12b      	b.n	8002b4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d106      	bne.n	8002910 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7fe fc94 	bl	8001238 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2224      	movs	r2, #36	; 0x24
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0201 	bic.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002936:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002946:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002948:	f001 fbf0 	bl	800412c <HAL_RCC_GetPCLK1Freq>
 800294c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	4a81      	ldr	r2, [pc, #516]	; (8002b58 <HAL_I2C_Init+0x274>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d807      	bhi.n	8002968 <HAL_I2C_Init+0x84>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4a80      	ldr	r2, [pc, #512]	; (8002b5c <HAL_I2C_Init+0x278>)
 800295c:	4293      	cmp	r3, r2
 800295e:	bf94      	ite	ls
 8002960:	2301      	movls	r3, #1
 8002962:	2300      	movhi	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	e006      	b.n	8002976 <HAL_I2C_Init+0x92>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4a7d      	ldr	r2, [pc, #500]	; (8002b60 <HAL_I2C_Init+0x27c>)
 800296c:	4293      	cmp	r3, r2
 800296e:	bf94      	ite	ls
 8002970:	2301      	movls	r3, #1
 8002972:	2300      	movhi	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e0e7      	b.n	8002b4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4a78      	ldr	r2, [pc, #480]	; (8002b64 <HAL_I2C_Init+0x280>)
 8002982:	fba2 2303 	umull	r2, r3, r2, r3
 8002986:	0c9b      	lsrs	r3, r3, #18
 8002988:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	430a      	orrs	r2, r1
 800299c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	4a6a      	ldr	r2, [pc, #424]	; (8002b58 <HAL_I2C_Init+0x274>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d802      	bhi.n	80029b8 <HAL_I2C_Init+0xd4>
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	3301      	adds	r3, #1
 80029b6:	e009      	b.n	80029cc <HAL_I2C_Init+0xe8>
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029be:	fb02 f303 	mul.w	r3, r2, r3
 80029c2:	4a69      	ldr	r2, [pc, #420]	; (8002b68 <HAL_I2C_Init+0x284>)
 80029c4:	fba2 2303 	umull	r2, r3, r2, r3
 80029c8:	099b      	lsrs	r3, r3, #6
 80029ca:	3301      	adds	r3, #1
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	430b      	orrs	r3, r1
 80029d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	495c      	ldr	r1, [pc, #368]	; (8002b58 <HAL_I2C_Init+0x274>)
 80029e8:	428b      	cmp	r3, r1
 80029ea:	d819      	bhi.n	8002a20 <HAL_I2C_Init+0x13c>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	1e59      	subs	r1, r3, #1
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80029fa:	1c59      	adds	r1, r3, #1
 80029fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a00:	400b      	ands	r3, r1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00a      	beq.n	8002a1c <HAL_I2C_Init+0x138>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	1e59      	subs	r1, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a14:	3301      	adds	r3, #1
 8002a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a1a:	e051      	b.n	8002ac0 <HAL_I2C_Init+0x1dc>
 8002a1c:	2304      	movs	r3, #4
 8002a1e:	e04f      	b.n	8002ac0 <HAL_I2C_Init+0x1dc>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d111      	bne.n	8002a4c <HAL_I2C_Init+0x168>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	1e58      	subs	r0, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6859      	ldr	r1, [r3, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	440b      	add	r3, r1
 8002a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	bf0c      	ite	eq
 8002a44:	2301      	moveq	r3, #1
 8002a46:	2300      	movne	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	e012      	b.n	8002a72 <HAL_I2C_Init+0x18e>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	1e58      	subs	r0, r3, #1
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6859      	ldr	r1, [r3, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	0099      	lsls	r1, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a62:	3301      	adds	r3, #1
 8002a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	bf0c      	ite	eq
 8002a6c:	2301      	moveq	r3, #1
 8002a6e:	2300      	movne	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_I2C_Init+0x196>
 8002a76:	2301      	movs	r3, #1
 8002a78:	e022      	b.n	8002ac0 <HAL_I2C_Init+0x1dc>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10e      	bne.n	8002aa0 <HAL_I2C_Init+0x1bc>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1e58      	subs	r0, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6859      	ldr	r1, [r3, #4]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	440b      	add	r3, r1
 8002a90:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a94:	3301      	adds	r3, #1
 8002a96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a9e:	e00f      	b.n	8002ac0 <HAL_I2C_Init+0x1dc>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1e58      	subs	r0, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6859      	ldr	r1, [r3, #4]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	0099      	lsls	r1, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002abc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	6809      	ldr	r1, [r1, #0]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69da      	ldr	r2, [r3, #28]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002aee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6911      	ldr	r1, [r2, #16]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	68d2      	ldr	r2, [r2, #12]
 8002afa:	4311      	orrs	r1, r2
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6812      	ldr	r2, [r2, #0]
 8002b00:	430b      	orrs	r3, r1
 8002b02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695a      	ldr	r2, [r3, #20]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0201 	orr.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	000186a0 	.word	0x000186a0
 8002b5c:	001e847f 	.word	0x001e847f
 8002b60:	003d08ff 	.word	0x003d08ff
 8002b64:	431bde83 	.word	0x431bde83
 8002b68:	10624dd3 	.word	0x10624dd3

08002b6c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b088      	sub	sp, #32
 8002b70:	af02      	add	r7, sp, #8
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	4608      	mov	r0, r1
 8002b76:	4611      	mov	r1, r2
 8002b78:	461a      	mov	r2, r3
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	817b      	strh	r3, [r7, #10]
 8002b7e:	460b      	mov	r3, r1
 8002b80:	813b      	strh	r3, [r7, #8]
 8002b82:	4613      	mov	r3, r2
 8002b84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b86:	f7ff fc17 	bl	80023b8 <HAL_GetTick>
 8002b8a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	f040 80d9 	bne.w	8002d4c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	2319      	movs	r3, #25
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	496d      	ldr	r1, [pc, #436]	; (8002d58 <HAL_I2C_Mem_Write+0x1ec>)
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 fcc1 	bl	800352c <I2C_WaitOnFlagUntilTimeout>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e0cc      	b.n	8002d4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <HAL_I2C_Mem_Write+0x56>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e0c5      	b.n	8002d4e <HAL_I2C_Mem_Write+0x1e2>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d007      	beq.n	8002be8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bf6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2221      	movs	r2, #33	; 0x21
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2240      	movs	r2, #64	; 0x40
 8002c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a3a      	ldr	r2, [r7, #32]
 8002c12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4a4d      	ldr	r2, [pc, #308]	; (8002d5c <HAL_I2C_Mem_Write+0x1f0>)
 8002c28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c2a:	88f8      	ldrh	r0, [r7, #6]
 8002c2c:	893a      	ldrh	r2, [r7, #8]
 8002c2e:	8979      	ldrh	r1, [r7, #10]
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	9301      	str	r3, [sp, #4]
 8002c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c36:	9300      	str	r3, [sp, #0]
 8002c38:	4603      	mov	r3, r0
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 faf8 	bl	8003230 <I2C_RequestMemoryWrite>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d052      	beq.n	8002cec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e081      	b.n	8002d4e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 fd86 	bl	8003760 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00d      	beq.n	8002c76 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d107      	bne.n	8002c72 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e06b      	b.n	8002d4e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	781a      	ldrb	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d11b      	bne.n	8002cec <HAL_I2C_Mem_Write+0x180>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d017      	beq.n	8002cec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	781a      	ldrb	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	1c5a      	adds	r2, r3, #1
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1aa      	bne.n	8002c4a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 fd79 	bl	80037f0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00d      	beq.n	8002d20 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d107      	bne.n	8002d1c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d1a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e016      	b.n	8002d4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	e000      	b.n	8002d4e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d4c:	2302      	movs	r3, #2
  }
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3718      	adds	r7, #24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	00100002 	.word	0x00100002
 8002d5c:	ffff0000 	.word	0xffff0000

08002d60 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08c      	sub	sp, #48	; 0x30
 8002d64:	af02      	add	r7, sp, #8
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	4608      	mov	r0, r1
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4603      	mov	r3, r0
 8002d70:	817b      	strh	r3, [r7, #10]
 8002d72:	460b      	mov	r3, r1
 8002d74:	813b      	strh	r3, [r7, #8]
 8002d76:	4613      	mov	r3, r2
 8002d78:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d7e:	f7ff fb1b 	bl	80023b8 <HAL_GetTick>
 8002d82:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	f040 8244 	bne.w	800321a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	2319      	movs	r3, #25
 8002d98:	2201      	movs	r2, #1
 8002d9a:	4982      	ldr	r1, [pc, #520]	; (8002fa4 <HAL_I2C_Mem_Read+0x244>)
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 fbc5 	bl	800352c <I2C_WaitOnFlagUntilTimeout>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002da8:	2302      	movs	r3, #2
 8002daa:	e237      	b.n	800321c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d101      	bne.n	8002dba <HAL_I2C_Mem_Read+0x5a>
 8002db6:	2302      	movs	r3, #2
 8002db8:	e230      	b.n	800321c <HAL_I2C_Mem_Read+0x4bc>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d007      	beq.n	8002de0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2222      	movs	r2, #34	; 0x22
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2240      	movs	r2, #64	; 0x40
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4a62      	ldr	r2, [pc, #392]	; (8002fa8 <HAL_I2C_Mem_Read+0x248>)
 8002e20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e22:	88f8      	ldrh	r0, [r7, #6]
 8002e24:	893a      	ldrh	r2, [r7, #8]
 8002e26:	8979      	ldrh	r1, [r7, #10]
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	9301      	str	r3, [sp, #4]
 8002e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	4603      	mov	r3, r0
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 fa92 	bl	800335c <I2C_RequestMemoryRead>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e1ec      	b.n	800321c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d113      	bne.n	8002e72 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61fb      	str	r3, [r7, #28]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	61fb      	str	r3, [r7, #28]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	61fb      	str	r3, [r7, #28]
 8002e5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	e1c0      	b.n	80031f4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d11e      	bne.n	8002eb8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e8a:	b672      	cpsid	i
}
 8002e8c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61bb      	str	r3, [r7, #24]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	61bb      	str	r3, [r7, #24]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002eb4:	b662      	cpsie	i
}
 8002eb6:	e035      	b.n	8002f24 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d11e      	bne.n	8002efe <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ece:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ed0:	b672      	cpsid	i
}
 8002ed2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ef8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002efa:	b662      	cpsie	i
}
 8002efc:	e012      	b.n	8002f24 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f0c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f0e:	2300      	movs	r3, #0
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	613b      	str	r3, [r7, #16]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002f24:	e166      	b.n	80031f4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	f200 811f 	bhi.w	800316e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d123      	bne.n	8002f80 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 fc9f 	bl	8003880 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e167      	b.n	800321c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	691a      	ldr	r2, [r3, #16]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f7e:	e139      	b.n	80031f4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d152      	bne.n	800302e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8e:	2200      	movs	r2, #0
 8002f90:	4906      	ldr	r1, [pc, #24]	; (8002fac <HAL_I2C_Mem_Read+0x24c>)
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 faca 	bl	800352c <I2C_WaitOnFlagUntilTimeout>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d008      	beq.n	8002fb0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e13c      	b.n	800321c <HAL_I2C_Mem_Read+0x4bc>
 8002fa2:	bf00      	nop
 8002fa4:	00100002 	.word	0x00100002
 8002fa8:	ffff0000 	.word	0xffff0000
 8002fac:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002fb0:	b672      	cpsid	i
}
 8002fb2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	691a      	ldr	r2, [r3, #16]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	1c5a      	adds	r2, r3, #1
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002ff6:	b662      	cpsie	i
}
 8002ff8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003022:	b29b      	uxth	r3, r3
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800302c:	e0e2      	b.n	80031f4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003034:	2200      	movs	r2, #0
 8003036:	497b      	ldr	r1, [pc, #492]	; (8003224 <HAL_I2C_Mem_Read+0x4c4>)
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 fa77 	bl	800352c <I2C_WaitOnFlagUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e0e9      	b.n	800321c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003056:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003058:	b672      	cpsid	i
}
 800305a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691a      	ldr	r2, [r3, #16]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	1c5a      	adds	r2, r3, #1
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003078:	3b01      	subs	r3, #1
 800307a:	b29a      	uxth	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003084:	b29b      	uxth	r3, r3
 8003086:	3b01      	subs	r3, #1
 8003088:	b29a      	uxth	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800308e:	4b66      	ldr	r3, [pc, #408]	; (8003228 <HAL_I2C_Mem_Read+0x4c8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	08db      	lsrs	r3, r3, #3
 8003094:	4a65      	ldr	r2, [pc, #404]	; (800322c <HAL_I2C_Mem_Read+0x4cc>)
 8003096:	fba2 2303 	umull	r2, r3, r2, r3
 800309a:	0a1a      	lsrs	r2, r3, #8
 800309c:	4613      	mov	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	00da      	lsls	r2, r3, #3
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d118      	bne.n	80030e6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2220      	movs	r2, #32
 80030be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f043 0220 	orr.w	r2, r3, #32
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80030d6:	b662      	cpsie	i
}
 80030d8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e09a      	b.n	800321c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d1d9      	bne.n	80030a8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003102:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003120:	3b01      	subs	r3, #1
 8003122:	b29a      	uxth	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312c:	b29b      	uxth	r3, r3
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003136:	b662      	cpsie	i
}
 8003138:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	691a      	ldr	r2, [r3, #16]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003156:	3b01      	subs	r3, #1
 8003158:	b29a      	uxth	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800316c:	e042      	b.n	80031f4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800316e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003170:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 fb84 	bl	8003880 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e04c      	b.n	800321c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	691a      	ldr	r2, [r3, #16]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319e:	3b01      	subs	r3, #1
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d118      	bne.n	80031f4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f47f ae94 	bne.w	8002f26 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2220      	movs	r2, #32
 8003202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	e000      	b.n	800321c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800321a:	2302      	movs	r3, #2
  }
}
 800321c:	4618      	mov	r0, r3
 800321e:	3728      	adds	r7, #40	; 0x28
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	00010004 	.word	0x00010004
 8003228:	20000004 	.word	0x20000004
 800322c:	14f8b589 	.word	0x14f8b589

08003230 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af02      	add	r7, sp, #8
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	4608      	mov	r0, r1
 800323a:	4611      	mov	r1, r2
 800323c:	461a      	mov	r2, r3
 800323e:	4603      	mov	r3, r0
 8003240:	817b      	strh	r3, [r7, #10]
 8003242:	460b      	mov	r3, r1
 8003244:	813b      	strh	r3, [r7, #8]
 8003246:	4613      	mov	r3, r2
 8003248:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003258:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	2200      	movs	r2, #0
 8003262:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 f960 	bl	800352c <I2C_WaitOnFlagUntilTimeout>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00d      	beq.n	800328e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003280:	d103      	bne.n	800328a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003288:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e05f      	b.n	800334e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800328e:	897b      	ldrh	r3, [r7, #10]
 8003290:	b2db      	uxtb	r3, r3
 8003292:	461a      	mov	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800329c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	6a3a      	ldr	r2, [r7, #32]
 80032a2:	492d      	ldr	r1, [pc, #180]	; (8003358 <I2C_RequestMemoryWrite+0x128>)
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 f9bb 	bl	8003620 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e04c      	b.n	800334e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032cc:	6a39      	ldr	r1, [r7, #32]
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 fa46 	bl	8003760 <I2C_WaitOnTXEFlagUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00d      	beq.n	80032f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	2b04      	cmp	r3, #4
 80032e0:	d107      	bne.n	80032f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e02b      	b.n	800334e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d105      	bne.n	8003308 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032fc:	893b      	ldrh	r3, [r7, #8]
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	611a      	str	r2, [r3, #16]
 8003306:	e021      	b.n	800334c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003308:	893b      	ldrh	r3, [r7, #8]
 800330a:	0a1b      	lsrs	r3, r3, #8
 800330c:	b29b      	uxth	r3, r3
 800330e:	b2da      	uxtb	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003318:	6a39      	ldr	r1, [r7, #32]
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 fa20 	bl	8003760 <I2C_WaitOnTXEFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00d      	beq.n	8003342 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	2b04      	cmp	r3, #4
 800332c:	d107      	bne.n	800333e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800333c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e005      	b.n	800334e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003342:	893b      	ldrh	r3, [r7, #8]
 8003344:	b2da      	uxtb	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	00010002 	.word	0x00010002

0800335c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af02      	add	r7, sp, #8
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	4608      	mov	r0, r1
 8003366:	4611      	mov	r1, r2
 8003368:	461a      	mov	r2, r3
 800336a:	4603      	mov	r3, r0
 800336c:	817b      	strh	r3, [r7, #10]
 800336e:	460b      	mov	r3, r1
 8003370:	813b      	strh	r3, [r7, #8]
 8003372:	4613      	mov	r3, r2
 8003374:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003384:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003394:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	2200      	movs	r2, #0
 800339e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 f8c2 	bl	800352c <I2C_WaitOnFlagUntilTimeout>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00d      	beq.n	80033ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033bc:	d103      	bne.n	80033c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e0aa      	b.n	8003520 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033ca:	897b      	ldrh	r3, [r7, #10]
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	461a      	mov	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	6a3a      	ldr	r2, [r7, #32]
 80033de:	4952      	ldr	r1, [pc, #328]	; (8003528 <I2C_RequestMemoryRead+0x1cc>)
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 f91d 	bl	8003620 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e097      	b.n	8003520 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003408:	6a39      	ldr	r1, [r7, #32]
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 f9a8 	bl	8003760 <I2C_WaitOnTXEFlagUntilTimeout>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00d      	beq.n	8003432 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	2b04      	cmp	r3, #4
 800341c:	d107      	bne.n	800342e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800342c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e076      	b.n	8003520 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003432:	88fb      	ldrh	r3, [r7, #6]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d105      	bne.n	8003444 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003438:	893b      	ldrh	r3, [r7, #8]
 800343a:	b2da      	uxtb	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	611a      	str	r2, [r3, #16]
 8003442:	e021      	b.n	8003488 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003444:	893b      	ldrh	r3, [r7, #8]
 8003446:	0a1b      	lsrs	r3, r3, #8
 8003448:	b29b      	uxth	r3, r3
 800344a:	b2da      	uxtb	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003454:	6a39      	ldr	r1, [r7, #32]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f982 	bl	8003760 <I2C_WaitOnTXEFlagUntilTimeout>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00d      	beq.n	800347e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	2b04      	cmp	r3, #4
 8003468:	d107      	bne.n	800347a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003478:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e050      	b.n	8003520 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800347e:	893b      	ldrh	r3, [r7, #8]
 8003480:	b2da      	uxtb	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800348a:	6a39      	ldr	r1, [r7, #32]
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f967 	bl	8003760 <I2C_WaitOnTXEFlagUntilTimeout>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00d      	beq.n	80034b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	2b04      	cmp	r3, #4
 800349e:	d107      	bne.n	80034b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e035      	b.n	8003520 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f82b 	bl	800352c <I2C_WaitOnFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00d      	beq.n	80034f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ea:	d103      	bne.n	80034f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e013      	b.n	8003520 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034f8:	897b      	ldrh	r3, [r7, #10]
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	b2da      	uxtb	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	6a3a      	ldr	r2, [r7, #32]
 800350c:	4906      	ldr	r1, [pc, #24]	; (8003528 <I2C_RequestMemoryRead+0x1cc>)
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f886 	bl	8003620 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	00010002 	.word	0x00010002

0800352c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	603b      	str	r3, [r7, #0]
 8003538:	4613      	mov	r3, r2
 800353a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800353c:	e048      	b.n	80035d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003544:	d044      	beq.n	80035d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003546:	f7fe ff37 	bl	80023b8 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d302      	bcc.n	800355c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d139      	bne.n	80035d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	0c1b      	lsrs	r3, r3, #16
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b01      	cmp	r3, #1
 8003564:	d10d      	bne.n	8003582 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	43da      	mvns	r2, r3
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	4013      	ands	r3, r2
 8003572:	b29b      	uxth	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	bf0c      	ite	eq
 8003578:	2301      	moveq	r3, #1
 800357a:	2300      	movne	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	461a      	mov	r2, r3
 8003580:	e00c      	b.n	800359c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	43da      	mvns	r2, r3
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	4013      	ands	r3, r2
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	bf0c      	ite	eq
 8003594:	2301      	moveq	r3, #1
 8003596:	2300      	movne	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	461a      	mov	r2, r3
 800359c:	79fb      	ldrb	r3, [r7, #7]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d116      	bne.n	80035d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	f043 0220 	orr.w	r2, r3, #32
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e023      	b.n	8003618 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	0c1b      	lsrs	r3, r3, #16
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d10d      	bne.n	80035f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	43da      	mvns	r2, r3
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	4013      	ands	r3, r2
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	bf0c      	ite	eq
 80035ec:	2301      	moveq	r3, #1
 80035ee:	2300      	movne	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	461a      	mov	r2, r3
 80035f4:	e00c      	b.n	8003610 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	43da      	mvns	r2, r3
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	4013      	ands	r3, r2
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	bf0c      	ite	eq
 8003608:	2301      	moveq	r3, #1
 800360a:	2300      	movne	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	461a      	mov	r2, r3
 8003610:	79fb      	ldrb	r3, [r7, #7]
 8003612:	429a      	cmp	r2, r3
 8003614:	d093      	beq.n	800353e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
 800362c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800362e:	e071      	b.n	8003714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800363a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800363e:	d123      	bne.n	8003688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800364e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003658:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	f043 0204 	orr.w	r2, r3, #4
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e067      	b.n	8003758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368e:	d041      	beq.n	8003714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003690:	f7fe fe92 	bl	80023b8 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	429a      	cmp	r2, r3
 800369e:	d302      	bcc.n	80036a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d136      	bne.n	8003714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	0c1b      	lsrs	r3, r3, #16
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d10c      	bne.n	80036ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	43da      	mvns	r2, r3
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4013      	ands	r3, r2
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	bf14      	ite	ne
 80036c2:	2301      	movne	r3, #1
 80036c4:	2300      	moveq	r3, #0
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	e00b      	b.n	80036e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	43da      	mvns	r2, r3
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	4013      	ands	r3, r2
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	bf14      	ite	ne
 80036dc:	2301      	movne	r3, #1
 80036de:	2300      	moveq	r3, #0
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d016      	beq.n	8003714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	f043 0220 	orr.w	r2, r3, #32
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e021      	b.n	8003758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	0c1b      	lsrs	r3, r3, #16
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b01      	cmp	r3, #1
 800371c:	d10c      	bne.n	8003738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	43da      	mvns	r2, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	4013      	ands	r3, r2
 800372a:	b29b      	uxth	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	bf14      	ite	ne
 8003730:	2301      	movne	r3, #1
 8003732:	2300      	moveq	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	e00b      	b.n	8003750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	43da      	mvns	r2, r3
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	4013      	ands	r3, r2
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	bf14      	ite	ne
 800374a:	2301      	movne	r3, #1
 800374c:	2300      	moveq	r3, #0
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	f47f af6d 	bne.w	8003630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800376c:	e034      	b.n	80037d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 f8e3 	bl	800393a <I2C_IsAcknowledgeFailed>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e034      	b.n	80037e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003784:	d028      	beq.n	80037d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003786:	f7fe fe17 	bl	80023b8 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	429a      	cmp	r2, r3
 8003794:	d302      	bcc.n	800379c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d11d      	bne.n	80037d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a6:	2b80      	cmp	r3, #128	; 0x80
 80037a8:	d016      	beq.n	80037d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	f043 0220 	orr.w	r2, r3, #32
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e007      	b.n	80037e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e2:	2b80      	cmp	r3, #128	; 0x80
 80037e4:	d1c3      	bne.n	800376e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037fc:	e034      	b.n	8003868 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 f89b 	bl	800393a <I2C_IsAcknowledgeFailed>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e034      	b.n	8003878 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003814:	d028      	beq.n	8003868 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003816:	f7fe fdcf 	bl	80023b8 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	429a      	cmp	r2, r3
 8003824:	d302      	bcc.n	800382c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d11d      	bne.n	8003868 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	f003 0304 	and.w	r3, r3, #4
 8003836:	2b04      	cmp	r3, #4
 8003838:	d016      	beq.n	8003868 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	f043 0220 	orr.w	r2, r3, #32
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e007      	b.n	8003878 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b04      	cmp	r3, #4
 8003874:	d1c3      	bne.n	80037fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800388c:	e049      	b.n	8003922 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	f003 0310 	and.w	r3, r3, #16
 8003898:	2b10      	cmp	r3, #16
 800389a:	d119      	bne.n	80038d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f06f 0210 	mvn.w	r2, #16
 80038a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e030      	b.n	8003932 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d0:	f7fe fd72 	bl	80023b8 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d302      	bcc.n	80038e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d11d      	bne.n	8003922 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f0:	2b40      	cmp	r3, #64	; 0x40
 80038f2:	d016      	beq.n	8003922 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2220      	movs	r2, #32
 80038fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	f043 0220 	orr.w	r2, r3, #32
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e007      	b.n	8003932 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392c:	2b40      	cmp	r3, #64	; 0x40
 800392e:	d1ae      	bne.n	800388e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800394c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003950:	d11b      	bne.n	800398a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800395a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2220      	movs	r2, #32
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f043 0204 	orr.w	r2, r3, #4
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr
	...

08003998 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e272      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 8087 	beq.w	8003ac6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039b8:	4b92      	ldr	r3, [pc, #584]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 030c 	and.w	r3, r3, #12
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	d00c      	beq.n	80039de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039c4:	4b8f      	ldr	r3, [pc, #572]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f003 030c 	and.w	r3, r3, #12
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d112      	bne.n	80039f6 <HAL_RCC_OscConfig+0x5e>
 80039d0:	4b8c      	ldr	r3, [pc, #560]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039dc:	d10b      	bne.n	80039f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039de:	4b89      	ldr	r3, [pc, #548]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d06c      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x12c>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d168      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e24c      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039fe:	d106      	bne.n	8003a0e <HAL_RCC_OscConfig+0x76>
 8003a00:	4b80      	ldr	r3, [pc, #512]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a7f      	ldr	r2, [pc, #508]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	e02e      	b.n	8003a6c <HAL_RCC_OscConfig+0xd4>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10c      	bne.n	8003a30 <HAL_RCC_OscConfig+0x98>
 8003a16:	4b7b      	ldr	r3, [pc, #492]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a7a      	ldr	r2, [pc, #488]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003a1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	4b78      	ldr	r3, [pc, #480]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a77      	ldr	r2, [pc, #476]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003a28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	e01d      	b.n	8003a6c <HAL_RCC_OscConfig+0xd4>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a38:	d10c      	bne.n	8003a54 <HAL_RCC_OscConfig+0xbc>
 8003a3a:	4b72      	ldr	r3, [pc, #456]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a71      	ldr	r2, [pc, #452]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	4b6f      	ldr	r3, [pc, #444]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a6e      	ldr	r2, [pc, #440]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	e00b      	b.n	8003a6c <HAL_RCC_OscConfig+0xd4>
 8003a54:	4b6b      	ldr	r3, [pc, #428]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a6a      	ldr	r2, [pc, #424]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5e:	6013      	str	r3, [r2, #0]
 8003a60:	4b68      	ldr	r3, [pc, #416]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a67      	ldr	r2, [pc, #412]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d013      	beq.n	8003a9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a74:	f7fe fca0 	bl	80023b8 <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a7c:	f7fe fc9c 	bl	80023b8 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b64      	cmp	r3, #100	; 0x64
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e200      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8e:	4b5d      	ldr	r3, [pc, #372]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0f0      	beq.n	8003a7c <HAL_RCC_OscConfig+0xe4>
 8003a9a:	e014      	b.n	8003ac6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9c:	f7fe fc8c 	bl	80023b8 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa4:	f7fe fc88 	bl	80023b8 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b64      	cmp	r3, #100	; 0x64
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e1ec      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ab6:	4b53      	ldr	r3, [pc, #332]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f0      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x10c>
 8003ac2:	e000      	b.n	8003ac6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d063      	beq.n	8003b9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ad2:	4b4c      	ldr	r3, [pc, #304]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f003 030c 	and.w	r3, r3, #12
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00b      	beq.n	8003af6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ade:	4b49      	ldr	r3, [pc, #292]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f003 030c 	and.w	r3, r3, #12
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d11c      	bne.n	8003b24 <HAL_RCC_OscConfig+0x18c>
 8003aea:	4b46      	ldr	r3, [pc, #280]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d116      	bne.n	8003b24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003af6:	4b43      	ldr	r3, [pc, #268]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d005      	beq.n	8003b0e <HAL_RCC_OscConfig+0x176>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d001      	beq.n	8003b0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e1c0      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0e:	4b3d      	ldr	r3, [pc, #244]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	4939      	ldr	r1, [pc, #228]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b22:	e03a      	b.n	8003b9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d020      	beq.n	8003b6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b2c:	4b36      	ldr	r3, [pc, #216]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003b2e:	2201      	movs	r2, #1
 8003b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b32:	f7fe fc41 	bl	80023b8 <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b38:	e008      	b.n	8003b4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b3a:	f7fe fc3d 	bl	80023b8 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e1a1      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b4c:	4b2d      	ldr	r3, [pc, #180]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0f0      	beq.n	8003b3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b58:	4b2a      	ldr	r3, [pc, #168]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	4927      	ldr	r1, [pc, #156]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	600b      	str	r3, [r1, #0]
 8003b6c:	e015      	b.n	8003b9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b6e:	4b26      	ldr	r3, [pc, #152]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b74:	f7fe fc20 	bl	80023b8 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b7c:	f7fe fc1c 	bl	80023b8 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e180      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b8e:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f0      	bne.n	8003b7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d03a      	beq.n	8003c1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d019      	beq.n	8003be2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bae:	4b17      	ldr	r3, [pc, #92]	; (8003c0c <HAL_RCC_OscConfig+0x274>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb4:	f7fe fc00 	bl	80023b8 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bbc:	f7fe fbfc 	bl	80023b8 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e160      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bce:	4b0d      	ldr	r3, [pc, #52]	; (8003c04 <HAL_RCC_OscConfig+0x26c>)
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003bda:	2001      	movs	r0, #1
 8003bdc:	f000 face 	bl	800417c <RCC_Delay>
 8003be0:	e01c      	b.n	8003c1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003be2:	4b0a      	ldr	r3, [pc, #40]	; (8003c0c <HAL_RCC_OscConfig+0x274>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be8:	f7fe fbe6 	bl	80023b8 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bee:	e00f      	b.n	8003c10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bf0:	f7fe fbe2 	bl	80023b8 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d908      	bls.n	8003c10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e146      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
 8003c02:	bf00      	nop
 8003c04:	40021000 	.word	0x40021000
 8003c08:	42420000 	.word	0x42420000
 8003c0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c10:	4b92      	ldr	r3, [pc, #584]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1e9      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 80a6 	beq.w	8003d76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c2e:	4b8b      	ldr	r3, [pc, #556]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10d      	bne.n	8003c56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c3a:	4b88      	ldr	r3, [pc, #544]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	4a87      	ldr	r2, [pc, #540]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c44:	61d3      	str	r3, [r2, #28]
 8003c46:	4b85      	ldr	r3, [pc, #532]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c4e:	60bb      	str	r3, [r7, #8]
 8003c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c52:	2301      	movs	r3, #1
 8003c54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c56:	4b82      	ldr	r3, [pc, #520]	; (8003e60 <HAL_RCC_OscConfig+0x4c8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d118      	bne.n	8003c94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c62:	4b7f      	ldr	r3, [pc, #508]	; (8003e60 <HAL_RCC_OscConfig+0x4c8>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a7e      	ldr	r2, [pc, #504]	; (8003e60 <HAL_RCC_OscConfig+0x4c8>)
 8003c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c6e:	f7fe fba3 	bl	80023b8 <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c76:	f7fe fb9f 	bl	80023b8 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b64      	cmp	r3, #100	; 0x64
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e103      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c88:	4b75      	ldr	r3, [pc, #468]	; (8003e60 <HAL_RCC_OscConfig+0x4c8>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0f0      	beq.n	8003c76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d106      	bne.n	8003caa <HAL_RCC_OscConfig+0x312>
 8003c9c:	4b6f      	ldr	r3, [pc, #444]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	4a6e      	ldr	r2, [pc, #440]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003ca2:	f043 0301 	orr.w	r3, r3, #1
 8003ca6:	6213      	str	r3, [r2, #32]
 8003ca8:	e02d      	b.n	8003d06 <HAL_RCC_OscConfig+0x36e>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10c      	bne.n	8003ccc <HAL_RCC_OscConfig+0x334>
 8003cb2:	4b6a      	ldr	r3, [pc, #424]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	4a69      	ldr	r2, [pc, #420]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003cb8:	f023 0301 	bic.w	r3, r3, #1
 8003cbc:	6213      	str	r3, [r2, #32]
 8003cbe:	4b67      	ldr	r3, [pc, #412]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	4a66      	ldr	r2, [pc, #408]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003cc4:	f023 0304 	bic.w	r3, r3, #4
 8003cc8:	6213      	str	r3, [r2, #32]
 8003cca:	e01c      	b.n	8003d06 <HAL_RCC_OscConfig+0x36e>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	2b05      	cmp	r3, #5
 8003cd2:	d10c      	bne.n	8003cee <HAL_RCC_OscConfig+0x356>
 8003cd4:	4b61      	ldr	r3, [pc, #388]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	4a60      	ldr	r2, [pc, #384]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003cda:	f043 0304 	orr.w	r3, r3, #4
 8003cde:	6213      	str	r3, [r2, #32]
 8003ce0:	4b5e      	ldr	r3, [pc, #376]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	4a5d      	ldr	r2, [pc, #372]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003ce6:	f043 0301 	orr.w	r3, r3, #1
 8003cea:	6213      	str	r3, [r2, #32]
 8003cec:	e00b      	b.n	8003d06 <HAL_RCC_OscConfig+0x36e>
 8003cee:	4b5b      	ldr	r3, [pc, #364]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	4a5a      	ldr	r2, [pc, #360]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003cf4:	f023 0301 	bic.w	r3, r3, #1
 8003cf8:	6213      	str	r3, [r2, #32]
 8003cfa:	4b58      	ldr	r3, [pc, #352]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	4a57      	ldr	r2, [pc, #348]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003d00:	f023 0304 	bic.w	r3, r3, #4
 8003d04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d015      	beq.n	8003d3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d0e:	f7fe fb53 	bl	80023b8 <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d14:	e00a      	b.n	8003d2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d16:	f7fe fb4f 	bl	80023b8 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e0b1      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d2c:	4b4b      	ldr	r3, [pc, #300]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0ee      	beq.n	8003d16 <HAL_RCC_OscConfig+0x37e>
 8003d38:	e014      	b.n	8003d64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d3a:	f7fe fb3d 	bl	80023b8 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d40:	e00a      	b.n	8003d58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d42:	f7fe fb39 	bl	80023b8 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e09b      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d58:	4b40      	ldr	r3, [pc, #256]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1ee      	bne.n	8003d42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d64:	7dfb      	ldrb	r3, [r7, #23]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d105      	bne.n	8003d76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d6a:	4b3c      	ldr	r3, [pc, #240]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	4a3b      	ldr	r2, [pc, #236]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 8087 	beq.w	8003e8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d80:	4b36      	ldr	r3, [pc, #216]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f003 030c 	and.w	r3, r3, #12
 8003d88:	2b08      	cmp	r3, #8
 8003d8a:	d061      	beq.n	8003e50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d146      	bne.n	8003e22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d94:	4b33      	ldr	r3, [pc, #204]	; (8003e64 <HAL_RCC_OscConfig+0x4cc>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9a:	f7fe fb0d 	bl	80023b8 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003da0:	e008      	b.n	8003db4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003da2:	f7fe fb09 	bl	80023b8 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e06d      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003db4:	4b29      	ldr	r3, [pc, #164]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1f0      	bne.n	8003da2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc8:	d108      	bne.n	8003ddc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003dca:	4b24      	ldr	r3, [pc, #144]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	4921      	ldr	r1, [pc, #132]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ddc:	4b1f      	ldr	r3, [pc, #124]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a19      	ldr	r1, [r3, #32]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	430b      	orrs	r3, r1
 8003dee:	491b      	ldr	r1, [pc, #108]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003df4:	4b1b      	ldr	r3, [pc, #108]	; (8003e64 <HAL_RCC_OscConfig+0x4cc>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfa:	f7fe fadd 	bl	80023b8 <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e02:	f7fe fad9 	bl	80023b8 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e03d      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e14:	4b11      	ldr	r3, [pc, #68]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0f0      	beq.n	8003e02 <HAL_RCC_OscConfig+0x46a>
 8003e20:	e035      	b.n	8003e8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e22:	4b10      	ldr	r3, [pc, #64]	; (8003e64 <HAL_RCC_OscConfig+0x4cc>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e28:	f7fe fac6 	bl	80023b8 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e30:	f7fe fac2 	bl	80023b8 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e026      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e42:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <HAL_RCC_OscConfig+0x4c4>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1f0      	bne.n	8003e30 <HAL_RCC_OscConfig+0x498>
 8003e4e:	e01e      	b.n	8003e8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d107      	bne.n	8003e68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e019      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	40007000 	.word	0x40007000
 8003e64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e68:	4b0b      	ldr	r3, [pc, #44]	; (8003e98 <HAL_RCC_OscConfig+0x500>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d106      	bne.n	8003e8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d001      	beq.n	8003e8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e000      	b.n	8003e90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40021000 	.word	0x40021000

08003e9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e0d0      	b.n	8004052 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003eb0:	4b6a      	ldr	r3, [pc, #424]	; (800405c <HAL_RCC_ClockConfig+0x1c0>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d910      	bls.n	8003ee0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ebe:	4b67      	ldr	r3, [pc, #412]	; (800405c <HAL_RCC_ClockConfig+0x1c0>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f023 0207 	bic.w	r2, r3, #7
 8003ec6:	4965      	ldr	r1, [pc, #404]	; (800405c <HAL_RCC_ClockConfig+0x1c0>)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ece:	4b63      	ldr	r3, [pc, #396]	; (800405c <HAL_RCC_ClockConfig+0x1c0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d001      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e0b8      	b.n	8004052 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d020      	beq.n	8003f2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ef8:	4b59      	ldr	r3, [pc, #356]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	4a58      	ldr	r2, [pc, #352]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003efe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f10:	4b53      	ldr	r3, [pc, #332]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	4a52      	ldr	r2, [pc, #328]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003f16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f1c:	4b50      	ldr	r3, [pc, #320]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	494d      	ldr	r1, [pc, #308]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d040      	beq.n	8003fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d107      	bne.n	8003f52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f42:	4b47      	ldr	r3, [pc, #284]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d115      	bne.n	8003f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e07f      	b.n	8004052 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d107      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f5a:	4b41      	ldr	r3, [pc, #260]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d109      	bne.n	8003f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e073      	b.n	8004052 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f6a:	4b3d      	ldr	r3, [pc, #244]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e06b      	b.n	8004052 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f7a:	4b39      	ldr	r3, [pc, #228]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f023 0203 	bic.w	r2, r3, #3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	4936      	ldr	r1, [pc, #216]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f8c:	f7fe fa14 	bl	80023b8 <HAL_GetTick>
 8003f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f92:	e00a      	b.n	8003faa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f94:	f7fe fa10 	bl	80023b8 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e053      	b.n	8004052 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003faa:	4b2d      	ldr	r3, [pc, #180]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f003 020c 	and.w	r2, r3, #12
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d1eb      	bne.n	8003f94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fbc:	4b27      	ldr	r3, [pc, #156]	; (800405c <HAL_RCC_ClockConfig+0x1c0>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d210      	bcs.n	8003fec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fca:	4b24      	ldr	r3, [pc, #144]	; (800405c <HAL_RCC_ClockConfig+0x1c0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f023 0207 	bic.w	r2, r3, #7
 8003fd2:	4922      	ldr	r1, [pc, #136]	; (800405c <HAL_RCC_ClockConfig+0x1c0>)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fda:	4b20      	ldr	r3, [pc, #128]	; (800405c <HAL_RCC_ClockConfig+0x1c0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d001      	beq.n	8003fec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e032      	b.n	8004052 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d008      	beq.n	800400a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ff8:	4b19      	ldr	r3, [pc, #100]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	4916      	ldr	r1, [pc, #88]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8004006:	4313      	orrs	r3, r2
 8004008:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d009      	beq.n	800402a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004016:	4b12      	ldr	r3, [pc, #72]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	490e      	ldr	r1, [pc, #56]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8004026:	4313      	orrs	r3, r2
 8004028:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800402a:	f000 f821 	bl	8004070 <HAL_RCC_GetSysClockFreq>
 800402e:	4602      	mov	r2, r0
 8004030:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <HAL_RCC_ClockConfig+0x1c4>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	091b      	lsrs	r3, r3, #4
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	490a      	ldr	r1, [pc, #40]	; (8004064 <HAL_RCC_ClockConfig+0x1c8>)
 800403c:	5ccb      	ldrb	r3, [r1, r3]
 800403e:	fa22 f303 	lsr.w	r3, r2, r3
 8004042:	4a09      	ldr	r2, [pc, #36]	; (8004068 <HAL_RCC_ClockConfig+0x1cc>)
 8004044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004046:	4b09      	ldr	r3, [pc, #36]	; (800406c <HAL_RCC_ClockConfig+0x1d0>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f7fe f972 	bl	8002334 <HAL_InitTick>

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	40022000 	.word	0x40022000
 8004060:	40021000 	.word	0x40021000
 8004064:	0800a014 	.word	0x0800a014
 8004068:	20000004 	.word	0x20000004
 800406c:	20000008 	.word	0x20000008

08004070 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	2300      	movs	r3, #0
 800407c:	60bb      	str	r3, [r7, #8]
 800407e:	2300      	movs	r3, #0
 8004080:	617b      	str	r3, [r7, #20]
 8004082:	2300      	movs	r3, #0
 8004084:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004086:	2300      	movs	r3, #0
 8004088:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800408a:	4b1e      	ldr	r3, [pc, #120]	; (8004104 <HAL_RCC_GetSysClockFreq+0x94>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f003 030c 	and.w	r3, r3, #12
 8004096:	2b04      	cmp	r3, #4
 8004098:	d002      	beq.n	80040a0 <HAL_RCC_GetSysClockFreq+0x30>
 800409a:	2b08      	cmp	r3, #8
 800409c:	d003      	beq.n	80040a6 <HAL_RCC_GetSysClockFreq+0x36>
 800409e:	e027      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040a0:	4b19      	ldr	r3, [pc, #100]	; (8004108 <HAL_RCC_GetSysClockFreq+0x98>)
 80040a2:	613b      	str	r3, [r7, #16]
      break;
 80040a4:	e027      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	0c9b      	lsrs	r3, r3, #18
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	4a17      	ldr	r2, [pc, #92]	; (800410c <HAL_RCC_GetSysClockFreq+0x9c>)
 80040b0:	5cd3      	ldrb	r3, [r2, r3]
 80040b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d010      	beq.n	80040e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040be:	4b11      	ldr	r3, [pc, #68]	; (8004104 <HAL_RCC_GetSysClockFreq+0x94>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	0c5b      	lsrs	r3, r3, #17
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	4a11      	ldr	r2, [pc, #68]	; (8004110 <HAL_RCC_GetSysClockFreq+0xa0>)
 80040ca:	5cd3      	ldrb	r3, [r2, r3]
 80040cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a0d      	ldr	r2, [pc, #52]	; (8004108 <HAL_RCC_GetSysClockFreq+0x98>)
 80040d2:	fb03 f202 	mul.w	r2, r3, r2
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040dc:	617b      	str	r3, [r7, #20]
 80040de:	e004      	b.n	80040ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a0c      	ldr	r2, [pc, #48]	; (8004114 <HAL_RCC_GetSysClockFreq+0xa4>)
 80040e4:	fb02 f303 	mul.w	r3, r2, r3
 80040e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	613b      	str	r3, [r7, #16]
      break;
 80040ee:	e002      	b.n	80040f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040f0:	4b05      	ldr	r3, [pc, #20]	; (8004108 <HAL_RCC_GetSysClockFreq+0x98>)
 80040f2:	613b      	str	r3, [r7, #16]
      break;
 80040f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040f6:	693b      	ldr	r3, [r7, #16]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	371c      	adds	r7, #28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bc80      	pop	{r7}
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40021000 	.word	0x40021000
 8004108:	007a1200 	.word	0x007a1200
 800410c:	0800a02c 	.word	0x0800a02c
 8004110:	0800a03c 	.word	0x0800a03c
 8004114:	003d0900 	.word	0x003d0900

08004118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800411c:	4b02      	ldr	r3, [pc, #8]	; (8004128 <HAL_RCC_GetHCLKFreq+0x10>)
 800411e:	681b      	ldr	r3, [r3, #0]
}
 8004120:	4618      	mov	r0, r3
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr
 8004128:	20000004 	.word	0x20000004

0800412c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004130:	f7ff fff2 	bl	8004118 <HAL_RCC_GetHCLKFreq>
 8004134:	4602      	mov	r2, r0
 8004136:	4b05      	ldr	r3, [pc, #20]	; (800414c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	0a1b      	lsrs	r3, r3, #8
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	4903      	ldr	r1, [pc, #12]	; (8004150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004142:	5ccb      	ldrb	r3, [r1, r3]
 8004144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004148:	4618      	mov	r0, r3
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40021000 	.word	0x40021000
 8004150:	0800a024 	.word	0x0800a024

08004154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004158:	f7ff ffde 	bl	8004118 <HAL_RCC_GetHCLKFreq>
 800415c:	4602      	mov	r2, r0
 800415e:	4b05      	ldr	r3, [pc, #20]	; (8004174 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	0adb      	lsrs	r3, r3, #11
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	4903      	ldr	r1, [pc, #12]	; (8004178 <HAL_RCC_GetPCLK2Freq+0x24>)
 800416a:	5ccb      	ldrb	r3, [r1, r3]
 800416c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004170:	4618      	mov	r0, r3
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40021000 	.word	0x40021000
 8004178:	0800a024 	.word	0x0800a024

0800417c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004184:	4b0a      	ldr	r3, [pc, #40]	; (80041b0 <RCC_Delay+0x34>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a0a      	ldr	r2, [pc, #40]	; (80041b4 <RCC_Delay+0x38>)
 800418a:	fba2 2303 	umull	r2, r3, r2, r3
 800418e:	0a5b      	lsrs	r3, r3, #9
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	fb02 f303 	mul.w	r3, r2, r3
 8004196:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004198:	bf00      	nop
  }
  while (Delay --);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	1e5a      	subs	r2, r3, #1
 800419e:	60fa      	str	r2, [r7, #12]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1f9      	bne.n	8004198 <RCC_Delay+0x1c>
}
 80041a4:	bf00      	nop
 80041a6:	bf00      	nop
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr
 80041b0:	20000004 	.word	0x20000004
 80041b4:	10624dd3 	.word	0x10624dd3

080041b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d001      	beq.n	80041d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e03a      	b.n	8004246 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2202      	movs	r2, #2
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0201 	orr.w	r2, r2, #1
 80041e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a18      	ldr	r2, [pc, #96]	; (8004250 <HAL_TIM_Base_Start_IT+0x98>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d00e      	beq.n	8004210 <HAL_TIM_Base_Start_IT+0x58>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041fa:	d009      	beq.n	8004210 <HAL_TIM_Base_Start_IT+0x58>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a14      	ldr	r2, [pc, #80]	; (8004254 <HAL_TIM_Base_Start_IT+0x9c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d004      	beq.n	8004210 <HAL_TIM_Base_Start_IT+0x58>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a13      	ldr	r2, [pc, #76]	; (8004258 <HAL_TIM_Base_Start_IT+0xa0>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d111      	bne.n	8004234 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 0307 	and.w	r3, r3, #7
 800421a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2b06      	cmp	r3, #6
 8004220:	d010      	beq.n	8004244 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f042 0201 	orr.w	r2, r2, #1
 8004230:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004232:	e007      	b.n	8004244 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0201 	orr.w	r2, r2, #1
 8004242:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	bc80      	pop	{r7}
 800424e:	4770      	bx	lr
 8004250:	40012c00 	.word	0x40012c00
 8004254:	40000400 	.word	0x40000400
 8004258:	40000800 	.word	0x40000800

0800425c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e041      	b.n	80042f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d106      	bne.n	8004288 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fd fac6 	bl	8001814 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3304      	adds	r3, #4
 8004298:	4619      	mov	r1, r3
 800429a:	4610      	mov	r0, r2
 800429c:	f000 f992 	bl	80045c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
	...

080042fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d109      	bne.n	8004320 <HAL_TIM_PWM_Start+0x24>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b01      	cmp	r3, #1
 8004316:	bf14      	ite	ne
 8004318:	2301      	movne	r3, #1
 800431a:	2300      	moveq	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	e022      	b.n	8004366 <HAL_TIM_PWM_Start+0x6a>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	2b04      	cmp	r3, #4
 8004324:	d109      	bne.n	800433a <HAL_TIM_PWM_Start+0x3e>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b01      	cmp	r3, #1
 8004330:	bf14      	ite	ne
 8004332:	2301      	movne	r3, #1
 8004334:	2300      	moveq	r3, #0
 8004336:	b2db      	uxtb	r3, r3
 8004338:	e015      	b.n	8004366 <HAL_TIM_PWM_Start+0x6a>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b08      	cmp	r3, #8
 800433e:	d109      	bne.n	8004354 <HAL_TIM_PWM_Start+0x58>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b01      	cmp	r3, #1
 800434a:	bf14      	ite	ne
 800434c:	2301      	movne	r3, #1
 800434e:	2300      	moveq	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	e008      	b.n	8004366 <HAL_TIM_PWM_Start+0x6a>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b01      	cmp	r3, #1
 800435e:	bf14      	ite	ne
 8004360:	2301      	movne	r3, #1
 8004362:	2300      	moveq	r3, #0
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e05e      	b.n	800442c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d104      	bne.n	800437e <HAL_TIM_PWM_Start+0x82>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800437c:	e013      	b.n	80043a6 <HAL_TIM_PWM_Start+0xaa>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b04      	cmp	r3, #4
 8004382:	d104      	bne.n	800438e <HAL_TIM_PWM_Start+0x92>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800438c:	e00b      	b.n	80043a6 <HAL_TIM_PWM_Start+0xaa>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b08      	cmp	r3, #8
 8004392:	d104      	bne.n	800439e <HAL_TIM_PWM_Start+0xa2>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800439c:	e003      	b.n	80043a6 <HAL_TIM_PWM_Start+0xaa>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2202      	movs	r2, #2
 80043a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2201      	movs	r2, #1
 80043ac:	6839      	ldr	r1, [r7, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 faf2 	bl	8004998 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a1e      	ldr	r2, [pc, #120]	; (8004434 <HAL_TIM_PWM_Start+0x138>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d107      	bne.n	80043ce <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a18      	ldr	r2, [pc, #96]	; (8004434 <HAL_TIM_PWM_Start+0x138>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d00e      	beq.n	80043f6 <HAL_TIM_PWM_Start+0xfa>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e0:	d009      	beq.n	80043f6 <HAL_TIM_PWM_Start+0xfa>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a14      	ldr	r2, [pc, #80]	; (8004438 <HAL_TIM_PWM_Start+0x13c>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d004      	beq.n	80043f6 <HAL_TIM_PWM_Start+0xfa>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a12      	ldr	r2, [pc, #72]	; (800443c <HAL_TIM_PWM_Start+0x140>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d111      	bne.n	800441a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2b06      	cmp	r3, #6
 8004406:	d010      	beq.n	800442a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0201 	orr.w	r2, r2, #1
 8004416:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004418:	e007      	b.n	800442a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f042 0201 	orr.w	r2, r2, #1
 8004428:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40012c00 	.word	0x40012c00
 8004438:	40000400 	.word	0x40000400
 800443c:	40000800 	.word	0x40000800

08004440 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800444c:	2300      	movs	r3, #0
 800444e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004456:	2b01      	cmp	r3, #1
 8004458:	d101      	bne.n	800445e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800445a:	2302      	movs	r3, #2
 800445c:	e0ae      	b.n	80045bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b0c      	cmp	r3, #12
 800446a:	f200 809f 	bhi.w	80045ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800446e:	a201      	add	r2, pc, #4	; (adr r2, 8004474 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004474:	080044a9 	.word	0x080044a9
 8004478:	080045ad 	.word	0x080045ad
 800447c:	080045ad 	.word	0x080045ad
 8004480:	080045ad 	.word	0x080045ad
 8004484:	080044e9 	.word	0x080044e9
 8004488:	080045ad 	.word	0x080045ad
 800448c:	080045ad 	.word	0x080045ad
 8004490:	080045ad 	.word	0x080045ad
 8004494:	0800452b 	.word	0x0800452b
 8004498:	080045ad 	.word	0x080045ad
 800449c:	080045ad 	.word	0x080045ad
 80044a0:	080045ad 	.word	0x080045ad
 80044a4:	0800456b 	.word	0x0800456b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68b9      	ldr	r1, [r7, #8]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 f8ea 	bl	8004688 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699a      	ldr	r2, [r3, #24]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0208 	orr.w	r2, r2, #8
 80044c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699a      	ldr	r2, [r3, #24]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0204 	bic.w	r2, r2, #4
 80044d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6999      	ldr	r1, [r3, #24]
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	691a      	ldr	r2, [r3, #16]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	619a      	str	r2, [r3, #24]
      break;
 80044e6:	e064      	b.n	80045b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68b9      	ldr	r1, [r7, #8]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 f930 	bl	8004754 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699a      	ldr	r2, [r3, #24]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004502:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699a      	ldr	r2, [r3, #24]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004512:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6999      	ldr	r1, [r3, #24]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	021a      	lsls	r2, r3, #8
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	619a      	str	r2, [r3, #24]
      break;
 8004528:	e043      	b.n	80045b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68b9      	ldr	r1, [r7, #8]
 8004530:	4618      	mov	r0, r3
 8004532:	f000 f979 	bl	8004828 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	69da      	ldr	r2, [r3, #28]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f042 0208 	orr.w	r2, r2, #8
 8004544:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	69da      	ldr	r2, [r3, #28]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 0204 	bic.w	r2, r2, #4
 8004554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	69d9      	ldr	r1, [r3, #28]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	691a      	ldr	r2, [r3, #16]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	61da      	str	r2, [r3, #28]
      break;
 8004568:	e023      	b.n	80045b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68b9      	ldr	r1, [r7, #8]
 8004570:	4618      	mov	r0, r3
 8004572:	f000 f9c3 	bl	80048fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	69da      	ldr	r2, [r3, #28]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004584:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69da      	ldr	r2, [r3, #28]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004594:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	69d9      	ldr	r1, [r3, #28]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	021a      	lsls	r2, r3, #8
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	61da      	str	r2, [r3, #28]
      break;
 80045aa:	e002      	b.n	80045b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	75fb      	strb	r3, [r7, #23]
      break;
 80045b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3718      	adds	r7, #24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a29      	ldr	r2, [pc, #164]	; (800467c <TIM_Base_SetConfig+0xb8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d00b      	beq.n	80045f4 <TIM_Base_SetConfig+0x30>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e2:	d007      	beq.n	80045f4 <TIM_Base_SetConfig+0x30>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a26      	ldr	r2, [pc, #152]	; (8004680 <TIM_Base_SetConfig+0xbc>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d003      	beq.n	80045f4 <TIM_Base_SetConfig+0x30>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a25      	ldr	r2, [pc, #148]	; (8004684 <TIM_Base_SetConfig+0xc0>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d108      	bne.n	8004606 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a1c      	ldr	r2, [pc, #112]	; (800467c <TIM_Base_SetConfig+0xb8>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d00b      	beq.n	8004626 <TIM_Base_SetConfig+0x62>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004614:	d007      	beq.n	8004626 <TIM_Base_SetConfig+0x62>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a19      	ldr	r2, [pc, #100]	; (8004680 <TIM_Base_SetConfig+0xbc>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d003      	beq.n	8004626 <TIM_Base_SetConfig+0x62>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a18      	ldr	r2, [pc, #96]	; (8004684 <TIM_Base_SetConfig+0xc0>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d108      	bne.n	8004638 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800462c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4313      	orrs	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a07      	ldr	r2, [pc, #28]	; (800467c <TIM_Base_SetConfig+0xb8>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d103      	bne.n	800466c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	691a      	ldr	r2, [r3, #16]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	615a      	str	r2, [r3, #20]
}
 8004672:	bf00      	nop
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	bc80      	pop	{r7}
 800467a:	4770      	bx	lr
 800467c:	40012c00 	.word	0x40012c00
 8004680:	40000400 	.word	0x40000400
 8004684:	40000800 	.word	0x40000800

08004688 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	f023 0201 	bic.w	r2, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0303 	bic.w	r3, r3, #3
 80046be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f023 0302 	bic.w	r3, r3, #2
 80046d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	4313      	orrs	r3, r2
 80046da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a1c      	ldr	r2, [pc, #112]	; (8004750 <TIM_OC1_SetConfig+0xc8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d10c      	bne.n	80046fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f023 0308 	bic.w	r3, r3, #8
 80046ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f023 0304 	bic.w	r3, r3, #4
 80046fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a13      	ldr	r2, [pc, #76]	; (8004750 <TIM_OC1_SetConfig+0xc8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d111      	bne.n	800472a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800470c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	621a      	str	r2, [r3, #32]
}
 8004744:	bf00      	nop
 8004746:	371c      	adds	r7, #28
 8004748:	46bd      	mov	sp, r7
 800474a:	bc80      	pop	{r7}
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	40012c00 	.word	0x40012c00

08004754 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	f023 0210 	bic.w	r2, r3, #16
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800478a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	021b      	lsls	r3, r3, #8
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f023 0320 	bic.w	r3, r3, #32
 800479e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a1d      	ldr	r2, [pc, #116]	; (8004824 <TIM_OC2_SetConfig+0xd0>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d10d      	bne.n	80047d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a14      	ldr	r2, [pc, #80]	; (8004824 <TIM_OC2_SetConfig+0xd0>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d113      	bne.n	8004800 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	621a      	str	r2, [r3, #32]
}
 800481a:	bf00      	nop
 800481c:	371c      	adds	r7, #28
 800481e:	46bd      	mov	sp, r7
 8004820:	bc80      	pop	{r7}
 8004822:	4770      	bx	lr
 8004824:	40012c00 	.word	0x40012c00

08004828 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004828:	b480      	push	{r7}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f023 0303 	bic.w	r3, r3, #3
 800485e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	021b      	lsls	r3, r3, #8
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	4313      	orrs	r3, r2
 800487c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a1d      	ldr	r2, [pc, #116]	; (80048f8 <TIM_OC3_SetConfig+0xd0>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d10d      	bne.n	80048a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800488c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	021b      	lsls	r3, r3, #8
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a14      	ldr	r2, [pc, #80]	; (80048f8 <TIM_OC3_SetConfig+0xd0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d113      	bne.n	80048d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	011b      	lsls	r3, r3, #4
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	621a      	str	r2, [r3, #32]
}
 80048ec:	bf00      	nop
 80048ee:	371c      	adds	r7, #28
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bc80      	pop	{r7}
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	40012c00 	.word	0x40012c00

080048fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800492a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	021b      	lsls	r3, r3, #8
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4313      	orrs	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004946:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	031b      	lsls	r3, r3, #12
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a0f      	ldr	r2, [pc, #60]	; (8004994 <TIM_OC4_SetConfig+0x98>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d109      	bne.n	8004970 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004962:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	019b      	lsls	r3, r3, #6
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	4313      	orrs	r3, r2
 800496e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	621a      	str	r2, [r3, #32]
}
 800498a:	bf00      	nop
 800498c:	371c      	adds	r7, #28
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr
 8004994:	40012c00 	.word	0x40012c00

08004998 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	f003 031f 	and.w	r3, r3, #31
 80049aa:	2201      	movs	r2, #1
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6a1a      	ldr	r2, [r3, #32]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	43db      	mvns	r3, r3
 80049ba:	401a      	ands	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6a1a      	ldr	r2, [r3, #32]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f003 031f 	and.w	r3, r3, #31
 80049ca:	6879      	ldr	r1, [r7, #4]
 80049cc:	fa01 f303 	lsl.w	r3, r1, r3
 80049d0:	431a      	orrs	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	621a      	str	r2, [r3, #32]
}
 80049d6:	bf00      	nop
 80049d8:	371c      	adds	r7, #28
 80049da:	46bd      	mov	sp, r7
 80049dc:	bc80      	pop	{r7}
 80049de:	4770      	bx	lr

080049e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d101      	bne.n	80049f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049f4:	2302      	movs	r3, #2
 80049f6:	e046      	b.n	8004a86 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a16      	ldr	r2, [pc, #88]	; (8004a90 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d00e      	beq.n	8004a5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a44:	d009      	beq.n	8004a5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a12      	ldr	r2, [pc, #72]	; (8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d004      	beq.n	8004a5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a10      	ldr	r2, [pc, #64]	; (8004a98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d10c      	bne.n	8004a74 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr
 8004a90:	40012c00 	.word	0x40012c00
 8004a94:	40000400 	.word	0x40000400
 8004a98:	40000800 	.word	0x40000800

08004a9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d101      	bne.n	8004ab8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e03d      	b.n	8004b34 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bc80      	pop	{r7}
 8004b3c:	4770      	bx	lr

08004b3e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b082      	sub	sp, #8
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e042      	b.n	8004bd6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d106      	bne.n	8004b6a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f7fc fed1 	bl	800190c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2224      	movs	r2, #36	; 0x24
 8004b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68da      	ldr	r2, [r3, #12]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b80:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f97a 	bl	8004e7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691a      	ldr	r2, [r3, #16]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b96:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	695a      	ldr	r2, [r3, #20]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ba6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68da      	ldr	r2, [r3, #12]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bb6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b08a      	sub	sp, #40	; 0x28
 8004be2:	af02      	add	r7, sp, #8
 8004be4:	60f8      	str	r0, [r7, #12]
 8004be6:	60b9      	str	r1, [r7, #8]
 8004be8:	603b      	str	r3, [r7, #0]
 8004bea:	4613      	mov	r3, r2
 8004bec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b20      	cmp	r3, #32
 8004bfc:	d16d      	bne.n	8004cda <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d002      	beq.n	8004c0a <HAL_UART_Transmit+0x2c>
 8004c04:	88fb      	ldrh	r3, [r7, #6]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e066      	b.n	8004cdc <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2221      	movs	r2, #33	; 0x21
 8004c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c1c:	f7fd fbcc 	bl	80023b8 <HAL_GetTick>
 8004c20:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	88fa      	ldrh	r2, [r7, #6]
 8004c26:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	88fa      	ldrh	r2, [r7, #6]
 8004c2c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c36:	d108      	bne.n	8004c4a <HAL_UART_Transmit+0x6c>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d104      	bne.n	8004c4a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c40:	2300      	movs	r3, #0
 8004c42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	61bb      	str	r3, [r7, #24]
 8004c48:	e003      	b.n	8004c52 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c52:	e02a      	b.n	8004caa <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	2180      	movs	r1, #128	; 0x80
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 f865 	bl	8004d2e <UART_WaitOnFlagUntilTimeout>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e036      	b.n	8004cdc <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10b      	bne.n	8004c8c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	461a      	mov	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c82:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	3302      	adds	r3, #2
 8004c88:	61bb      	str	r3, [r7, #24]
 8004c8a:	e007      	b.n	8004c9c <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	781a      	ldrb	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1cf      	bne.n	8004c54 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	2140      	movs	r1, #64	; 0x40
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 f835 	bl	8004d2e <UART_WaitOnFlagUntilTimeout>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e006      	b.n	8004cdc <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	e000      	b.n	8004cdc <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004cda:	2302      	movs	r3, #2
  }
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3720      	adds	r7, #32
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b20      	cmp	r3, #32
 8004cfc:	d112      	bne.n	8004d24 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d002      	beq.n	8004d0a <HAL_UART_Receive_IT+0x26>
 8004d04:	88fb      	ldrh	r3, [r7, #6]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e00b      	b.n	8004d26 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d14:	88fb      	ldrh	r3, [r7, #6]
 8004d16:	461a      	mov	r2, r3
 8004d18:	68b9      	ldr	r1, [r7, #8]
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 f875 	bl	8004e0a <UART_Start_Receive_IT>
 8004d20:	4603      	mov	r3, r0
 8004d22:	e000      	b.n	8004d26 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d24:	2302      	movs	r3, #2
  }
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b090      	sub	sp, #64	; 0x40
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	60f8      	str	r0, [r7, #12]
 8004d36:	60b9      	str	r1, [r7, #8]
 8004d38:	603b      	str	r3, [r7, #0]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d3e:	e050      	b.n	8004de2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d46:	d04c      	beq.n	8004de2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d007      	beq.n	8004d5e <UART_WaitOnFlagUntilTimeout+0x30>
 8004d4e:	f7fd fb33 	bl	80023b8 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d241      	bcs.n	8004de2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	330c      	adds	r3, #12
 8004d64:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d68:	e853 3f00 	ldrex	r3, [r3]
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	330c      	adds	r3, #12
 8004d7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d7e:	637a      	str	r2, [r7, #52]	; 0x34
 8004d80:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d86:	e841 2300 	strex	r3, r2, [r1]
 8004d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1e5      	bne.n	8004d5e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	3314      	adds	r3, #20
 8004d98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	e853 3f00 	ldrex	r3, [r3]
 8004da0:	613b      	str	r3, [r7, #16]
   return(result);
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f023 0301 	bic.w	r3, r3, #1
 8004da8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	3314      	adds	r3, #20
 8004db0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004db2:	623a      	str	r2, [r7, #32]
 8004db4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db6:	69f9      	ldr	r1, [r7, #28]
 8004db8:	6a3a      	ldr	r2, [r7, #32]
 8004dba:	e841 2300 	strex	r3, r2, [r1]
 8004dbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1e5      	bne.n	8004d92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e00f      	b.n	8004e02 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	4013      	ands	r3, r2
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	bf0c      	ite	eq
 8004df2:	2301      	moveq	r3, #1
 8004df4:	2300      	movne	r3, #0
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	461a      	mov	r2, r3
 8004dfa:	79fb      	ldrb	r3, [r7, #7]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d09f      	beq.n	8004d40 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3740      	adds	r7, #64	; 0x40
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b085      	sub	sp, #20
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	60f8      	str	r0, [r7, #12]
 8004e12:	60b9      	str	r1, [r7, #8]
 8004e14:	4613      	mov	r3, r2
 8004e16:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	88fa      	ldrh	r2, [r7, #6]
 8004e22:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	88fa      	ldrh	r2, [r7, #6]
 8004e28:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2222      	movs	r2, #34	; 0x22
 8004e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d007      	beq.n	8004e50 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68da      	ldr	r2, [r3, #12]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e4e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	695a      	ldr	r2, [r3, #20]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0201 	orr.w	r2, r2, #1
 8004e5e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0220 	orr.w	r2, r2, #32
 8004e6e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr

08004e7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	689a      	ldr	r2, [r3, #8]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004eb6:	f023 030c 	bic.w	r3, r3, #12
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6812      	ldr	r2, [r2, #0]
 8004ebe:	68b9      	ldr	r1, [r7, #8]
 8004ec0:	430b      	orrs	r3, r1
 8004ec2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699a      	ldr	r2, [r3, #24]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a2c      	ldr	r2, [pc, #176]	; (8004f90 <UART_SetConfig+0x114>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d103      	bne.n	8004eec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ee4:	f7ff f936 	bl	8004154 <HAL_RCC_GetPCLK2Freq>
 8004ee8:	60f8      	str	r0, [r7, #12]
 8004eea:	e002      	b.n	8004ef2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004eec:	f7ff f91e 	bl	800412c <HAL_RCC_GetPCLK1Freq>
 8004ef0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	009a      	lsls	r2, r3, #2
 8004efc:	441a      	add	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f08:	4a22      	ldr	r2, [pc, #136]	; (8004f94 <UART_SetConfig+0x118>)
 8004f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0e:	095b      	lsrs	r3, r3, #5
 8004f10:	0119      	lsls	r1, r3, #4
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	009a      	lsls	r2, r3, #2
 8004f1c:	441a      	add	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f28:	4b1a      	ldr	r3, [pc, #104]	; (8004f94 <UART_SetConfig+0x118>)
 8004f2a:	fba3 0302 	umull	r0, r3, r3, r2
 8004f2e:	095b      	lsrs	r3, r3, #5
 8004f30:	2064      	movs	r0, #100	; 0x64
 8004f32:	fb00 f303 	mul.w	r3, r0, r3
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	3332      	adds	r3, #50	; 0x32
 8004f3c:	4a15      	ldr	r2, [pc, #84]	; (8004f94 <UART_SetConfig+0x118>)
 8004f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f42:	095b      	lsrs	r3, r3, #5
 8004f44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f48:	4419      	add	r1, r3
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	009a      	lsls	r2, r3, #2
 8004f54:	441a      	add	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f60:	4b0c      	ldr	r3, [pc, #48]	; (8004f94 <UART_SetConfig+0x118>)
 8004f62:	fba3 0302 	umull	r0, r3, r3, r2
 8004f66:	095b      	lsrs	r3, r3, #5
 8004f68:	2064      	movs	r0, #100	; 0x64
 8004f6a:	fb00 f303 	mul.w	r3, r0, r3
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	011b      	lsls	r3, r3, #4
 8004f72:	3332      	adds	r3, #50	; 0x32
 8004f74:	4a07      	ldr	r2, [pc, #28]	; (8004f94 <UART_SetConfig+0x118>)
 8004f76:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7a:	095b      	lsrs	r3, r3, #5
 8004f7c:	f003 020f 	and.w	r2, r3, #15
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	440a      	add	r2, r1
 8004f86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f88:	bf00      	nop
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	40013800 	.word	0x40013800
 8004f94:	51eb851f 	.word	0x51eb851f

08004f98 <__cvt>:
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f9e:	461f      	mov	r7, r3
 8004fa0:	bfbb      	ittet	lt
 8004fa2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004fa6:	461f      	movlt	r7, r3
 8004fa8:	2300      	movge	r3, #0
 8004faa:	232d      	movlt	r3, #45	; 0x2d
 8004fac:	b088      	sub	sp, #32
 8004fae:	4614      	mov	r4, r2
 8004fb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004fb2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004fb4:	7013      	strb	r3, [r2, #0]
 8004fb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004fb8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004fbc:	f023 0820 	bic.w	r8, r3, #32
 8004fc0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004fc4:	d005      	beq.n	8004fd2 <__cvt+0x3a>
 8004fc6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004fca:	d100      	bne.n	8004fce <__cvt+0x36>
 8004fcc:	3501      	adds	r5, #1
 8004fce:	2302      	movs	r3, #2
 8004fd0:	e000      	b.n	8004fd4 <__cvt+0x3c>
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	aa07      	add	r2, sp, #28
 8004fd6:	9204      	str	r2, [sp, #16]
 8004fd8:	aa06      	add	r2, sp, #24
 8004fda:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004fde:	e9cd 3500 	strd	r3, r5, [sp]
 8004fe2:	4622      	mov	r2, r4
 8004fe4:	463b      	mov	r3, r7
 8004fe6:	f001 f8e7 	bl	80061b8 <_dtoa_r>
 8004fea:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004fee:	4606      	mov	r6, r0
 8004ff0:	d102      	bne.n	8004ff8 <__cvt+0x60>
 8004ff2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ff4:	07db      	lsls	r3, r3, #31
 8004ff6:	d522      	bpl.n	800503e <__cvt+0xa6>
 8004ff8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ffc:	eb06 0905 	add.w	r9, r6, r5
 8005000:	d110      	bne.n	8005024 <__cvt+0x8c>
 8005002:	7833      	ldrb	r3, [r6, #0]
 8005004:	2b30      	cmp	r3, #48	; 0x30
 8005006:	d10a      	bne.n	800501e <__cvt+0x86>
 8005008:	2200      	movs	r2, #0
 800500a:	2300      	movs	r3, #0
 800500c:	4620      	mov	r0, r4
 800500e:	4639      	mov	r1, r7
 8005010:	f7fb fcca 	bl	80009a8 <__aeabi_dcmpeq>
 8005014:	b918      	cbnz	r0, 800501e <__cvt+0x86>
 8005016:	f1c5 0501 	rsb	r5, r5, #1
 800501a:	f8ca 5000 	str.w	r5, [sl]
 800501e:	f8da 3000 	ldr.w	r3, [sl]
 8005022:	4499      	add	r9, r3
 8005024:	2200      	movs	r2, #0
 8005026:	2300      	movs	r3, #0
 8005028:	4620      	mov	r0, r4
 800502a:	4639      	mov	r1, r7
 800502c:	f7fb fcbc 	bl	80009a8 <__aeabi_dcmpeq>
 8005030:	b108      	cbz	r0, 8005036 <__cvt+0x9e>
 8005032:	f8cd 901c 	str.w	r9, [sp, #28]
 8005036:	2230      	movs	r2, #48	; 0x30
 8005038:	9b07      	ldr	r3, [sp, #28]
 800503a:	454b      	cmp	r3, r9
 800503c:	d307      	bcc.n	800504e <__cvt+0xb6>
 800503e:	4630      	mov	r0, r6
 8005040:	9b07      	ldr	r3, [sp, #28]
 8005042:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005044:	1b9b      	subs	r3, r3, r6
 8005046:	6013      	str	r3, [r2, #0]
 8005048:	b008      	add	sp, #32
 800504a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800504e:	1c59      	adds	r1, r3, #1
 8005050:	9107      	str	r1, [sp, #28]
 8005052:	701a      	strb	r2, [r3, #0]
 8005054:	e7f0      	b.n	8005038 <__cvt+0xa0>

08005056 <__exponent>:
 8005056:	4603      	mov	r3, r0
 8005058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800505a:	2900      	cmp	r1, #0
 800505c:	f803 2b02 	strb.w	r2, [r3], #2
 8005060:	bfb6      	itet	lt
 8005062:	222d      	movlt	r2, #45	; 0x2d
 8005064:	222b      	movge	r2, #43	; 0x2b
 8005066:	4249      	neglt	r1, r1
 8005068:	2909      	cmp	r1, #9
 800506a:	7042      	strb	r2, [r0, #1]
 800506c:	dd2a      	ble.n	80050c4 <__exponent+0x6e>
 800506e:	f10d 0207 	add.w	r2, sp, #7
 8005072:	4617      	mov	r7, r2
 8005074:	260a      	movs	r6, #10
 8005076:	fb91 f5f6 	sdiv	r5, r1, r6
 800507a:	4694      	mov	ip, r2
 800507c:	fb06 1415 	mls	r4, r6, r5, r1
 8005080:	3430      	adds	r4, #48	; 0x30
 8005082:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005086:	460c      	mov	r4, r1
 8005088:	2c63      	cmp	r4, #99	; 0x63
 800508a:	4629      	mov	r1, r5
 800508c:	f102 32ff 	add.w	r2, r2, #4294967295
 8005090:	dcf1      	bgt.n	8005076 <__exponent+0x20>
 8005092:	3130      	adds	r1, #48	; 0x30
 8005094:	f1ac 0402 	sub.w	r4, ip, #2
 8005098:	f802 1c01 	strb.w	r1, [r2, #-1]
 800509c:	4622      	mov	r2, r4
 800509e:	1c41      	adds	r1, r0, #1
 80050a0:	42ba      	cmp	r2, r7
 80050a2:	d30a      	bcc.n	80050ba <__exponent+0x64>
 80050a4:	f10d 0209 	add.w	r2, sp, #9
 80050a8:	eba2 020c 	sub.w	r2, r2, ip
 80050ac:	42bc      	cmp	r4, r7
 80050ae:	bf88      	it	hi
 80050b0:	2200      	movhi	r2, #0
 80050b2:	4413      	add	r3, r2
 80050b4:	1a18      	subs	r0, r3, r0
 80050b6:	b003      	add	sp, #12
 80050b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050ba:	f812 5b01 	ldrb.w	r5, [r2], #1
 80050be:	f801 5f01 	strb.w	r5, [r1, #1]!
 80050c2:	e7ed      	b.n	80050a0 <__exponent+0x4a>
 80050c4:	2330      	movs	r3, #48	; 0x30
 80050c6:	3130      	adds	r1, #48	; 0x30
 80050c8:	7083      	strb	r3, [r0, #2]
 80050ca:	70c1      	strb	r1, [r0, #3]
 80050cc:	1d03      	adds	r3, r0, #4
 80050ce:	e7f1      	b.n	80050b4 <__exponent+0x5e>

080050d0 <_printf_float>:
 80050d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050d4:	b091      	sub	sp, #68	; 0x44
 80050d6:	460c      	mov	r4, r1
 80050d8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80050dc:	4616      	mov	r6, r2
 80050de:	461f      	mov	r7, r3
 80050e0:	4605      	mov	r5, r0
 80050e2:	f000 ff53 	bl	8005f8c <_localeconv_r>
 80050e6:	6803      	ldr	r3, [r0, #0]
 80050e8:	4618      	mov	r0, r3
 80050ea:	9309      	str	r3, [sp, #36]	; 0x24
 80050ec:	f7fb f830 	bl	8000150 <strlen>
 80050f0:	2300      	movs	r3, #0
 80050f2:	930e      	str	r3, [sp, #56]	; 0x38
 80050f4:	f8d8 3000 	ldr.w	r3, [r8]
 80050f8:	900a      	str	r0, [sp, #40]	; 0x28
 80050fa:	3307      	adds	r3, #7
 80050fc:	f023 0307 	bic.w	r3, r3, #7
 8005100:	f103 0208 	add.w	r2, r3, #8
 8005104:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005108:	f8d4 b000 	ldr.w	fp, [r4]
 800510c:	f8c8 2000 	str.w	r2, [r8]
 8005110:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005114:	4652      	mov	r2, sl
 8005116:	4643      	mov	r3, r8
 8005118:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800511c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005120:	930b      	str	r3, [sp, #44]	; 0x2c
 8005122:	f04f 32ff 	mov.w	r2, #4294967295
 8005126:	4650      	mov	r0, sl
 8005128:	4b9c      	ldr	r3, [pc, #624]	; (800539c <_printf_float+0x2cc>)
 800512a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800512c:	f7fb fc6e 	bl	8000a0c <__aeabi_dcmpun>
 8005130:	bb70      	cbnz	r0, 8005190 <_printf_float+0xc0>
 8005132:	f04f 32ff 	mov.w	r2, #4294967295
 8005136:	4650      	mov	r0, sl
 8005138:	4b98      	ldr	r3, [pc, #608]	; (800539c <_printf_float+0x2cc>)
 800513a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800513c:	f7fb fc48 	bl	80009d0 <__aeabi_dcmple>
 8005140:	bb30      	cbnz	r0, 8005190 <_printf_float+0xc0>
 8005142:	2200      	movs	r2, #0
 8005144:	2300      	movs	r3, #0
 8005146:	4650      	mov	r0, sl
 8005148:	4641      	mov	r1, r8
 800514a:	f7fb fc37 	bl	80009bc <__aeabi_dcmplt>
 800514e:	b110      	cbz	r0, 8005156 <_printf_float+0x86>
 8005150:	232d      	movs	r3, #45	; 0x2d
 8005152:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005156:	4a92      	ldr	r2, [pc, #584]	; (80053a0 <_printf_float+0x2d0>)
 8005158:	4b92      	ldr	r3, [pc, #584]	; (80053a4 <_printf_float+0x2d4>)
 800515a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800515e:	bf94      	ite	ls
 8005160:	4690      	movls	r8, r2
 8005162:	4698      	movhi	r8, r3
 8005164:	2303      	movs	r3, #3
 8005166:	f04f 0a00 	mov.w	sl, #0
 800516a:	6123      	str	r3, [r4, #16]
 800516c:	f02b 0304 	bic.w	r3, fp, #4
 8005170:	6023      	str	r3, [r4, #0]
 8005172:	4633      	mov	r3, r6
 8005174:	4621      	mov	r1, r4
 8005176:	4628      	mov	r0, r5
 8005178:	9700      	str	r7, [sp, #0]
 800517a:	aa0f      	add	r2, sp, #60	; 0x3c
 800517c:	f000 f9d6 	bl	800552c <_printf_common>
 8005180:	3001      	adds	r0, #1
 8005182:	f040 8090 	bne.w	80052a6 <_printf_float+0x1d6>
 8005186:	f04f 30ff 	mov.w	r0, #4294967295
 800518a:	b011      	add	sp, #68	; 0x44
 800518c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005190:	4652      	mov	r2, sl
 8005192:	4643      	mov	r3, r8
 8005194:	4650      	mov	r0, sl
 8005196:	4641      	mov	r1, r8
 8005198:	f7fb fc38 	bl	8000a0c <__aeabi_dcmpun>
 800519c:	b148      	cbz	r0, 80051b2 <_printf_float+0xe2>
 800519e:	f1b8 0f00 	cmp.w	r8, #0
 80051a2:	bfb8      	it	lt
 80051a4:	232d      	movlt	r3, #45	; 0x2d
 80051a6:	4a80      	ldr	r2, [pc, #512]	; (80053a8 <_printf_float+0x2d8>)
 80051a8:	bfb8      	it	lt
 80051aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80051ae:	4b7f      	ldr	r3, [pc, #508]	; (80053ac <_printf_float+0x2dc>)
 80051b0:	e7d3      	b.n	800515a <_printf_float+0x8a>
 80051b2:	6863      	ldr	r3, [r4, #4]
 80051b4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	d142      	bne.n	8005242 <_printf_float+0x172>
 80051bc:	2306      	movs	r3, #6
 80051be:	6063      	str	r3, [r4, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	9206      	str	r2, [sp, #24]
 80051c4:	aa0e      	add	r2, sp, #56	; 0x38
 80051c6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80051ca:	aa0d      	add	r2, sp, #52	; 0x34
 80051cc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80051d0:	9203      	str	r2, [sp, #12]
 80051d2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80051d6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80051da:	6023      	str	r3, [r4, #0]
 80051dc:	6863      	ldr	r3, [r4, #4]
 80051de:	4652      	mov	r2, sl
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	4628      	mov	r0, r5
 80051e4:	4643      	mov	r3, r8
 80051e6:	910b      	str	r1, [sp, #44]	; 0x2c
 80051e8:	f7ff fed6 	bl	8004f98 <__cvt>
 80051ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051ee:	4680      	mov	r8, r0
 80051f0:	2947      	cmp	r1, #71	; 0x47
 80051f2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80051f4:	d108      	bne.n	8005208 <_printf_float+0x138>
 80051f6:	1cc8      	adds	r0, r1, #3
 80051f8:	db02      	blt.n	8005200 <_printf_float+0x130>
 80051fa:	6863      	ldr	r3, [r4, #4]
 80051fc:	4299      	cmp	r1, r3
 80051fe:	dd40      	ble.n	8005282 <_printf_float+0x1b2>
 8005200:	f1a9 0902 	sub.w	r9, r9, #2
 8005204:	fa5f f989 	uxtb.w	r9, r9
 8005208:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800520c:	d81f      	bhi.n	800524e <_printf_float+0x17e>
 800520e:	464a      	mov	r2, r9
 8005210:	3901      	subs	r1, #1
 8005212:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005216:	910d      	str	r1, [sp, #52]	; 0x34
 8005218:	f7ff ff1d 	bl	8005056 <__exponent>
 800521c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800521e:	4682      	mov	sl, r0
 8005220:	1813      	adds	r3, r2, r0
 8005222:	2a01      	cmp	r2, #1
 8005224:	6123      	str	r3, [r4, #16]
 8005226:	dc02      	bgt.n	800522e <_printf_float+0x15e>
 8005228:	6822      	ldr	r2, [r4, #0]
 800522a:	07d2      	lsls	r2, r2, #31
 800522c:	d501      	bpl.n	8005232 <_printf_float+0x162>
 800522e:	3301      	adds	r3, #1
 8005230:	6123      	str	r3, [r4, #16]
 8005232:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005236:	2b00      	cmp	r3, #0
 8005238:	d09b      	beq.n	8005172 <_printf_float+0xa2>
 800523a:	232d      	movs	r3, #45	; 0x2d
 800523c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005240:	e797      	b.n	8005172 <_printf_float+0xa2>
 8005242:	2947      	cmp	r1, #71	; 0x47
 8005244:	d1bc      	bne.n	80051c0 <_printf_float+0xf0>
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1ba      	bne.n	80051c0 <_printf_float+0xf0>
 800524a:	2301      	movs	r3, #1
 800524c:	e7b7      	b.n	80051be <_printf_float+0xee>
 800524e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005252:	d118      	bne.n	8005286 <_printf_float+0x1b6>
 8005254:	2900      	cmp	r1, #0
 8005256:	6863      	ldr	r3, [r4, #4]
 8005258:	dd0b      	ble.n	8005272 <_printf_float+0x1a2>
 800525a:	6121      	str	r1, [r4, #16]
 800525c:	b913      	cbnz	r3, 8005264 <_printf_float+0x194>
 800525e:	6822      	ldr	r2, [r4, #0]
 8005260:	07d0      	lsls	r0, r2, #31
 8005262:	d502      	bpl.n	800526a <_printf_float+0x19a>
 8005264:	3301      	adds	r3, #1
 8005266:	440b      	add	r3, r1
 8005268:	6123      	str	r3, [r4, #16]
 800526a:	f04f 0a00 	mov.w	sl, #0
 800526e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005270:	e7df      	b.n	8005232 <_printf_float+0x162>
 8005272:	b913      	cbnz	r3, 800527a <_printf_float+0x1aa>
 8005274:	6822      	ldr	r2, [r4, #0]
 8005276:	07d2      	lsls	r2, r2, #31
 8005278:	d501      	bpl.n	800527e <_printf_float+0x1ae>
 800527a:	3302      	adds	r3, #2
 800527c:	e7f4      	b.n	8005268 <_printf_float+0x198>
 800527e:	2301      	movs	r3, #1
 8005280:	e7f2      	b.n	8005268 <_printf_float+0x198>
 8005282:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005286:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005288:	4299      	cmp	r1, r3
 800528a:	db05      	blt.n	8005298 <_printf_float+0x1c8>
 800528c:	6823      	ldr	r3, [r4, #0]
 800528e:	6121      	str	r1, [r4, #16]
 8005290:	07d8      	lsls	r0, r3, #31
 8005292:	d5ea      	bpl.n	800526a <_printf_float+0x19a>
 8005294:	1c4b      	adds	r3, r1, #1
 8005296:	e7e7      	b.n	8005268 <_printf_float+0x198>
 8005298:	2900      	cmp	r1, #0
 800529a:	bfcc      	ite	gt
 800529c:	2201      	movgt	r2, #1
 800529e:	f1c1 0202 	rsble	r2, r1, #2
 80052a2:	4413      	add	r3, r2
 80052a4:	e7e0      	b.n	8005268 <_printf_float+0x198>
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	055a      	lsls	r2, r3, #21
 80052aa:	d407      	bmi.n	80052bc <_printf_float+0x1ec>
 80052ac:	6923      	ldr	r3, [r4, #16]
 80052ae:	4642      	mov	r2, r8
 80052b0:	4631      	mov	r1, r6
 80052b2:	4628      	mov	r0, r5
 80052b4:	47b8      	blx	r7
 80052b6:	3001      	adds	r0, #1
 80052b8:	d12b      	bne.n	8005312 <_printf_float+0x242>
 80052ba:	e764      	b.n	8005186 <_printf_float+0xb6>
 80052bc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80052c0:	f240 80dd 	bls.w	800547e <_printf_float+0x3ae>
 80052c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052c8:	2200      	movs	r2, #0
 80052ca:	2300      	movs	r3, #0
 80052cc:	f7fb fb6c 	bl	80009a8 <__aeabi_dcmpeq>
 80052d0:	2800      	cmp	r0, #0
 80052d2:	d033      	beq.n	800533c <_printf_float+0x26c>
 80052d4:	2301      	movs	r3, #1
 80052d6:	4631      	mov	r1, r6
 80052d8:	4628      	mov	r0, r5
 80052da:	4a35      	ldr	r2, [pc, #212]	; (80053b0 <_printf_float+0x2e0>)
 80052dc:	47b8      	blx	r7
 80052de:	3001      	adds	r0, #1
 80052e0:	f43f af51 	beq.w	8005186 <_printf_float+0xb6>
 80052e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80052e8:	429a      	cmp	r2, r3
 80052ea:	db02      	blt.n	80052f2 <_printf_float+0x222>
 80052ec:	6823      	ldr	r3, [r4, #0]
 80052ee:	07d8      	lsls	r0, r3, #31
 80052f0:	d50f      	bpl.n	8005312 <_printf_float+0x242>
 80052f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052f6:	4631      	mov	r1, r6
 80052f8:	4628      	mov	r0, r5
 80052fa:	47b8      	blx	r7
 80052fc:	3001      	adds	r0, #1
 80052fe:	f43f af42 	beq.w	8005186 <_printf_float+0xb6>
 8005302:	f04f 0800 	mov.w	r8, #0
 8005306:	f104 091a 	add.w	r9, r4, #26
 800530a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800530c:	3b01      	subs	r3, #1
 800530e:	4543      	cmp	r3, r8
 8005310:	dc09      	bgt.n	8005326 <_printf_float+0x256>
 8005312:	6823      	ldr	r3, [r4, #0]
 8005314:	079b      	lsls	r3, r3, #30
 8005316:	f100 8104 	bmi.w	8005522 <_printf_float+0x452>
 800531a:	68e0      	ldr	r0, [r4, #12]
 800531c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800531e:	4298      	cmp	r0, r3
 8005320:	bfb8      	it	lt
 8005322:	4618      	movlt	r0, r3
 8005324:	e731      	b.n	800518a <_printf_float+0xba>
 8005326:	2301      	movs	r3, #1
 8005328:	464a      	mov	r2, r9
 800532a:	4631      	mov	r1, r6
 800532c:	4628      	mov	r0, r5
 800532e:	47b8      	blx	r7
 8005330:	3001      	adds	r0, #1
 8005332:	f43f af28 	beq.w	8005186 <_printf_float+0xb6>
 8005336:	f108 0801 	add.w	r8, r8, #1
 800533a:	e7e6      	b.n	800530a <_printf_float+0x23a>
 800533c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800533e:	2b00      	cmp	r3, #0
 8005340:	dc38      	bgt.n	80053b4 <_printf_float+0x2e4>
 8005342:	2301      	movs	r3, #1
 8005344:	4631      	mov	r1, r6
 8005346:	4628      	mov	r0, r5
 8005348:	4a19      	ldr	r2, [pc, #100]	; (80053b0 <_printf_float+0x2e0>)
 800534a:	47b8      	blx	r7
 800534c:	3001      	adds	r0, #1
 800534e:	f43f af1a 	beq.w	8005186 <_printf_float+0xb6>
 8005352:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005356:	4313      	orrs	r3, r2
 8005358:	d102      	bne.n	8005360 <_printf_float+0x290>
 800535a:	6823      	ldr	r3, [r4, #0]
 800535c:	07d9      	lsls	r1, r3, #31
 800535e:	d5d8      	bpl.n	8005312 <_printf_float+0x242>
 8005360:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005364:	4631      	mov	r1, r6
 8005366:	4628      	mov	r0, r5
 8005368:	47b8      	blx	r7
 800536a:	3001      	adds	r0, #1
 800536c:	f43f af0b 	beq.w	8005186 <_printf_float+0xb6>
 8005370:	f04f 0900 	mov.w	r9, #0
 8005374:	f104 0a1a 	add.w	sl, r4, #26
 8005378:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800537a:	425b      	negs	r3, r3
 800537c:	454b      	cmp	r3, r9
 800537e:	dc01      	bgt.n	8005384 <_printf_float+0x2b4>
 8005380:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005382:	e794      	b.n	80052ae <_printf_float+0x1de>
 8005384:	2301      	movs	r3, #1
 8005386:	4652      	mov	r2, sl
 8005388:	4631      	mov	r1, r6
 800538a:	4628      	mov	r0, r5
 800538c:	47b8      	blx	r7
 800538e:	3001      	adds	r0, #1
 8005390:	f43f aef9 	beq.w	8005186 <_printf_float+0xb6>
 8005394:	f109 0901 	add.w	r9, r9, #1
 8005398:	e7ee      	b.n	8005378 <_printf_float+0x2a8>
 800539a:	bf00      	nop
 800539c:	7fefffff 	.word	0x7fefffff
 80053a0:	0800a03e 	.word	0x0800a03e
 80053a4:	0800a042 	.word	0x0800a042
 80053a8:	0800a046 	.word	0x0800a046
 80053ac:	0800a04a 	.word	0x0800a04a
 80053b0:	0800a3d8 	.word	0x0800a3d8
 80053b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80053b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053b8:	429a      	cmp	r2, r3
 80053ba:	bfa8      	it	ge
 80053bc:	461a      	movge	r2, r3
 80053be:	2a00      	cmp	r2, #0
 80053c0:	4691      	mov	r9, r2
 80053c2:	dc37      	bgt.n	8005434 <_printf_float+0x364>
 80053c4:	f04f 0b00 	mov.w	fp, #0
 80053c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053cc:	f104 021a 	add.w	r2, r4, #26
 80053d0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80053d4:	ebaa 0309 	sub.w	r3, sl, r9
 80053d8:	455b      	cmp	r3, fp
 80053da:	dc33      	bgt.n	8005444 <_printf_float+0x374>
 80053dc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80053e0:	429a      	cmp	r2, r3
 80053e2:	db3b      	blt.n	800545c <_printf_float+0x38c>
 80053e4:	6823      	ldr	r3, [r4, #0]
 80053e6:	07da      	lsls	r2, r3, #31
 80053e8:	d438      	bmi.n	800545c <_printf_float+0x38c>
 80053ea:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80053ee:	eba2 0903 	sub.w	r9, r2, r3
 80053f2:	eba2 020a 	sub.w	r2, r2, sl
 80053f6:	4591      	cmp	r9, r2
 80053f8:	bfa8      	it	ge
 80053fa:	4691      	movge	r9, r2
 80053fc:	f1b9 0f00 	cmp.w	r9, #0
 8005400:	dc34      	bgt.n	800546c <_printf_float+0x39c>
 8005402:	f04f 0800 	mov.w	r8, #0
 8005406:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800540a:	f104 0a1a 	add.w	sl, r4, #26
 800540e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005412:	1a9b      	subs	r3, r3, r2
 8005414:	eba3 0309 	sub.w	r3, r3, r9
 8005418:	4543      	cmp	r3, r8
 800541a:	f77f af7a 	ble.w	8005312 <_printf_float+0x242>
 800541e:	2301      	movs	r3, #1
 8005420:	4652      	mov	r2, sl
 8005422:	4631      	mov	r1, r6
 8005424:	4628      	mov	r0, r5
 8005426:	47b8      	blx	r7
 8005428:	3001      	adds	r0, #1
 800542a:	f43f aeac 	beq.w	8005186 <_printf_float+0xb6>
 800542e:	f108 0801 	add.w	r8, r8, #1
 8005432:	e7ec      	b.n	800540e <_printf_float+0x33e>
 8005434:	4613      	mov	r3, r2
 8005436:	4631      	mov	r1, r6
 8005438:	4642      	mov	r2, r8
 800543a:	4628      	mov	r0, r5
 800543c:	47b8      	blx	r7
 800543e:	3001      	adds	r0, #1
 8005440:	d1c0      	bne.n	80053c4 <_printf_float+0x2f4>
 8005442:	e6a0      	b.n	8005186 <_printf_float+0xb6>
 8005444:	2301      	movs	r3, #1
 8005446:	4631      	mov	r1, r6
 8005448:	4628      	mov	r0, r5
 800544a:	920b      	str	r2, [sp, #44]	; 0x2c
 800544c:	47b8      	blx	r7
 800544e:	3001      	adds	r0, #1
 8005450:	f43f ae99 	beq.w	8005186 <_printf_float+0xb6>
 8005454:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005456:	f10b 0b01 	add.w	fp, fp, #1
 800545a:	e7b9      	b.n	80053d0 <_printf_float+0x300>
 800545c:	4631      	mov	r1, r6
 800545e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005462:	4628      	mov	r0, r5
 8005464:	47b8      	blx	r7
 8005466:	3001      	adds	r0, #1
 8005468:	d1bf      	bne.n	80053ea <_printf_float+0x31a>
 800546a:	e68c      	b.n	8005186 <_printf_float+0xb6>
 800546c:	464b      	mov	r3, r9
 800546e:	4631      	mov	r1, r6
 8005470:	4628      	mov	r0, r5
 8005472:	eb08 020a 	add.w	r2, r8, sl
 8005476:	47b8      	blx	r7
 8005478:	3001      	adds	r0, #1
 800547a:	d1c2      	bne.n	8005402 <_printf_float+0x332>
 800547c:	e683      	b.n	8005186 <_printf_float+0xb6>
 800547e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005480:	2a01      	cmp	r2, #1
 8005482:	dc01      	bgt.n	8005488 <_printf_float+0x3b8>
 8005484:	07db      	lsls	r3, r3, #31
 8005486:	d539      	bpl.n	80054fc <_printf_float+0x42c>
 8005488:	2301      	movs	r3, #1
 800548a:	4642      	mov	r2, r8
 800548c:	4631      	mov	r1, r6
 800548e:	4628      	mov	r0, r5
 8005490:	47b8      	blx	r7
 8005492:	3001      	adds	r0, #1
 8005494:	f43f ae77 	beq.w	8005186 <_printf_float+0xb6>
 8005498:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800549c:	4631      	mov	r1, r6
 800549e:	4628      	mov	r0, r5
 80054a0:	47b8      	blx	r7
 80054a2:	3001      	adds	r0, #1
 80054a4:	f43f ae6f 	beq.w	8005186 <_printf_float+0xb6>
 80054a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054ac:	2200      	movs	r2, #0
 80054ae:	2300      	movs	r3, #0
 80054b0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80054b4:	f7fb fa78 	bl	80009a8 <__aeabi_dcmpeq>
 80054b8:	b9d8      	cbnz	r0, 80054f2 <_printf_float+0x422>
 80054ba:	f109 33ff 	add.w	r3, r9, #4294967295
 80054be:	f108 0201 	add.w	r2, r8, #1
 80054c2:	4631      	mov	r1, r6
 80054c4:	4628      	mov	r0, r5
 80054c6:	47b8      	blx	r7
 80054c8:	3001      	adds	r0, #1
 80054ca:	d10e      	bne.n	80054ea <_printf_float+0x41a>
 80054cc:	e65b      	b.n	8005186 <_printf_float+0xb6>
 80054ce:	2301      	movs	r3, #1
 80054d0:	464a      	mov	r2, r9
 80054d2:	4631      	mov	r1, r6
 80054d4:	4628      	mov	r0, r5
 80054d6:	47b8      	blx	r7
 80054d8:	3001      	adds	r0, #1
 80054da:	f43f ae54 	beq.w	8005186 <_printf_float+0xb6>
 80054de:	f108 0801 	add.w	r8, r8, #1
 80054e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054e4:	3b01      	subs	r3, #1
 80054e6:	4543      	cmp	r3, r8
 80054e8:	dcf1      	bgt.n	80054ce <_printf_float+0x3fe>
 80054ea:	4653      	mov	r3, sl
 80054ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80054f0:	e6de      	b.n	80052b0 <_printf_float+0x1e0>
 80054f2:	f04f 0800 	mov.w	r8, #0
 80054f6:	f104 091a 	add.w	r9, r4, #26
 80054fa:	e7f2      	b.n	80054e2 <_printf_float+0x412>
 80054fc:	2301      	movs	r3, #1
 80054fe:	4642      	mov	r2, r8
 8005500:	e7df      	b.n	80054c2 <_printf_float+0x3f2>
 8005502:	2301      	movs	r3, #1
 8005504:	464a      	mov	r2, r9
 8005506:	4631      	mov	r1, r6
 8005508:	4628      	mov	r0, r5
 800550a:	47b8      	blx	r7
 800550c:	3001      	adds	r0, #1
 800550e:	f43f ae3a 	beq.w	8005186 <_printf_float+0xb6>
 8005512:	f108 0801 	add.w	r8, r8, #1
 8005516:	68e3      	ldr	r3, [r4, #12]
 8005518:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800551a:	1a5b      	subs	r3, r3, r1
 800551c:	4543      	cmp	r3, r8
 800551e:	dcf0      	bgt.n	8005502 <_printf_float+0x432>
 8005520:	e6fb      	b.n	800531a <_printf_float+0x24a>
 8005522:	f04f 0800 	mov.w	r8, #0
 8005526:	f104 0919 	add.w	r9, r4, #25
 800552a:	e7f4      	b.n	8005516 <_printf_float+0x446>

0800552c <_printf_common>:
 800552c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005530:	4616      	mov	r6, r2
 8005532:	4699      	mov	r9, r3
 8005534:	688a      	ldr	r2, [r1, #8]
 8005536:	690b      	ldr	r3, [r1, #16]
 8005538:	4607      	mov	r7, r0
 800553a:	4293      	cmp	r3, r2
 800553c:	bfb8      	it	lt
 800553e:	4613      	movlt	r3, r2
 8005540:	6033      	str	r3, [r6, #0]
 8005542:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005546:	460c      	mov	r4, r1
 8005548:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800554c:	b10a      	cbz	r2, 8005552 <_printf_common+0x26>
 800554e:	3301      	adds	r3, #1
 8005550:	6033      	str	r3, [r6, #0]
 8005552:	6823      	ldr	r3, [r4, #0]
 8005554:	0699      	lsls	r1, r3, #26
 8005556:	bf42      	ittt	mi
 8005558:	6833      	ldrmi	r3, [r6, #0]
 800555a:	3302      	addmi	r3, #2
 800555c:	6033      	strmi	r3, [r6, #0]
 800555e:	6825      	ldr	r5, [r4, #0]
 8005560:	f015 0506 	ands.w	r5, r5, #6
 8005564:	d106      	bne.n	8005574 <_printf_common+0x48>
 8005566:	f104 0a19 	add.w	sl, r4, #25
 800556a:	68e3      	ldr	r3, [r4, #12]
 800556c:	6832      	ldr	r2, [r6, #0]
 800556e:	1a9b      	subs	r3, r3, r2
 8005570:	42ab      	cmp	r3, r5
 8005572:	dc2b      	bgt.n	80055cc <_printf_common+0xa0>
 8005574:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005578:	1e13      	subs	r3, r2, #0
 800557a:	6822      	ldr	r2, [r4, #0]
 800557c:	bf18      	it	ne
 800557e:	2301      	movne	r3, #1
 8005580:	0692      	lsls	r2, r2, #26
 8005582:	d430      	bmi.n	80055e6 <_printf_common+0xba>
 8005584:	4649      	mov	r1, r9
 8005586:	4638      	mov	r0, r7
 8005588:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800558c:	47c0      	blx	r8
 800558e:	3001      	adds	r0, #1
 8005590:	d023      	beq.n	80055da <_printf_common+0xae>
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	6922      	ldr	r2, [r4, #16]
 8005596:	f003 0306 	and.w	r3, r3, #6
 800559a:	2b04      	cmp	r3, #4
 800559c:	bf14      	ite	ne
 800559e:	2500      	movne	r5, #0
 80055a0:	6833      	ldreq	r3, [r6, #0]
 80055a2:	f04f 0600 	mov.w	r6, #0
 80055a6:	bf08      	it	eq
 80055a8:	68e5      	ldreq	r5, [r4, #12]
 80055aa:	f104 041a 	add.w	r4, r4, #26
 80055ae:	bf08      	it	eq
 80055b0:	1aed      	subeq	r5, r5, r3
 80055b2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80055b6:	bf08      	it	eq
 80055b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055bc:	4293      	cmp	r3, r2
 80055be:	bfc4      	itt	gt
 80055c0:	1a9b      	subgt	r3, r3, r2
 80055c2:	18ed      	addgt	r5, r5, r3
 80055c4:	42b5      	cmp	r5, r6
 80055c6:	d11a      	bne.n	80055fe <_printf_common+0xd2>
 80055c8:	2000      	movs	r0, #0
 80055ca:	e008      	b.n	80055de <_printf_common+0xb2>
 80055cc:	2301      	movs	r3, #1
 80055ce:	4652      	mov	r2, sl
 80055d0:	4649      	mov	r1, r9
 80055d2:	4638      	mov	r0, r7
 80055d4:	47c0      	blx	r8
 80055d6:	3001      	adds	r0, #1
 80055d8:	d103      	bne.n	80055e2 <_printf_common+0xb6>
 80055da:	f04f 30ff 	mov.w	r0, #4294967295
 80055de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e2:	3501      	adds	r5, #1
 80055e4:	e7c1      	b.n	800556a <_printf_common+0x3e>
 80055e6:	2030      	movs	r0, #48	; 0x30
 80055e8:	18e1      	adds	r1, r4, r3
 80055ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055f4:	4422      	add	r2, r4
 80055f6:	3302      	adds	r3, #2
 80055f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055fc:	e7c2      	b.n	8005584 <_printf_common+0x58>
 80055fe:	2301      	movs	r3, #1
 8005600:	4622      	mov	r2, r4
 8005602:	4649      	mov	r1, r9
 8005604:	4638      	mov	r0, r7
 8005606:	47c0      	blx	r8
 8005608:	3001      	adds	r0, #1
 800560a:	d0e6      	beq.n	80055da <_printf_common+0xae>
 800560c:	3601      	adds	r6, #1
 800560e:	e7d9      	b.n	80055c4 <_printf_common+0x98>

08005610 <_printf_i>:
 8005610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005614:	7e0f      	ldrb	r7, [r1, #24]
 8005616:	4691      	mov	r9, r2
 8005618:	2f78      	cmp	r7, #120	; 0x78
 800561a:	4680      	mov	r8, r0
 800561c:	460c      	mov	r4, r1
 800561e:	469a      	mov	sl, r3
 8005620:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005622:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005626:	d807      	bhi.n	8005638 <_printf_i+0x28>
 8005628:	2f62      	cmp	r7, #98	; 0x62
 800562a:	d80a      	bhi.n	8005642 <_printf_i+0x32>
 800562c:	2f00      	cmp	r7, #0
 800562e:	f000 80d5 	beq.w	80057dc <_printf_i+0x1cc>
 8005632:	2f58      	cmp	r7, #88	; 0x58
 8005634:	f000 80c1 	beq.w	80057ba <_printf_i+0x1aa>
 8005638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800563c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005640:	e03a      	b.n	80056b8 <_printf_i+0xa8>
 8005642:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005646:	2b15      	cmp	r3, #21
 8005648:	d8f6      	bhi.n	8005638 <_printf_i+0x28>
 800564a:	a101      	add	r1, pc, #4	; (adr r1, 8005650 <_printf_i+0x40>)
 800564c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005650:	080056a9 	.word	0x080056a9
 8005654:	080056bd 	.word	0x080056bd
 8005658:	08005639 	.word	0x08005639
 800565c:	08005639 	.word	0x08005639
 8005660:	08005639 	.word	0x08005639
 8005664:	08005639 	.word	0x08005639
 8005668:	080056bd 	.word	0x080056bd
 800566c:	08005639 	.word	0x08005639
 8005670:	08005639 	.word	0x08005639
 8005674:	08005639 	.word	0x08005639
 8005678:	08005639 	.word	0x08005639
 800567c:	080057c3 	.word	0x080057c3
 8005680:	080056e9 	.word	0x080056e9
 8005684:	0800577d 	.word	0x0800577d
 8005688:	08005639 	.word	0x08005639
 800568c:	08005639 	.word	0x08005639
 8005690:	080057e5 	.word	0x080057e5
 8005694:	08005639 	.word	0x08005639
 8005698:	080056e9 	.word	0x080056e9
 800569c:	08005639 	.word	0x08005639
 80056a0:	08005639 	.word	0x08005639
 80056a4:	08005785 	.word	0x08005785
 80056a8:	682b      	ldr	r3, [r5, #0]
 80056aa:	1d1a      	adds	r2, r3, #4
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	602a      	str	r2, [r5, #0]
 80056b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056b8:	2301      	movs	r3, #1
 80056ba:	e0a0      	b.n	80057fe <_printf_i+0x1ee>
 80056bc:	6820      	ldr	r0, [r4, #0]
 80056be:	682b      	ldr	r3, [r5, #0]
 80056c0:	0607      	lsls	r7, r0, #24
 80056c2:	f103 0104 	add.w	r1, r3, #4
 80056c6:	6029      	str	r1, [r5, #0]
 80056c8:	d501      	bpl.n	80056ce <_printf_i+0xbe>
 80056ca:	681e      	ldr	r6, [r3, #0]
 80056cc:	e003      	b.n	80056d6 <_printf_i+0xc6>
 80056ce:	0646      	lsls	r6, r0, #25
 80056d0:	d5fb      	bpl.n	80056ca <_printf_i+0xba>
 80056d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80056d6:	2e00      	cmp	r6, #0
 80056d8:	da03      	bge.n	80056e2 <_printf_i+0xd2>
 80056da:	232d      	movs	r3, #45	; 0x2d
 80056dc:	4276      	negs	r6, r6
 80056de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056e2:	230a      	movs	r3, #10
 80056e4:	4859      	ldr	r0, [pc, #356]	; (800584c <_printf_i+0x23c>)
 80056e6:	e012      	b.n	800570e <_printf_i+0xfe>
 80056e8:	682b      	ldr	r3, [r5, #0]
 80056ea:	6820      	ldr	r0, [r4, #0]
 80056ec:	1d19      	adds	r1, r3, #4
 80056ee:	6029      	str	r1, [r5, #0]
 80056f0:	0605      	lsls	r5, r0, #24
 80056f2:	d501      	bpl.n	80056f8 <_printf_i+0xe8>
 80056f4:	681e      	ldr	r6, [r3, #0]
 80056f6:	e002      	b.n	80056fe <_printf_i+0xee>
 80056f8:	0641      	lsls	r1, r0, #25
 80056fa:	d5fb      	bpl.n	80056f4 <_printf_i+0xe4>
 80056fc:	881e      	ldrh	r6, [r3, #0]
 80056fe:	2f6f      	cmp	r7, #111	; 0x6f
 8005700:	bf0c      	ite	eq
 8005702:	2308      	moveq	r3, #8
 8005704:	230a      	movne	r3, #10
 8005706:	4851      	ldr	r0, [pc, #324]	; (800584c <_printf_i+0x23c>)
 8005708:	2100      	movs	r1, #0
 800570a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800570e:	6865      	ldr	r5, [r4, #4]
 8005710:	2d00      	cmp	r5, #0
 8005712:	bfa8      	it	ge
 8005714:	6821      	ldrge	r1, [r4, #0]
 8005716:	60a5      	str	r5, [r4, #8]
 8005718:	bfa4      	itt	ge
 800571a:	f021 0104 	bicge.w	r1, r1, #4
 800571e:	6021      	strge	r1, [r4, #0]
 8005720:	b90e      	cbnz	r6, 8005726 <_printf_i+0x116>
 8005722:	2d00      	cmp	r5, #0
 8005724:	d04b      	beq.n	80057be <_printf_i+0x1ae>
 8005726:	4615      	mov	r5, r2
 8005728:	fbb6 f1f3 	udiv	r1, r6, r3
 800572c:	fb03 6711 	mls	r7, r3, r1, r6
 8005730:	5dc7      	ldrb	r7, [r0, r7]
 8005732:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005736:	4637      	mov	r7, r6
 8005738:	42bb      	cmp	r3, r7
 800573a:	460e      	mov	r6, r1
 800573c:	d9f4      	bls.n	8005728 <_printf_i+0x118>
 800573e:	2b08      	cmp	r3, #8
 8005740:	d10b      	bne.n	800575a <_printf_i+0x14a>
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	07de      	lsls	r6, r3, #31
 8005746:	d508      	bpl.n	800575a <_printf_i+0x14a>
 8005748:	6923      	ldr	r3, [r4, #16]
 800574a:	6861      	ldr	r1, [r4, #4]
 800574c:	4299      	cmp	r1, r3
 800574e:	bfde      	ittt	le
 8005750:	2330      	movle	r3, #48	; 0x30
 8005752:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005756:	f105 35ff 	addle.w	r5, r5, #4294967295
 800575a:	1b52      	subs	r2, r2, r5
 800575c:	6122      	str	r2, [r4, #16]
 800575e:	464b      	mov	r3, r9
 8005760:	4621      	mov	r1, r4
 8005762:	4640      	mov	r0, r8
 8005764:	f8cd a000 	str.w	sl, [sp]
 8005768:	aa03      	add	r2, sp, #12
 800576a:	f7ff fedf 	bl	800552c <_printf_common>
 800576e:	3001      	adds	r0, #1
 8005770:	d14a      	bne.n	8005808 <_printf_i+0x1f8>
 8005772:	f04f 30ff 	mov.w	r0, #4294967295
 8005776:	b004      	add	sp, #16
 8005778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	f043 0320 	orr.w	r3, r3, #32
 8005782:	6023      	str	r3, [r4, #0]
 8005784:	2778      	movs	r7, #120	; 0x78
 8005786:	4832      	ldr	r0, [pc, #200]	; (8005850 <_printf_i+0x240>)
 8005788:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	6829      	ldr	r1, [r5, #0]
 8005790:	061f      	lsls	r7, r3, #24
 8005792:	f851 6b04 	ldr.w	r6, [r1], #4
 8005796:	d402      	bmi.n	800579e <_printf_i+0x18e>
 8005798:	065f      	lsls	r7, r3, #25
 800579a:	bf48      	it	mi
 800579c:	b2b6      	uxthmi	r6, r6
 800579e:	07df      	lsls	r7, r3, #31
 80057a0:	bf48      	it	mi
 80057a2:	f043 0320 	orrmi.w	r3, r3, #32
 80057a6:	6029      	str	r1, [r5, #0]
 80057a8:	bf48      	it	mi
 80057aa:	6023      	strmi	r3, [r4, #0]
 80057ac:	b91e      	cbnz	r6, 80057b6 <_printf_i+0x1a6>
 80057ae:	6823      	ldr	r3, [r4, #0]
 80057b0:	f023 0320 	bic.w	r3, r3, #32
 80057b4:	6023      	str	r3, [r4, #0]
 80057b6:	2310      	movs	r3, #16
 80057b8:	e7a6      	b.n	8005708 <_printf_i+0xf8>
 80057ba:	4824      	ldr	r0, [pc, #144]	; (800584c <_printf_i+0x23c>)
 80057bc:	e7e4      	b.n	8005788 <_printf_i+0x178>
 80057be:	4615      	mov	r5, r2
 80057c0:	e7bd      	b.n	800573e <_printf_i+0x12e>
 80057c2:	682b      	ldr	r3, [r5, #0]
 80057c4:	6826      	ldr	r6, [r4, #0]
 80057c6:	1d18      	adds	r0, r3, #4
 80057c8:	6961      	ldr	r1, [r4, #20]
 80057ca:	6028      	str	r0, [r5, #0]
 80057cc:	0635      	lsls	r5, r6, #24
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	d501      	bpl.n	80057d6 <_printf_i+0x1c6>
 80057d2:	6019      	str	r1, [r3, #0]
 80057d4:	e002      	b.n	80057dc <_printf_i+0x1cc>
 80057d6:	0670      	lsls	r0, r6, #25
 80057d8:	d5fb      	bpl.n	80057d2 <_printf_i+0x1c2>
 80057da:	8019      	strh	r1, [r3, #0]
 80057dc:	2300      	movs	r3, #0
 80057de:	4615      	mov	r5, r2
 80057e0:	6123      	str	r3, [r4, #16]
 80057e2:	e7bc      	b.n	800575e <_printf_i+0x14e>
 80057e4:	682b      	ldr	r3, [r5, #0]
 80057e6:	2100      	movs	r1, #0
 80057e8:	1d1a      	adds	r2, r3, #4
 80057ea:	602a      	str	r2, [r5, #0]
 80057ec:	681d      	ldr	r5, [r3, #0]
 80057ee:	6862      	ldr	r2, [r4, #4]
 80057f0:	4628      	mov	r0, r5
 80057f2:	f000 fc42 	bl	800607a <memchr>
 80057f6:	b108      	cbz	r0, 80057fc <_printf_i+0x1ec>
 80057f8:	1b40      	subs	r0, r0, r5
 80057fa:	6060      	str	r0, [r4, #4]
 80057fc:	6863      	ldr	r3, [r4, #4]
 80057fe:	6123      	str	r3, [r4, #16]
 8005800:	2300      	movs	r3, #0
 8005802:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005806:	e7aa      	b.n	800575e <_printf_i+0x14e>
 8005808:	462a      	mov	r2, r5
 800580a:	4649      	mov	r1, r9
 800580c:	4640      	mov	r0, r8
 800580e:	6923      	ldr	r3, [r4, #16]
 8005810:	47d0      	blx	sl
 8005812:	3001      	adds	r0, #1
 8005814:	d0ad      	beq.n	8005772 <_printf_i+0x162>
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	079b      	lsls	r3, r3, #30
 800581a:	d413      	bmi.n	8005844 <_printf_i+0x234>
 800581c:	68e0      	ldr	r0, [r4, #12]
 800581e:	9b03      	ldr	r3, [sp, #12]
 8005820:	4298      	cmp	r0, r3
 8005822:	bfb8      	it	lt
 8005824:	4618      	movlt	r0, r3
 8005826:	e7a6      	b.n	8005776 <_printf_i+0x166>
 8005828:	2301      	movs	r3, #1
 800582a:	4632      	mov	r2, r6
 800582c:	4649      	mov	r1, r9
 800582e:	4640      	mov	r0, r8
 8005830:	47d0      	blx	sl
 8005832:	3001      	adds	r0, #1
 8005834:	d09d      	beq.n	8005772 <_printf_i+0x162>
 8005836:	3501      	adds	r5, #1
 8005838:	68e3      	ldr	r3, [r4, #12]
 800583a:	9903      	ldr	r1, [sp, #12]
 800583c:	1a5b      	subs	r3, r3, r1
 800583e:	42ab      	cmp	r3, r5
 8005840:	dcf2      	bgt.n	8005828 <_printf_i+0x218>
 8005842:	e7eb      	b.n	800581c <_printf_i+0x20c>
 8005844:	2500      	movs	r5, #0
 8005846:	f104 0619 	add.w	r6, r4, #25
 800584a:	e7f5      	b.n	8005838 <_printf_i+0x228>
 800584c:	0800a04e 	.word	0x0800a04e
 8005850:	0800a05f 	.word	0x0800a05f

08005854 <_scanf_float>:
 8005854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005858:	b087      	sub	sp, #28
 800585a:	9303      	str	r3, [sp, #12]
 800585c:	688b      	ldr	r3, [r1, #8]
 800585e:	4617      	mov	r7, r2
 8005860:	1e5a      	subs	r2, r3, #1
 8005862:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005866:	bf85      	ittet	hi
 8005868:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800586c:	195b      	addhi	r3, r3, r5
 800586e:	2300      	movls	r3, #0
 8005870:	9302      	strhi	r3, [sp, #8]
 8005872:	bf88      	it	hi
 8005874:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005878:	468b      	mov	fp, r1
 800587a:	f04f 0500 	mov.w	r5, #0
 800587e:	bf8c      	ite	hi
 8005880:	608b      	strhi	r3, [r1, #8]
 8005882:	9302      	strls	r3, [sp, #8]
 8005884:	680b      	ldr	r3, [r1, #0]
 8005886:	4680      	mov	r8, r0
 8005888:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800588c:	f84b 3b1c 	str.w	r3, [fp], #28
 8005890:	460c      	mov	r4, r1
 8005892:	465e      	mov	r6, fp
 8005894:	46aa      	mov	sl, r5
 8005896:	46a9      	mov	r9, r5
 8005898:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800589c:	9501      	str	r5, [sp, #4]
 800589e:	68a2      	ldr	r2, [r4, #8]
 80058a0:	b152      	cbz	r2, 80058b8 <_scanf_float+0x64>
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	2b4e      	cmp	r3, #78	; 0x4e
 80058a8:	d864      	bhi.n	8005974 <_scanf_float+0x120>
 80058aa:	2b40      	cmp	r3, #64	; 0x40
 80058ac:	d83c      	bhi.n	8005928 <_scanf_float+0xd4>
 80058ae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80058b2:	b2c8      	uxtb	r0, r1
 80058b4:	280e      	cmp	r0, #14
 80058b6:	d93a      	bls.n	800592e <_scanf_float+0xda>
 80058b8:	f1b9 0f00 	cmp.w	r9, #0
 80058bc:	d003      	beq.n	80058c6 <_scanf_float+0x72>
 80058be:	6823      	ldr	r3, [r4, #0]
 80058c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058c4:	6023      	str	r3, [r4, #0]
 80058c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058ca:	f1ba 0f01 	cmp.w	sl, #1
 80058ce:	f200 8113 	bhi.w	8005af8 <_scanf_float+0x2a4>
 80058d2:	455e      	cmp	r6, fp
 80058d4:	f200 8105 	bhi.w	8005ae2 <_scanf_float+0x28e>
 80058d8:	2501      	movs	r5, #1
 80058da:	4628      	mov	r0, r5
 80058dc:	b007      	add	sp, #28
 80058de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058e2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80058e6:	2a0d      	cmp	r2, #13
 80058e8:	d8e6      	bhi.n	80058b8 <_scanf_float+0x64>
 80058ea:	a101      	add	r1, pc, #4	; (adr r1, 80058f0 <_scanf_float+0x9c>)
 80058ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80058f0:	08005a2f 	.word	0x08005a2f
 80058f4:	080058b9 	.word	0x080058b9
 80058f8:	080058b9 	.word	0x080058b9
 80058fc:	080058b9 	.word	0x080058b9
 8005900:	08005a8f 	.word	0x08005a8f
 8005904:	08005a67 	.word	0x08005a67
 8005908:	080058b9 	.word	0x080058b9
 800590c:	080058b9 	.word	0x080058b9
 8005910:	08005a3d 	.word	0x08005a3d
 8005914:	080058b9 	.word	0x080058b9
 8005918:	080058b9 	.word	0x080058b9
 800591c:	080058b9 	.word	0x080058b9
 8005920:	080058b9 	.word	0x080058b9
 8005924:	080059f5 	.word	0x080059f5
 8005928:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800592c:	e7db      	b.n	80058e6 <_scanf_float+0x92>
 800592e:	290e      	cmp	r1, #14
 8005930:	d8c2      	bhi.n	80058b8 <_scanf_float+0x64>
 8005932:	a001      	add	r0, pc, #4	; (adr r0, 8005938 <_scanf_float+0xe4>)
 8005934:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005938:	080059e7 	.word	0x080059e7
 800593c:	080058b9 	.word	0x080058b9
 8005940:	080059e7 	.word	0x080059e7
 8005944:	08005a7b 	.word	0x08005a7b
 8005948:	080058b9 	.word	0x080058b9
 800594c:	08005995 	.word	0x08005995
 8005950:	080059d1 	.word	0x080059d1
 8005954:	080059d1 	.word	0x080059d1
 8005958:	080059d1 	.word	0x080059d1
 800595c:	080059d1 	.word	0x080059d1
 8005960:	080059d1 	.word	0x080059d1
 8005964:	080059d1 	.word	0x080059d1
 8005968:	080059d1 	.word	0x080059d1
 800596c:	080059d1 	.word	0x080059d1
 8005970:	080059d1 	.word	0x080059d1
 8005974:	2b6e      	cmp	r3, #110	; 0x6e
 8005976:	d809      	bhi.n	800598c <_scanf_float+0x138>
 8005978:	2b60      	cmp	r3, #96	; 0x60
 800597a:	d8b2      	bhi.n	80058e2 <_scanf_float+0x8e>
 800597c:	2b54      	cmp	r3, #84	; 0x54
 800597e:	d077      	beq.n	8005a70 <_scanf_float+0x21c>
 8005980:	2b59      	cmp	r3, #89	; 0x59
 8005982:	d199      	bne.n	80058b8 <_scanf_float+0x64>
 8005984:	2d07      	cmp	r5, #7
 8005986:	d197      	bne.n	80058b8 <_scanf_float+0x64>
 8005988:	2508      	movs	r5, #8
 800598a:	e029      	b.n	80059e0 <_scanf_float+0x18c>
 800598c:	2b74      	cmp	r3, #116	; 0x74
 800598e:	d06f      	beq.n	8005a70 <_scanf_float+0x21c>
 8005990:	2b79      	cmp	r3, #121	; 0x79
 8005992:	e7f6      	b.n	8005982 <_scanf_float+0x12e>
 8005994:	6821      	ldr	r1, [r4, #0]
 8005996:	05c8      	lsls	r0, r1, #23
 8005998:	d51a      	bpl.n	80059d0 <_scanf_float+0x17c>
 800599a:	9b02      	ldr	r3, [sp, #8]
 800599c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80059a0:	6021      	str	r1, [r4, #0]
 80059a2:	f109 0901 	add.w	r9, r9, #1
 80059a6:	b11b      	cbz	r3, 80059b0 <_scanf_float+0x15c>
 80059a8:	3b01      	subs	r3, #1
 80059aa:	3201      	adds	r2, #1
 80059ac:	9302      	str	r3, [sp, #8]
 80059ae:	60a2      	str	r2, [r4, #8]
 80059b0:	68a3      	ldr	r3, [r4, #8]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	60a3      	str	r3, [r4, #8]
 80059b6:	6923      	ldr	r3, [r4, #16]
 80059b8:	3301      	adds	r3, #1
 80059ba:	6123      	str	r3, [r4, #16]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3b01      	subs	r3, #1
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	607b      	str	r3, [r7, #4]
 80059c4:	f340 8084 	ble.w	8005ad0 <_scanf_float+0x27c>
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	3301      	adds	r3, #1
 80059cc:	603b      	str	r3, [r7, #0]
 80059ce:	e766      	b.n	800589e <_scanf_float+0x4a>
 80059d0:	eb1a 0f05 	cmn.w	sl, r5
 80059d4:	f47f af70 	bne.w	80058b8 <_scanf_float+0x64>
 80059d8:	6822      	ldr	r2, [r4, #0]
 80059da:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80059de:	6022      	str	r2, [r4, #0]
 80059e0:	f806 3b01 	strb.w	r3, [r6], #1
 80059e4:	e7e4      	b.n	80059b0 <_scanf_float+0x15c>
 80059e6:	6822      	ldr	r2, [r4, #0]
 80059e8:	0610      	lsls	r0, r2, #24
 80059ea:	f57f af65 	bpl.w	80058b8 <_scanf_float+0x64>
 80059ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059f2:	e7f4      	b.n	80059de <_scanf_float+0x18a>
 80059f4:	f1ba 0f00 	cmp.w	sl, #0
 80059f8:	d10e      	bne.n	8005a18 <_scanf_float+0x1c4>
 80059fa:	f1b9 0f00 	cmp.w	r9, #0
 80059fe:	d10e      	bne.n	8005a1e <_scanf_float+0x1ca>
 8005a00:	6822      	ldr	r2, [r4, #0]
 8005a02:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005a06:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005a0a:	d108      	bne.n	8005a1e <_scanf_float+0x1ca>
 8005a0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005a10:	f04f 0a01 	mov.w	sl, #1
 8005a14:	6022      	str	r2, [r4, #0]
 8005a16:	e7e3      	b.n	80059e0 <_scanf_float+0x18c>
 8005a18:	f1ba 0f02 	cmp.w	sl, #2
 8005a1c:	d055      	beq.n	8005aca <_scanf_float+0x276>
 8005a1e:	2d01      	cmp	r5, #1
 8005a20:	d002      	beq.n	8005a28 <_scanf_float+0x1d4>
 8005a22:	2d04      	cmp	r5, #4
 8005a24:	f47f af48 	bne.w	80058b8 <_scanf_float+0x64>
 8005a28:	3501      	adds	r5, #1
 8005a2a:	b2ed      	uxtb	r5, r5
 8005a2c:	e7d8      	b.n	80059e0 <_scanf_float+0x18c>
 8005a2e:	f1ba 0f01 	cmp.w	sl, #1
 8005a32:	f47f af41 	bne.w	80058b8 <_scanf_float+0x64>
 8005a36:	f04f 0a02 	mov.w	sl, #2
 8005a3a:	e7d1      	b.n	80059e0 <_scanf_float+0x18c>
 8005a3c:	b97d      	cbnz	r5, 8005a5e <_scanf_float+0x20a>
 8005a3e:	f1b9 0f00 	cmp.w	r9, #0
 8005a42:	f47f af3c 	bne.w	80058be <_scanf_float+0x6a>
 8005a46:	6822      	ldr	r2, [r4, #0]
 8005a48:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005a4c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005a50:	f47f af39 	bne.w	80058c6 <_scanf_float+0x72>
 8005a54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005a58:	2501      	movs	r5, #1
 8005a5a:	6022      	str	r2, [r4, #0]
 8005a5c:	e7c0      	b.n	80059e0 <_scanf_float+0x18c>
 8005a5e:	2d03      	cmp	r5, #3
 8005a60:	d0e2      	beq.n	8005a28 <_scanf_float+0x1d4>
 8005a62:	2d05      	cmp	r5, #5
 8005a64:	e7de      	b.n	8005a24 <_scanf_float+0x1d0>
 8005a66:	2d02      	cmp	r5, #2
 8005a68:	f47f af26 	bne.w	80058b8 <_scanf_float+0x64>
 8005a6c:	2503      	movs	r5, #3
 8005a6e:	e7b7      	b.n	80059e0 <_scanf_float+0x18c>
 8005a70:	2d06      	cmp	r5, #6
 8005a72:	f47f af21 	bne.w	80058b8 <_scanf_float+0x64>
 8005a76:	2507      	movs	r5, #7
 8005a78:	e7b2      	b.n	80059e0 <_scanf_float+0x18c>
 8005a7a:	6822      	ldr	r2, [r4, #0]
 8005a7c:	0591      	lsls	r1, r2, #22
 8005a7e:	f57f af1b 	bpl.w	80058b8 <_scanf_float+0x64>
 8005a82:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005a86:	6022      	str	r2, [r4, #0]
 8005a88:	f8cd 9004 	str.w	r9, [sp, #4]
 8005a8c:	e7a8      	b.n	80059e0 <_scanf_float+0x18c>
 8005a8e:	6822      	ldr	r2, [r4, #0]
 8005a90:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005a94:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005a98:	d006      	beq.n	8005aa8 <_scanf_float+0x254>
 8005a9a:	0550      	lsls	r0, r2, #21
 8005a9c:	f57f af0c 	bpl.w	80058b8 <_scanf_float+0x64>
 8005aa0:	f1b9 0f00 	cmp.w	r9, #0
 8005aa4:	f43f af0f 	beq.w	80058c6 <_scanf_float+0x72>
 8005aa8:	0591      	lsls	r1, r2, #22
 8005aaa:	bf58      	it	pl
 8005aac:	9901      	ldrpl	r1, [sp, #4]
 8005aae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005ab2:	bf58      	it	pl
 8005ab4:	eba9 0101 	subpl.w	r1, r9, r1
 8005ab8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005abc:	f04f 0900 	mov.w	r9, #0
 8005ac0:	bf58      	it	pl
 8005ac2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005ac6:	6022      	str	r2, [r4, #0]
 8005ac8:	e78a      	b.n	80059e0 <_scanf_float+0x18c>
 8005aca:	f04f 0a03 	mov.w	sl, #3
 8005ace:	e787      	b.n	80059e0 <_scanf_float+0x18c>
 8005ad0:	4639      	mov	r1, r7
 8005ad2:	4640      	mov	r0, r8
 8005ad4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005ad8:	4798      	blx	r3
 8005ada:	2800      	cmp	r0, #0
 8005adc:	f43f aedf 	beq.w	800589e <_scanf_float+0x4a>
 8005ae0:	e6ea      	b.n	80058b8 <_scanf_float+0x64>
 8005ae2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ae6:	463a      	mov	r2, r7
 8005ae8:	4640      	mov	r0, r8
 8005aea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005aee:	4798      	blx	r3
 8005af0:	6923      	ldr	r3, [r4, #16]
 8005af2:	3b01      	subs	r3, #1
 8005af4:	6123      	str	r3, [r4, #16]
 8005af6:	e6ec      	b.n	80058d2 <_scanf_float+0x7e>
 8005af8:	1e6b      	subs	r3, r5, #1
 8005afa:	2b06      	cmp	r3, #6
 8005afc:	d825      	bhi.n	8005b4a <_scanf_float+0x2f6>
 8005afe:	2d02      	cmp	r5, #2
 8005b00:	d836      	bhi.n	8005b70 <_scanf_float+0x31c>
 8005b02:	455e      	cmp	r6, fp
 8005b04:	f67f aee8 	bls.w	80058d8 <_scanf_float+0x84>
 8005b08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b0c:	463a      	mov	r2, r7
 8005b0e:	4640      	mov	r0, r8
 8005b10:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b14:	4798      	blx	r3
 8005b16:	6923      	ldr	r3, [r4, #16]
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	6123      	str	r3, [r4, #16]
 8005b1c:	e7f1      	b.n	8005b02 <_scanf_float+0x2ae>
 8005b1e:	9802      	ldr	r0, [sp, #8]
 8005b20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b24:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005b28:	463a      	mov	r2, r7
 8005b2a:	9002      	str	r0, [sp, #8]
 8005b2c:	4640      	mov	r0, r8
 8005b2e:	4798      	blx	r3
 8005b30:	6923      	ldr	r3, [r4, #16]
 8005b32:	3b01      	subs	r3, #1
 8005b34:	6123      	str	r3, [r4, #16]
 8005b36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b3a:	fa5f fa8a 	uxtb.w	sl, sl
 8005b3e:	f1ba 0f02 	cmp.w	sl, #2
 8005b42:	d1ec      	bne.n	8005b1e <_scanf_float+0x2ca>
 8005b44:	3d03      	subs	r5, #3
 8005b46:	b2ed      	uxtb	r5, r5
 8005b48:	1b76      	subs	r6, r6, r5
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	05da      	lsls	r2, r3, #23
 8005b4e:	d52f      	bpl.n	8005bb0 <_scanf_float+0x35c>
 8005b50:	055b      	lsls	r3, r3, #21
 8005b52:	d510      	bpl.n	8005b76 <_scanf_float+0x322>
 8005b54:	455e      	cmp	r6, fp
 8005b56:	f67f aebf 	bls.w	80058d8 <_scanf_float+0x84>
 8005b5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b5e:	463a      	mov	r2, r7
 8005b60:	4640      	mov	r0, r8
 8005b62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b66:	4798      	blx	r3
 8005b68:	6923      	ldr	r3, [r4, #16]
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	6123      	str	r3, [r4, #16]
 8005b6e:	e7f1      	b.n	8005b54 <_scanf_float+0x300>
 8005b70:	46aa      	mov	sl, r5
 8005b72:	9602      	str	r6, [sp, #8]
 8005b74:	e7df      	b.n	8005b36 <_scanf_float+0x2e2>
 8005b76:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005b7a:	6923      	ldr	r3, [r4, #16]
 8005b7c:	2965      	cmp	r1, #101	; 0x65
 8005b7e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005b82:	f106 35ff 	add.w	r5, r6, #4294967295
 8005b86:	6123      	str	r3, [r4, #16]
 8005b88:	d00c      	beq.n	8005ba4 <_scanf_float+0x350>
 8005b8a:	2945      	cmp	r1, #69	; 0x45
 8005b8c:	d00a      	beq.n	8005ba4 <_scanf_float+0x350>
 8005b8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b92:	463a      	mov	r2, r7
 8005b94:	4640      	mov	r0, r8
 8005b96:	4798      	blx	r3
 8005b98:	6923      	ldr	r3, [r4, #16]
 8005b9a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	1eb5      	subs	r5, r6, #2
 8005ba2:	6123      	str	r3, [r4, #16]
 8005ba4:	463a      	mov	r2, r7
 8005ba6:	4640      	mov	r0, r8
 8005ba8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005bac:	4798      	blx	r3
 8005bae:	462e      	mov	r6, r5
 8005bb0:	6825      	ldr	r5, [r4, #0]
 8005bb2:	f015 0510 	ands.w	r5, r5, #16
 8005bb6:	d155      	bne.n	8005c64 <_scanf_float+0x410>
 8005bb8:	7035      	strb	r5, [r6, #0]
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bc4:	d11d      	bne.n	8005c02 <_scanf_float+0x3ae>
 8005bc6:	9b01      	ldr	r3, [sp, #4]
 8005bc8:	454b      	cmp	r3, r9
 8005bca:	eba3 0209 	sub.w	r2, r3, r9
 8005bce:	d125      	bne.n	8005c1c <_scanf_float+0x3c8>
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	4659      	mov	r1, fp
 8005bd4:	4640      	mov	r0, r8
 8005bd6:	f002 fc83 	bl	80084e0 <_strtod_r>
 8005bda:	9b03      	ldr	r3, [sp, #12]
 8005bdc:	f8d4 c000 	ldr.w	ip, [r4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f01c 0f02 	tst.w	ip, #2
 8005be6:	4606      	mov	r6, r0
 8005be8:	460f      	mov	r7, r1
 8005bea:	f103 0204 	add.w	r2, r3, #4
 8005bee:	d020      	beq.n	8005c32 <_scanf_float+0x3de>
 8005bf0:	9903      	ldr	r1, [sp, #12]
 8005bf2:	600a      	str	r2, [r1, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	e9c3 6700 	strd	r6, r7, [r3]
 8005bfa:	68e3      	ldr	r3, [r4, #12]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	60e3      	str	r3, [r4, #12]
 8005c00:	e66b      	b.n	80058da <_scanf_float+0x86>
 8005c02:	9b04      	ldr	r3, [sp, #16]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0e3      	beq.n	8005bd0 <_scanf_float+0x37c>
 8005c08:	9905      	ldr	r1, [sp, #20]
 8005c0a:	230a      	movs	r3, #10
 8005c0c:	462a      	mov	r2, r5
 8005c0e:	4640      	mov	r0, r8
 8005c10:	3101      	adds	r1, #1
 8005c12:	f002 fce9 	bl	80085e8 <_strtol_r>
 8005c16:	9b04      	ldr	r3, [sp, #16]
 8005c18:	9e05      	ldr	r6, [sp, #20]
 8005c1a:	1ac2      	subs	r2, r0, r3
 8005c1c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005c20:	429e      	cmp	r6, r3
 8005c22:	bf28      	it	cs
 8005c24:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005c28:	4630      	mov	r0, r6
 8005c2a:	490f      	ldr	r1, [pc, #60]	; (8005c68 <_scanf_float+0x414>)
 8005c2c:	f000 f916 	bl	8005e5c <siprintf>
 8005c30:	e7ce      	b.n	8005bd0 <_scanf_float+0x37c>
 8005c32:	f01c 0f04 	tst.w	ip, #4
 8005c36:	d1db      	bne.n	8005bf0 <_scanf_float+0x39c>
 8005c38:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005c3c:	f8cc 2000 	str.w	r2, [ip]
 8005c40:	f8d3 8000 	ldr.w	r8, [r3]
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	f7fa fee0 	bl	8000a0c <__aeabi_dcmpun>
 8005c4c:	b128      	cbz	r0, 8005c5a <_scanf_float+0x406>
 8005c4e:	4807      	ldr	r0, [pc, #28]	; (8005c6c <_scanf_float+0x418>)
 8005c50:	f000 fa22 	bl	8006098 <nanf>
 8005c54:	f8c8 0000 	str.w	r0, [r8]
 8005c58:	e7cf      	b.n	8005bfa <_scanf_float+0x3a6>
 8005c5a:	4630      	mov	r0, r6
 8005c5c:	4639      	mov	r1, r7
 8005c5e:	f7fa ff33 	bl	8000ac8 <__aeabi_d2f>
 8005c62:	e7f7      	b.n	8005c54 <_scanf_float+0x400>
 8005c64:	2500      	movs	r5, #0
 8005c66:	e638      	b.n	80058da <_scanf_float+0x86>
 8005c68:	0800a070 	.word	0x0800a070
 8005c6c:	0800a420 	.word	0x0800a420

08005c70 <std>:
 8005c70:	2300      	movs	r3, #0
 8005c72:	b510      	push	{r4, lr}
 8005c74:	4604      	mov	r4, r0
 8005c76:	e9c0 3300 	strd	r3, r3, [r0]
 8005c7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c7e:	6083      	str	r3, [r0, #8]
 8005c80:	8181      	strh	r1, [r0, #12]
 8005c82:	6643      	str	r3, [r0, #100]	; 0x64
 8005c84:	81c2      	strh	r2, [r0, #14]
 8005c86:	6183      	str	r3, [r0, #24]
 8005c88:	4619      	mov	r1, r3
 8005c8a:	2208      	movs	r2, #8
 8005c8c:	305c      	adds	r0, #92	; 0x5c
 8005c8e:	f000 f974 	bl	8005f7a <memset>
 8005c92:	4b0d      	ldr	r3, [pc, #52]	; (8005cc8 <std+0x58>)
 8005c94:	6224      	str	r4, [r4, #32]
 8005c96:	6263      	str	r3, [r4, #36]	; 0x24
 8005c98:	4b0c      	ldr	r3, [pc, #48]	; (8005ccc <std+0x5c>)
 8005c9a:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c9c:	4b0c      	ldr	r3, [pc, #48]	; (8005cd0 <std+0x60>)
 8005c9e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ca0:	4b0c      	ldr	r3, [pc, #48]	; (8005cd4 <std+0x64>)
 8005ca2:	6323      	str	r3, [r4, #48]	; 0x30
 8005ca4:	4b0c      	ldr	r3, [pc, #48]	; (8005cd8 <std+0x68>)
 8005ca6:	429c      	cmp	r4, r3
 8005ca8:	d006      	beq.n	8005cb8 <std+0x48>
 8005caa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005cae:	4294      	cmp	r4, r2
 8005cb0:	d002      	beq.n	8005cb8 <std+0x48>
 8005cb2:	33d0      	adds	r3, #208	; 0xd0
 8005cb4:	429c      	cmp	r4, r3
 8005cb6:	d105      	bne.n	8005cc4 <std+0x54>
 8005cb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cc0:	f000 b9d8 	b.w	8006074 <__retarget_lock_init_recursive>
 8005cc4:	bd10      	pop	{r4, pc}
 8005cc6:	bf00      	nop
 8005cc8:	08005ef1 	.word	0x08005ef1
 8005ccc:	08005f17 	.word	0x08005f17
 8005cd0:	08005f4f 	.word	0x08005f4f
 8005cd4:	08005f73 	.word	0x08005f73
 8005cd8:	20000444 	.word	0x20000444

08005cdc <stdio_exit_handler>:
 8005cdc:	4a02      	ldr	r2, [pc, #8]	; (8005ce8 <stdio_exit_handler+0xc>)
 8005cde:	4903      	ldr	r1, [pc, #12]	; (8005cec <stdio_exit_handler+0x10>)
 8005ce0:	4803      	ldr	r0, [pc, #12]	; (8005cf0 <stdio_exit_handler+0x14>)
 8005ce2:	f000 b869 	b.w	8005db8 <_fwalk_sglue>
 8005ce6:	bf00      	nop
 8005ce8:	20000010 	.word	0x20000010
 8005cec:	08008fdd 	.word	0x08008fdd
 8005cf0:	2000001c 	.word	0x2000001c

08005cf4 <cleanup_stdio>:
 8005cf4:	6841      	ldr	r1, [r0, #4]
 8005cf6:	4b0c      	ldr	r3, [pc, #48]	; (8005d28 <cleanup_stdio+0x34>)
 8005cf8:	b510      	push	{r4, lr}
 8005cfa:	4299      	cmp	r1, r3
 8005cfc:	4604      	mov	r4, r0
 8005cfe:	d001      	beq.n	8005d04 <cleanup_stdio+0x10>
 8005d00:	f003 f96c 	bl	8008fdc <_fflush_r>
 8005d04:	68a1      	ldr	r1, [r4, #8]
 8005d06:	4b09      	ldr	r3, [pc, #36]	; (8005d2c <cleanup_stdio+0x38>)
 8005d08:	4299      	cmp	r1, r3
 8005d0a:	d002      	beq.n	8005d12 <cleanup_stdio+0x1e>
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	f003 f965 	bl	8008fdc <_fflush_r>
 8005d12:	68e1      	ldr	r1, [r4, #12]
 8005d14:	4b06      	ldr	r3, [pc, #24]	; (8005d30 <cleanup_stdio+0x3c>)
 8005d16:	4299      	cmp	r1, r3
 8005d18:	d004      	beq.n	8005d24 <cleanup_stdio+0x30>
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d20:	f003 b95c 	b.w	8008fdc <_fflush_r>
 8005d24:	bd10      	pop	{r4, pc}
 8005d26:	bf00      	nop
 8005d28:	20000444 	.word	0x20000444
 8005d2c:	200004ac 	.word	0x200004ac
 8005d30:	20000514 	.word	0x20000514

08005d34 <global_stdio_init.part.0>:
 8005d34:	b510      	push	{r4, lr}
 8005d36:	4b0b      	ldr	r3, [pc, #44]	; (8005d64 <global_stdio_init.part.0+0x30>)
 8005d38:	4c0b      	ldr	r4, [pc, #44]	; (8005d68 <global_stdio_init.part.0+0x34>)
 8005d3a:	4a0c      	ldr	r2, [pc, #48]	; (8005d6c <global_stdio_init.part.0+0x38>)
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	601a      	str	r2, [r3, #0]
 8005d40:	2104      	movs	r1, #4
 8005d42:	2200      	movs	r2, #0
 8005d44:	f7ff ff94 	bl	8005c70 <std>
 8005d48:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	2109      	movs	r1, #9
 8005d50:	f7ff ff8e 	bl	8005c70 <std>
 8005d54:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005d58:	2202      	movs	r2, #2
 8005d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d5e:	2112      	movs	r1, #18
 8005d60:	f7ff bf86 	b.w	8005c70 <std>
 8005d64:	2000057c 	.word	0x2000057c
 8005d68:	20000444 	.word	0x20000444
 8005d6c:	08005cdd 	.word	0x08005cdd

08005d70 <__sfp_lock_acquire>:
 8005d70:	4801      	ldr	r0, [pc, #4]	; (8005d78 <__sfp_lock_acquire+0x8>)
 8005d72:	f000 b980 	b.w	8006076 <__retarget_lock_acquire_recursive>
 8005d76:	bf00      	nop
 8005d78:	20000585 	.word	0x20000585

08005d7c <__sfp_lock_release>:
 8005d7c:	4801      	ldr	r0, [pc, #4]	; (8005d84 <__sfp_lock_release+0x8>)
 8005d7e:	f000 b97b 	b.w	8006078 <__retarget_lock_release_recursive>
 8005d82:	bf00      	nop
 8005d84:	20000585 	.word	0x20000585

08005d88 <__sinit>:
 8005d88:	b510      	push	{r4, lr}
 8005d8a:	4604      	mov	r4, r0
 8005d8c:	f7ff fff0 	bl	8005d70 <__sfp_lock_acquire>
 8005d90:	6a23      	ldr	r3, [r4, #32]
 8005d92:	b11b      	cbz	r3, 8005d9c <__sinit+0x14>
 8005d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d98:	f7ff bff0 	b.w	8005d7c <__sfp_lock_release>
 8005d9c:	4b04      	ldr	r3, [pc, #16]	; (8005db0 <__sinit+0x28>)
 8005d9e:	6223      	str	r3, [r4, #32]
 8005da0:	4b04      	ldr	r3, [pc, #16]	; (8005db4 <__sinit+0x2c>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1f5      	bne.n	8005d94 <__sinit+0xc>
 8005da8:	f7ff ffc4 	bl	8005d34 <global_stdio_init.part.0>
 8005dac:	e7f2      	b.n	8005d94 <__sinit+0xc>
 8005dae:	bf00      	nop
 8005db0:	08005cf5 	.word	0x08005cf5
 8005db4:	2000057c 	.word	0x2000057c

08005db8 <_fwalk_sglue>:
 8005db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dbc:	4607      	mov	r7, r0
 8005dbe:	4688      	mov	r8, r1
 8005dc0:	4614      	mov	r4, r2
 8005dc2:	2600      	movs	r6, #0
 8005dc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005dc8:	f1b9 0901 	subs.w	r9, r9, #1
 8005dcc:	d505      	bpl.n	8005dda <_fwalk_sglue+0x22>
 8005dce:	6824      	ldr	r4, [r4, #0]
 8005dd0:	2c00      	cmp	r4, #0
 8005dd2:	d1f7      	bne.n	8005dc4 <_fwalk_sglue+0xc>
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dda:	89ab      	ldrh	r3, [r5, #12]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d907      	bls.n	8005df0 <_fwalk_sglue+0x38>
 8005de0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005de4:	3301      	adds	r3, #1
 8005de6:	d003      	beq.n	8005df0 <_fwalk_sglue+0x38>
 8005de8:	4629      	mov	r1, r5
 8005dea:	4638      	mov	r0, r7
 8005dec:	47c0      	blx	r8
 8005dee:	4306      	orrs	r6, r0
 8005df0:	3568      	adds	r5, #104	; 0x68
 8005df2:	e7e9      	b.n	8005dc8 <_fwalk_sglue+0x10>

08005df4 <sniprintf>:
 8005df4:	b40c      	push	{r2, r3}
 8005df6:	b530      	push	{r4, r5, lr}
 8005df8:	4b17      	ldr	r3, [pc, #92]	; (8005e58 <sniprintf+0x64>)
 8005dfa:	1e0c      	subs	r4, r1, #0
 8005dfc:	681d      	ldr	r5, [r3, #0]
 8005dfe:	b09d      	sub	sp, #116	; 0x74
 8005e00:	da08      	bge.n	8005e14 <sniprintf+0x20>
 8005e02:	238b      	movs	r3, #139	; 0x8b
 8005e04:	f04f 30ff 	mov.w	r0, #4294967295
 8005e08:	602b      	str	r3, [r5, #0]
 8005e0a:	b01d      	add	sp, #116	; 0x74
 8005e0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e10:	b002      	add	sp, #8
 8005e12:	4770      	bx	lr
 8005e14:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005e18:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005e1c:	bf0c      	ite	eq
 8005e1e:	4623      	moveq	r3, r4
 8005e20:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005e24:	9304      	str	r3, [sp, #16]
 8005e26:	9307      	str	r3, [sp, #28]
 8005e28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e2c:	9002      	str	r0, [sp, #8]
 8005e2e:	9006      	str	r0, [sp, #24]
 8005e30:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005e34:	4628      	mov	r0, r5
 8005e36:	ab21      	add	r3, sp, #132	; 0x84
 8005e38:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005e3a:	a902      	add	r1, sp, #8
 8005e3c:	9301      	str	r3, [sp, #4]
 8005e3e:	f002 fc2f 	bl	80086a0 <_svfiprintf_r>
 8005e42:	1c43      	adds	r3, r0, #1
 8005e44:	bfbc      	itt	lt
 8005e46:	238b      	movlt	r3, #139	; 0x8b
 8005e48:	602b      	strlt	r3, [r5, #0]
 8005e4a:	2c00      	cmp	r4, #0
 8005e4c:	d0dd      	beq.n	8005e0a <sniprintf+0x16>
 8005e4e:	2200      	movs	r2, #0
 8005e50:	9b02      	ldr	r3, [sp, #8]
 8005e52:	701a      	strb	r2, [r3, #0]
 8005e54:	e7d9      	b.n	8005e0a <sniprintf+0x16>
 8005e56:	bf00      	nop
 8005e58:	20000068 	.word	0x20000068

08005e5c <siprintf>:
 8005e5c:	b40e      	push	{r1, r2, r3}
 8005e5e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e62:	b500      	push	{lr}
 8005e64:	b09c      	sub	sp, #112	; 0x70
 8005e66:	ab1d      	add	r3, sp, #116	; 0x74
 8005e68:	9002      	str	r0, [sp, #8]
 8005e6a:	9006      	str	r0, [sp, #24]
 8005e6c:	9107      	str	r1, [sp, #28]
 8005e6e:	9104      	str	r1, [sp, #16]
 8005e70:	4808      	ldr	r0, [pc, #32]	; (8005e94 <siprintf+0x38>)
 8005e72:	4909      	ldr	r1, [pc, #36]	; (8005e98 <siprintf+0x3c>)
 8005e74:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e78:	9105      	str	r1, [sp, #20]
 8005e7a:	6800      	ldr	r0, [r0, #0]
 8005e7c:	a902      	add	r1, sp, #8
 8005e7e:	9301      	str	r3, [sp, #4]
 8005e80:	f002 fc0e 	bl	80086a0 <_svfiprintf_r>
 8005e84:	2200      	movs	r2, #0
 8005e86:	9b02      	ldr	r3, [sp, #8]
 8005e88:	701a      	strb	r2, [r3, #0]
 8005e8a:	b01c      	add	sp, #112	; 0x70
 8005e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e90:	b003      	add	sp, #12
 8005e92:	4770      	bx	lr
 8005e94:	20000068 	.word	0x20000068
 8005e98:	ffff0208 	.word	0xffff0208

08005e9c <siscanf>:
 8005e9c:	b40e      	push	{r1, r2, r3}
 8005e9e:	f44f 7201 	mov.w	r2, #516	; 0x204
 8005ea2:	b530      	push	{r4, r5, lr}
 8005ea4:	b09c      	sub	sp, #112	; 0x70
 8005ea6:	ac1f      	add	r4, sp, #124	; 0x7c
 8005ea8:	f854 5b04 	ldr.w	r5, [r4], #4
 8005eac:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005eb0:	9002      	str	r0, [sp, #8]
 8005eb2:	9006      	str	r0, [sp, #24]
 8005eb4:	f7fa f94c 	bl	8000150 <strlen>
 8005eb8:	4b0b      	ldr	r3, [pc, #44]	; (8005ee8 <siscanf+0x4c>)
 8005eba:	9003      	str	r0, [sp, #12]
 8005ebc:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ec2:	9314      	str	r3, [sp, #80]	; 0x50
 8005ec4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ec8:	9007      	str	r0, [sp, #28]
 8005eca:	4808      	ldr	r0, [pc, #32]	; (8005eec <siscanf+0x50>)
 8005ecc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005ed0:	462a      	mov	r2, r5
 8005ed2:	4623      	mov	r3, r4
 8005ed4:	a902      	add	r1, sp, #8
 8005ed6:	6800      	ldr	r0, [r0, #0]
 8005ed8:	9401      	str	r4, [sp, #4]
 8005eda:	f002 fd39 	bl	8008950 <__ssvfiscanf_r>
 8005ede:	b01c      	add	sp, #112	; 0x70
 8005ee0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ee4:	b003      	add	sp, #12
 8005ee6:	4770      	bx	lr
 8005ee8:	08005f13 	.word	0x08005f13
 8005eec:	20000068 	.word	0x20000068

08005ef0 <__sread>:
 8005ef0:	b510      	push	{r4, lr}
 8005ef2:	460c      	mov	r4, r1
 8005ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ef8:	f000 f86e 	bl	8005fd8 <_read_r>
 8005efc:	2800      	cmp	r0, #0
 8005efe:	bfab      	itete	ge
 8005f00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f02:	89a3      	ldrhlt	r3, [r4, #12]
 8005f04:	181b      	addge	r3, r3, r0
 8005f06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f0a:	bfac      	ite	ge
 8005f0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f0e:	81a3      	strhlt	r3, [r4, #12]
 8005f10:	bd10      	pop	{r4, pc}

08005f12 <__seofread>:
 8005f12:	2000      	movs	r0, #0
 8005f14:	4770      	bx	lr

08005f16 <__swrite>:
 8005f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f1a:	461f      	mov	r7, r3
 8005f1c:	898b      	ldrh	r3, [r1, #12]
 8005f1e:	4605      	mov	r5, r0
 8005f20:	05db      	lsls	r3, r3, #23
 8005f22:	460c      	mov	r4, r1
 8005f24:	4616      	mov	r6, r2
 8005f26:	d505      	bpl.n	8005f34 <__swrite+0x1e>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f30:	f000 f840 	bl	8005fb4 <_lseek_r>
 8005f34:	89a3      	ldrh	r3, [r4, #12]
 8005f36:	4632      	mov	r2, r6
 8005f38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f3c:	81a3      	strh	r3, [r4, #12]
 8005f3e:	4628      	mov	r0, r5
 8005f40:	463b      	mov	r3, r7
 8005f42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f4a:	f000 b857 	b.w	8005ffc <_write_r>

08005f4e <__sseek>:
 8005f4e:	b510      	push	{r4, lr}
 8005f50:	460c      	mov	r4, r1
 8005f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f56:	f000 f82d 	bl	8005fb4 <_lseek_r>
 8005f5a:	1c43      	adds	r3, r0, #1
 8005f5c:	89a3      	ldrh	r3, [r4, #12]
 8005f5e:	bf15      	itete	ne
 8005f60:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f6a:	81a3      	strheq	r3, [r4, #12]
 8005f6c:	bf18      	it	ne
 8005f6e:	81a3      	strhne	r3, [r4, #12]
 8005f70:	bd10      	pop	{r4, pc}

08005f72 <__sclose>:
 8005f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f76:	f000 b80d 	b.w	8005f94 <_close_r>

08005f7a <memset>:
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	4402      	add	r2, r0
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d100      	bne.n	8005f84 <memset+0xa>
 8005f82:	4770      	bx	lr
 8005f84:	f803 1b01 	strb.w	r1, [r3], #1
 8005f88:	e7f9      	b.n	8005f7e <memset+0x4>
	...

08005f8c <_localeconv_r>:
 8005f8c:	4800      	ldr	r0, [pc, #0]	; (8005f90 <_localeconv_r+0x4>)
 8005f8e:	4770      	bx	lr
 8005f90:	2000015c 	.word	0x2000015c

08005f94 <_close_r>:
 8005f94:	b538      	push	{r3, r4, r5, lr}
 8005f96:	2300      	movs	r3, #0
 8005f98:	4d05      	ldr	r5, [pc, #20]	; (8005fb0 <_close_r+0x1c>)
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	4608      	mov	r0, r1
 8005f9e:	602b      	str	r3, [r5, #0]
 8005fa0:	f7fb fb3b 	bl	800161a <_close>
 8005fa4:	1c43      	adds	r3, r0, #1
 8005fa6:	d102      	bne.n	8005fae <_close_r+0x1a>
 8005fa8:	682b      	ldr	r3, [r5, #0]
 8005faa:	b103      	cbz	r3, 8005fae <_close_r+0x1a>
 8005fac:	6023      	str	r3, [r4, #0]
 8005fae:	bd38      	pop	{r3, r4, r5, pc}
 8005fb0:	20000580 	.word	0x20000580

08005fb4 <_lseek_r>:
 8005fb4:	b538      	push	{r3, r4, r5, lr}
 8005fb6:	4604      	mov	r4, r0
 8005fb8:	4608      	mov	r0, r1
 8005fba:	4611      	mov	r1, r2
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	4d05      	ldr	r5, [pc, #20]	; (8005fd4 <_lseek_r+0x20>)
 8005fc0:	602a      	str	r2, [r5, #0]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	f7fb fb4d 	bl	8001662 <_lseek>
 8005fc8:	1c43      	adds	r3, r0, #1
 8005fca:	d102      	bne.n	8005fd2 <_lseek_r+0x1e>
 8005fcc:	682b      	ldr	r3, [r5, #0]
 8005fce:	b103      	cbz	r3, 8005fd2 <_lseek_r+0x1e>
 8005fd0:	6023      	str	r3, [r4, #0]
 8005fd2:	bd38      	pop	{r3, r4, r5, pc}
 8005fd4:	20000580 	.word	0x20000580

08005fd8 <_read_r>:
 8005fd8:	b538      	push	{r3, r4, r5, lr}
 8005fda:	4604      	mov	r4, r0
 8005fdc:	4608      	mov	r0, r1
 8005fde:	4611      	mov	r1, r2
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	4d05      	ldr	r5, [pc, #20]	; (8005ff8 <_read_r+0x20>)
 8005fe4:	602a      	str	r2, [r5, #0]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f7fb fade 	bl	80015a8 <_read>
 8005fec:	1c43      	adds	r3, r0, #1
 8005fee:	d102      	bne.n	8005ff6 <_read_r+0x1e>
 8005ff0:	682b      	ldr	r3, [r5, #0]
 8005ff2:	b103      	cbz	r3, 8005ff6 <_read_r+0x1e>
 8005ff4:	6023      	str	r3, [r4, #0]
 8005ff6:	bd38      	pop	{r3, r4, r5, pc}
 8005ff8:	20000580 	.word	0x20000580

08005ffc <_write_r>:
 8005ffc:	b538      	push	{r3, r4, r5, lr}
 8005ffe:	4604      	mov	r4, r0
 8006000:	4608      	mov	r0, r1
 8006002:	4611      	mov	r1, r2
 8006004:	2200      	movs	r2, #0
 8006006:	4d05      	ldr	r5, [pc, #20]	; (800601c <_write_r+0x20>)
 8006008:	602a      	str	r2, [r5, #0]
 800600a:	461a      	mov	r2, r3
 800600c:	f7fb fae9 	bl	80015e2 <_write>
 8006010:	1c43      	adds	r3, r0, #1
 8006012:	d102      	bne.n	800601a <_write_r+0x1e>
 8006014:	682b      	ldr	r3, [r5, #0]
 8006016:	b103      	cbz	r3, 800601a <_write_r+0x1e>
 8006018:	6023      	str	r3, [r4, #0]
 800601a:	bd38      	pop	{r3, r4, r5, pc}
 800601c:	20000580 	.word	0x20000580

08006020 <__errno>:
 8006020:	4b01      	ldr	r3, [pc, #4]	; (8006028 <__errno+0x8>)
 8006022:	6818      	ldr	r0, [r3, #0]
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	20000068 	.word	0x20000068

0800602c <__libc_init_array>:
 800602c:	b570      	push	{r4, r5, r6, lr}
 800602e:	2600      	movs	r6, #0
 8006030:	4d0c      	ldr	r5, [pc, #48]	; (8006064 <__libc_init_array+0x38>)
 8006032:	4c0d      	ldr	r4, [pc, #52]	; (8006068 <__libc_init_array+0x3c>)
 8006034:	1b64      	subs	r4, r4, r5
 8006036:	10a4      	asrs	r4, r4, #2
 8006038:	42a6      	cmp	r6, r4
 800603a:	d109      	bne.n	8006050 <__libc_init_array+0x24>
 800603c:	f003 ffc6 	bl	8009fcc <_init>
 8006040:	2600      	movs	r6, #0
 8006042:	4d0a      	ldr	r5, [pc, #40]	; (800606c <__libc_init_array+0x40>)
 8006044:	4c0a      	ldr	r4, [pc, #40]	; (8006070 <__libc_init_array+0x44>)
 8006046:	1b64      	subs	r4, r4, r5
 8006048:	10a4      	asrs	r4, r4, #2
 800604a:	42a6      	cmp	r6, r4
 800604c:	d105      	bne.n	800605a <__libc_init_array+0x2e>
 800604e:	bd70      	pop	{r4, r5, r6, pc}
 8006050:	f855 3b04 	ldr.w	r3, [r5], #4
 8006054:	4798      	blx	r3
 8006056:	3601      	adds	r6, #1
 8006058:	e7ee      	b.n	8006038 <__libc_init_array+0xc>
 800605a:	f855 3b04 	ldr.w	r3, [r5], #4
 800605e:	4798      	blx	r3
 8006060:	3601      	adds	r6, #1
 8006062:	e7f2      	b.n	800604a <__libc_init_array+0x1e>
 8006064:	0800a484 	.word	0x0800a484
 8006068:	0800a484 	.word	0x0800a484
 800606c:	0800a484 	.word	0x0800a484
 8006070:	0800a488 	.word	0x0800a488

08006074 <__retarget_lock_init_recursive>:
 8006074:	4770      	bx	lr

08006076 <__retarget_lock_acquire_recursive>:
 8006076:	4770      	bx	lr

08006078 <__retarget_lock_release_recursive>:
 8006078:	4770      	bx	lr

0800607a <memchr>:
 800607a:	4603      	mov	r3, r0
 800607c:	b510      	push	{r4, lr}
 800607e:	b2c9      	uxtb	r1, r1
 8006080:	4402      	add	r2, r0
 8006082:	4293      	cmp	r3, r2
 8006084:	4618      	mov	r0, r3
 8006086:	d101      	bne.n	800608c <memchr+0x12>
 8006088:	2000      	movs	r0, #0
 800608a:	e003      	b.n	8006094 <memchr+0x1a>
 800608c:	7804      	ldrb	r4, [r0, #0]
 800608e:	3301      	adds	r3, #1
 8006090:	428c      	cmp	r4, r1
 8006092:	d1f6      	bne.n	8006082 <memchr+0x8>
 8006094:	bd10      	pop	{r4, pc}
	...

08006098 <nanf>:
 8006098:	4800      	ldr	r0, [pc, #0]	; (800609c <nanf+0x4>)
 800609a:	4770      	bx	lr
 800609c:	7fc00000 	.word	0x7fc00000

080060a0 <quorem>:
 80060a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a4:	6903      	ldr	r3, [r0, #16]
 80060a6:	690c      	ldr	r4, [r1, #16]
 80060a8:	4607      	mov	r7, r0
 80060aa:	42a3      	cmp	r3, r4
 80060ac:	db7f      	blt.n	80061ae <quorem+0x10e>
 80060ae:	3c01      	subs	r4, #1
 80060b0:	f100 0514 	add.w	r5, r0, #20
 80060b4:	f101 0814 	add.w	r8, r1, #20
 80060b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060bc:	9301      	str	r3, [sp, #4]
 80060be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80060c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060c6:	3301      	adds	r3, #1
 80060c8:	429a      	cmp	r2, r3
 80060ca:	fbb2 f6f3 	udiv	r6, r2, r3
 80060ce:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80060d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80060d6:	d331      	bcc.n	800613c <quorem+0x9c>
 80060d8:	f04f 0e00 	mov.w	lr, #0
 80060dc:	4640      	mov	r0, r8
 80060de:	46ac      	mov	ip, r5
 80060e0:	46f2      	mov	sl, lr
 80060e2:	f850 2b04 	ldr.w	r2, [r0], #4
 80060e6:	b293      	uxth	r3, r2
 80060e8:	fb06 e303 	mla	r3, r6, r3, lr
 80060ec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80060f0:	0c1a      	lsrs	r2, r3, #16
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	fb06 220e 	mla	r2, r6, lr, r2
 80060f8:	ebaa 0303 	sub.w	r3, sl, r3
 80060fc:	f8dc a000 	ldr.w	sl, [ip]
 8006100:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006104:	fa1f fa8a 	uxth.w	sl, sl
 8006108:	4453      	add	r3, sl
 800610a:	f8dc a000 	ldr.w	sl, [ip]
 800610e:	b292      	uxth	r2, r2
 8006110:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006114:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006118:	b29b      	uxth	r3, r3
 800611a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800611e:	4581      	cmp	r9, r0
 8006120:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006124:	f84c 3b04 	str.w	r3, [ip], #4
 8006128:	d2db      	bcs.n	80060e2 <quorem+0x42>
 800612a:	f855 300b 	ldr.w	r3, [r5, fp]
 800612e:	b92b      	cbnz	r3, 800613c <quorem+0x9c>
 8006130:	9b01      	ldr	r3, [sp, #4]
 8006132:	3b04      	subs	r3, #4
 8006134:	429d      	cmp	r5, r3
 8006136:	461a      	mov	r2, r3
 8006138:	d32d      	bcc.n	8006196 <quorem+0xf6>
 800613a:	613c      	str	r4, [r7, #16]
 800613c:	4638      	mov	r0, r7
 800613e:	f001 f9df 	bl	8007500 <__mcmp>
 8006142:	2800      	cmp	r0, #0
 8006144:	db23      	blt.n	800618e <quorem+0xee>
 8006146:	4629      	mov	r1, r5
 8006148:	2000      	movs	r0, #0
 800614a:	3601      	adds	r6, #1
 800614c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006150:	f8d1 c000 	ldr.w	ip, [r1]
 8006154:	b293      	uxth	r3, r2
 8006156:	1ac3      	subs	r3, r0, r3
 8006158:	0c12      	lsrs	r2, r2, #16
 800615a:	fa1f f08c 	uxth.w	r0, ip
 800615e:	4403      	add	r3, r0
 8006160:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006164:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006168:	b29b      	uxth	r3, r3
 800616a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800616e:	45c1      	cmp	r9, r8
 8006170:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006174:	f841 3b04 	str.w	r3, [r1], #4
 8006178:	d2e8      	bcs.n	800614c <quorem+0xac>
 800617a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800617e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006182:	b922      	cbnz	r2, 800618e <quorem+0xee>
 8006184:	3b04      	subs	r3, #4
 8006186:	429d      	cmp	r5, r3
 8006188:	461a      	mov	r2, r3
 800618a:	d30a      	bcc.n	80061a2 <quorem+0x102>
 800618c:	613c      	str	r4, [r7, #16]
 800618e:	4630      	mov	r0, r6
 8006190:	b003      	add	sp, #12
 8006192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006196:	6812      	ldr	r2, [r2, #0]
 8006198:	3b04      	subs	r3, #4
 800619a:	2a00      	cmp	r2, #0
 800619c:	d1cd      	bne.n	800613a <quorem+0x9a>
 800619e:	3c01      	subs	r4, #1
 80061a0:	e7c8      	b.n	8006134 <quorem+0x94>
 80061a2:	6812      	ldr	r2, [r2, #0]
 80061a4:	3b04      	subs	r3, #4
 80061a6:	2a00      	cmp	r2, #0
 80061a8:	d1f0      	bne.n	800618c <quorem+0xec>
 80061aa:	3c01      	subs	r4, #1
 80061ac:	e7eb      	b.n	8006186 <quorem+0xe6>
 80061ae:	2000      	movs	r0, #0
 80061b0:	e7ee      	b.n	8006190 <quorem+0xf0>
 80061b2:	0000      	movs	r0, r0
 80061b4:	0000      	movs	r0, r0
	...

080061b8 <_dtoa_r>:
 80061b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061bc:	4616      	mov	r6, r2
 80061be:	461f      	mov	r7, r3
 80061c0:	69c4      	ldr	r4, [r0, #28]
 80061c2:	b099      	sub	sp, #100	; 0x64
 80061c4:	4605      	mov	r5, r0
 80061c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80061ca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80061ce:	b974      	cbnz	r4, 80061ee <_dtoa_r+0x36>
 80061d0:	2010      	movs	r0, #16
 80061d2:	f000 fe1d 	bl	8006e10 <malloc>
 80061d6:	4602      	mov	r2, r0
 80061d8:	61e8      	str	r0, [r5, #28]
 80061da:	b920      	cbnz	r0, 80061e6 <_dtoa_r+0x2e>
 80061dc:	21ef      	movs	r1, #239	; 0xef
 80061de:	4bac      	ldr	r3, [pc, #688]	; (8006490 <_dtoa_r+0x2d8>)
 80061e0:	48ac      	ldr	r0, [pc, #688]	; (8006494 <_dtoa_r+0x2dc>)
 80061e2:	f002 ffe5 	bl	80091b0 <__assert_func>
 80061e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80061ea:	6004      	str	r4, [r0, #0]
 80061ec:	60c4      	str	r4, [r0, #12]
 80061ee:	69eb      	ldr	r3, [r5, #28]
 80061f0:	6819      	ldr	r1, [r3, #0]
 80061f2:	b151      	cbz	r1, 800620a <_dtoa_r+0x52>
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	2301      	movs	r3, #1
 80061f8:	4093      	lsls	r3, r2
 80061fa:	604a      	str	r2, [r1, #4]
 80061fc:	608b      	str	r3, [r1, #8]
 80061fe:	4628      	mov	r0, r5
 8006200:	f000 fefa 	bl	8006ff8 <_Bfree>
 8006204:	2200      	movs	r2, #0
 8006206:	69eb      	ldr	r3, [r5, #28]
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	1e3b      	subs	r3, r7, #0
 800620c:	bfaf      	iteee	ge
 800620e:	2300      	movge	r3, #0
 8006210:	2201      	movlt	r2, #1
 8006212:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006216:	9305      	strlt	r3, [sp, #20]
 8006218:	bfa8      	it	ge
 800621a:	f8c8 3000 	strge.w	r3, [r8]
 800621e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006222:	4b9d      	ldr	r3, [pc, #628]	; (8006498 <_dtoa_r+0x2e0>)
 8006224:	bfb8      	it	lt
 8006226:	f8c8 2000 	strlt.w	r2, [r8]
 800622a:	ea33 0309 	bics.w	r3, r3, r9
 800622e:	d119      	bne.n	8006264 <_dtoa_r+0xac>
 8006230:	f242 730f 	movw	r3, #9999	; 0x270f
 8006234:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006236:	6013      	str	r3, [r2, #0]
 8006238:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800623c:	4333      	orrs	r3, r6
 800623e:	f000 8589 	beq.w	8006d54 <_dtoa_r+0xb9c>
 8006242:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006244:	b953      	cbnz	r3, 800625c <_dtoa_r+0xa4>
 8006246:	4b95      	ldr	r3, [pc, #596]	; (800649c <_dtoa_r+0x2e4>)
 8006248:	e023      	b.n	8006292 <_dtoa_r+0xda>
 800624a:	4b95      	ldr	r3, [pc, #596]	; (80064a0 <_dtoa_r+0x2e8>)
 800624c:	9303      	str	r3, [sp, #12]
 800624e:	3308      	adds	r3, #8
 8006250:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006252:	6013      	str	r3, [r2, #0]
 8006254:	9803      	ldr	r0, [sp, #12]
 8006256:	b019      	add	sp, #100	; 0x64
 8006258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800625c:	4b8f      	ldr	r3, [pc, #572]	; (800649c <_dtoa_r+0x2e4>)
 800625e:	9303      	str	r3, [sp, #12]
 8006260:	3303      	adds	r3, #3
 8006262:	e7f5      	b.n	8006250 <_dtoa_r+0x98>
 8006264:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006268:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800626c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006270:	2200      	movs	r2, #0
 8006272:	2300      	movs	r3, #0
 8006274:	f7fa fb98 	bl	80009a8 <__aeabi_dcmpeq>
 8006278:	4680      	mov	r8, r0
 800627a:	b160      	cbz	r0, 8006296 <_dtoa_r+0xde>
 800627c:	2301      	movs	r3, #1
 800627e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006280:	6013      	str	r3, [r2, #0]
 8006282:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 8562 	beq.w	8006d4e <_dtoa_r+0xb96>
 800628a:	4b86      	ldr	r3, [pc, #536]	; (80064a4 <_dtoa_r+0x2ec>)
 800628c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800628e:	6013      	str	r3, [r2, #0]
 8006290:	3b01      	subs	r3, #1
 8006292:	9303      	str	r3, [sp, #12]
 8006294:	e7de      	b.n	8006254 <_dtoa_r+0x9c>
 8006296:	ab16      	add	r3, sp, #88	; 0x58
 8006298:	9301      	str	r3, [sp, #4]
 800629a:	ab17      	add	r3, sp, #92	; 0x5c
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	4628      	mov	r0, r5
 80062a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80062a4:	f001 fa3c 	bl	8007720 <__d2b>
 80062a8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80062ac:	4682      	mov	sl, r0
 80062ae:	2c00      	cmp	r4, #0
 80062b0:	d07e      	beq.n	80063b0 <_dtoa_r+0x1f8>
 80062b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062b8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80062bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062c0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80062c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80062c8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80062cc:	4619      	mov	r1, r3
 80062ce:	2200      	movs	r2, #0
 80062d0:	4b75      	ldr	r3, [pc, #468]	; (80064a8 <_dtoa_r+0x2f0>)
 80062d2:	f7f9 ff49 	bl	8000168 <__aeabi_dsub>
 80062d6:	a368      	add	r3, pc, #416	; (adr r3, 8006478 <_dtoa_r+0x2c0>)
 80062d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062dc:	f7fa f8fc 	bl	80004d8 <__aeabi_dmul>
 80062e0:	a367      	add	r3, pc, #412	; (adr r3, 8006480 <_dtoa_r+0x2c8>)
 80062e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e6:	f7f9 ff41 	bl	800016c <__adddf3>
 80062ea:	4606      	mov	r6, r0
 80062ec:	4620      	mov	r0, r4
 80062ee:	460f      	mov	r7, r1
 80062f0:	f7fa f888 	bl	8000404 <__aeabi_i2d>
 80062f4:	a364      	add	r3, pc, #400	; (adr r3, 8006488 <_dtoa_r+0x2d0>)
 80062f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fa:	f7fa f8ed 	bl	80004d8 <__aeabi_dmul>
 80062fe:	4602      	mov	r2, r0
 8006300:	460b      	mov	r3, r1
 8006302:	4630      	mov	r0, r6
 8006304:	4639      	mov	r1, r7
 8006306:	f7f9 ff31 	bl	800016c <__adddf3>
 800630a:	4606      	mov	r6, r0
 800630c:	460f      	mov	r7, r1
 800630e:	f7fa fb93 	bl	8000a38 <__aeabi_d2iz>
 8006312:	2200      	movs	r2, #0
 8006314:	4683      	mov	fp, r0
 8006316:	2300      	movs	r3, #0
 8006318:	4630      	mov	r0, r6
 800631a:	4639      	mov	r1, r7
 800631c:	f7fa fb4e 	bl	80009bc <__aeabi_dcmplt>
 8006320:	b148      	cbz	r0, 8006336 <_dtoa_r+0x17e>
 8006322:	4658      	mov	r0, fp
 8006324:	f7fa f86e 	bl	8000404 <__aeabi_i2d>
 8006328:	4632      	mov	r2, r6
 800632a:	463b      	mov	r3, r7
 800632c:	f7fa fb3c 	bl	80009a8 <__aeabi_dcmpeq>
 8006330:	b908      	cbnz	r0, 8006336 <_dtoa_r+0x17e>
 8006332:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006336:	f1bb 0f16 	cmp.w	fp, #22
 800633a:	d857      	bhi.n	80063ec <_dtoa_r+0x234>
 800633c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006340:	4b5a      	ldr	r3, [pc, #360]	; (80064ac <_dtoa_r+0x2f4>)
 8006342:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634a:	f7fa fb37 	bl	80009bc <__aeabi_dcmplt>
 800634e:	2800      	cmp	r0, #0
 8006350:	d04e      	beq.n	80063f0 <_dtoa_r+0x238>
 8006352:	2300      	movs	r3, #0
 8006354:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006358:	930f      	str	r3, [sp, #60]	; 0x3c
 800635a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800635c:	1b1b      	subs	r3, r3, r4
 800635e:	1e5a      	subs	r2, r3, #1
 8006360:	bf46      	itte	mi
 8006362:	f1c3 0901 	rsbmi	r9, r3, #1
 8006366:	2300      	movmi	r3, #0
 8006368:	f04f 0900 	movpl.w	r9, #0
 800636c:	9209      	str	r2, [sp, #36]	; 0x24
 800636e:	bf48      	it	mi
 8006370:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006372:	f1bb 0f00 	cmp.w	fp, #0
 8006376:	db3d      	blt.n	80063f4 <_dtoa_r+0x23c>
 8006378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800637a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800637e:	445b      	add	r3, fp
 8006380:	9309      	str	r3, [sp, #36]	; 0x24
 8006382:	2300      	movs	r3, #0
 8006384:	930a      	str	r3, [sp, #40]	; 0x28
 8006386:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006388:	2b09      	cmp	r3, #9
 800638a:	d867      	bhi.n	800645c <_dtoa_r+0x2a4>
 800638c:	2b05      	cmp	r3, #5
 800638e:	bfc4      	itt	gt
 8006390:	3b04      	subgt	r3, #4
 8006392:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006394:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006396:	bfc8      	it	gt
 8006398:	2400      	movgt	r4, #0
 800639a:	f1a3 0302 	sub.w	r3, r3, #2
 800639e:	bfd8      	it	le
 80063a0:	2401      	movle	r4, #1
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	f200 8086 	bhi.w	80064b4 <_dtoa_r+0x2fc>
 80063a8:	e8df f003 	tbb	[pc, r3]
 80063ac:	5637392c 	.word	0x5637392c
 80063b0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80063b4:	441c      	add	r4, r3
 80063b6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80063ba:	2b20      	cmp	r3, #32
 80063bc:	bfc1      	itttt	gt
 80063be:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80063c2:	fa09 f903 	lslgt.w	r9, r9, r3
 80063c6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80063ca:	fa26 f303 	lsrgt.w	r3, r6, r3
 80063ce:	bfd6      	itet	le
 80063d0:	f1c3 0320 	rsble	r3, r3, #32
 80063d4:	ea49 0003 	orrgt.w	r0, r9, r3
 80063d8:	fa06 f003 	lslle.w	r0, r6, r3
 80063dc:	f7fa f802 	bl	80003e4 <__aeabi_ui2d>
 80063e0:	2201      	movs	r2, #1
 80063e2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80063e6:	3c01      	subs	r4, #1
 80063e8:	9213      	str	r2, [sp, #76]	; 0x4c
 80063ea:	e76f      	b.n	80062cc <_dtoa_r+0x114>
 80063ec:	2301      	movs	r3, #1
 80063ee:	e7b3      	b.n	8006358 <_dtoa_r+0x1a0>
 80063f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80063f2:	e7b2      	b.n	800635a <_dtoa_r+0x1a2>
 80063f4:	f1cb 0300 	rsb	r3, fp, #0
 80063f8:	930a      	str	r3, [sp, #40]	; 0x28
 80063fa:	2300      	movs	r3, #0
 80063fc:	eba9 090b 	sub.w	r9, r9, fp
 8006400:	930e      	str	r3, [sp, #56]	; 0x38
 8006402:	e7c0      	b.n	8006386 <_dtoa_r+0x1ce>
 8006404:	2300      	movs	r3, #0
 8006406:	930b      	str	r3, [sp, #44]	; 0x2c
 8006408:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800640a:	2b00      	cmp	r3, #0
 800640c:	dc55      	bgt.n	80064ba <_dtoa_r+0x302>
 800640e:	2301      	movs	r3, #1
 8006410:	461a      	mov	r2, r3
 8006412:	9306      	str	r3, [sp, #24]
 8006414:	9308      	str	r3, [sp, #32]
 8006416:	9223      	str	r2, [sp, #140]	; 0x8c
 8006418:	e00b      	b.n	8006432 <_dtoa_r+0x27a>
 800641a:	2301      	movs	r3, #1
 800641c:	e7f3      	b.n	8006406 <_dtoa_r+0x24e>
 800641e:	2300      	movs	r3, #0
 8006420:	930b      	str	r3, [sp, #44]	; 0x2c
 8006422:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006424:	445b      	add	r3, fp
 8006426:	9306      	str	r3, [sp, #24]
 8006428:	3301      	adds	r3, #1
 800642a:	2b01      	cmp	r3, #1
 800642c:	9308      	str	r3, [sp, #32]
 800642e:	bfb8      	it	lt
 8006430:	2301      	movlt	r3, #1
 8006432:	2100      	movs	r1, #0
 8006434:	2204      	movs	r2, #4
 8006436:	69e8      	ldr	r0, [r5, #28]
 8006438:	f102 0614 	add.w	r6, r2, #20
 800643c:	429e      	cmp	r6, r3
 800643e:	d940      	bls.n	80064c2 <_dtoa_r+0x30a>
 8006440:	6041      	str	r1, [r0, #4]
 8006442:	4628      	mov	r0, r5
 8006444:	f000 fd98 	bl	8006f78 <_Balloc>
 8006448:	9003      	str	r0, [sp, #12]
 800644a:	2800      	cmp	r0, #0
 800644c:	d13c      	bne.n	80064c8 <_dtoa_r+0x310>
 800644e:	4602      	mov	r2, r0
 8006450:	f240 11af 	movw	r1, #431	; 0x1af
 8006454:	4b16      	ldr	r3, [pc, #88]	; (80064b0 <_dtoa_r+0x2f8>)
 8006456:	e6c3      	b.n	80061e0 <_dtoa_r+0x28>
 8006458:	2301      	movs	r3, #1
 800645a:	e7e1      	b.n	8006420 <_dtoa_r+0x268>
 800645c:	2401      	movs	r4, #1
 800645e:	2300      	movs	r3, #0
 8006460:	940b      	str	r4, [sp, #44]	; 0x2c
 8006462:	9322      	str	r3, [sp, #136]	; 0x88
 8006464:	f04f 33ff 	mov.w	r3, #4294967295
 8006468:	2200      	movs	r2, #0
 800646a:	9306      	str	r3, [sp, #24]
 800646c:	9308      	str	r3, [sp, #32]
 800646e:	2312      	movs	r3, #18
 8006470:	e7d1      	b.n	8006416 <_dtoa_r+0x25e>
 8006472:	bf00      	nop
 8006474:	f3af 8000 	nop.w
 8006478:	636f4361 	.word	0x636f4361
 800647c:	3fd287a7 	.word	0x3fd287a7
 8006480:	8b60c8b3 	.word	0x8b60c8b3
 8006484:	3fc68a28 	.word	0x3fc68a28
 8006488:	509f79fb 	.word	0x509f79fb
 800648c:	3fd34413 	.word	0x3fd34413
 8006490:	0800a082 	.word	0x0800a082
 8006494:	0800a099 	.word	0x0800a099
 8006498:	7ff00000 	.word	0x7ff00000
 800649c:	0800a07e 	.word	0x0800a07e
 80064a0:	0800a075 	.word	0x0800a075
 80064a4:	0800a3d9 	.word	0x0800a3d9
 80064a8:	3ff80000 	.word	0x3ff80000
 80064ac:	0800a188 	.word	0x0800a188
 80064b0:	0800a0f1 	.word	0x0800a0f1
 80064b4:	2301      	movs	r3, #1
 80064b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80064b8:	e7d4      	b.n	8006464 <_dtoa_r+0x2ac>
 80064ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80064bc:	9306      	str	r3, [sp, #24]
 80064be:	9308      	str	r3, [sp, #32]
 80064c0:	e7b7      	b.n	8006432 <_dtoa_r+0x27a>
 80064c2:	3101      	adds	r1, #1
 80064c4:	0052      	lsls	r2, r2, #1
 80064c6:	e7b7      	b.n	8006438 <_dtoa_r+0x280>
 80064c8:	69eb      	ldr	r3, [r5, #28]
 80064ca:	9a03      	ldr	r2, [sp, #12]
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	9b08      	ldr	r3, [sp, #32]
 80064d0:	2b0e      	cmp	r3, #14
 80064d2:	f200 80a8 	bhi.w	8006626 <_dtoa_r+0x46e>
 80064d6:	2c00      	cmp	r4, #0
 80064d8:	f000 80a5 	beq.w	8006626 <_dtoa_r+0x46e>
 80064dc:	f1bb 0f00 	cmp.w	fp, #0
 80064e0:	dd34      	ble.n	800654c <_dtoa_r+0x394>
 80064e2:	4b9a      	ldr	r3, [pc, #616]	; (800674c <_dtoa_r+0x594>)
 80064e4:	f00b 020f 	and.w	r2, fp, #15
 80064e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064ec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80064f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80064f4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80064f8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80064fc:	d016      	beq.n	800652c <_dtoa_r+0x374>
 80064fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006502:	4b93      	ldr	r3, [pc, #588]	; (8006750 <_dtoa_r+0x598>)
 8006504:	2703      	movs	r7, #3
 8006506:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800650a:	f7fa f90f 	bl	800072c <__aeabi_ddiv>
 800650e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006512:	f004 040f 	and.w	r4, r4, #15
 8006516:	4e8e      	ldr	r6, [pc, #568]	; (8006750 <_dtoa_r+0x598>)
 8006518:	b954      	cbnz	r4, 8006530 <_dtoa_r+0x378>
 800651a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800651e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006522:	f7fa f903 	bl	800072c <__aeabi_ddiv>
 8006526:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800652a:	e029      	b.n	8006580 <_dtoa_r+0x3c8>
 800652c:	2702      	movs	r7, #2
 800652e:	e7f2      	b.n	8006516 <_dtoa_r+0x35e>
 8006530:	07e1      	lsls	r1, r4, #31
 8006532:	d508      	bpl.n	8006546 <_dtoa_r+0x38e>
 8006534:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006538:	e9d6 2300 	ldrd	r2, r3, [r6]
 800653c:	f7f9 ffcc 	bl	80004d8 <__aeabi_dmul>
 8006540:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006544:	3701      	adds	r7, #1
 8006546:	1064      	asrs	r4, r4, #1
 8006548:	3608      	adds	r6, #8
 800654a:	e7e5      	b.n	8006518 <_dtoa_r+0x360>
 800654c:	f000 80a5 	beq.w	800669a <_dtoa_r+0x4e2>
 8006550:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006554:	f1cb 0400 	rsb	r4, fp, #0
 8006558:	4b7c      	ldr	r3, [pc, #496]	; (800674c <_dtoa_r+0x594>)
 800655a:	f004 020f 	and.w	r2, r4, #15
 800655e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006566:	f7f9 ffb7 	bl	80004d8 <__aeabi_dmul>
 800656a:	2702      	movs	r7, #2
 800656c:	2300      	movs	r3, #0
 800656e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006572:	4e77      	ldr	r6, [pc, #476]	; (8006750 <_dtoa_r+0x598>)
 8006574:	1124      	asrs	r4, r4, #4
 8006576:	2c00      	cmp	r4, #0
 8006578:	f040 8084 	bne.w	8006684 <_dtoa_r+0x4cc>
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1d2      	bne.n	8006526 <_dtoa_r+0x36e>
 8006580:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006584:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006588:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800658a:	2b00      	cmp	r3, #0
 800658c:	f000 8087 	beq.w	800669e <_dtoa_r+0x4e6>
 8006590:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006594:	2200      	movs	r2, #0
 8006596:	4b6f      	ldr	r3, [pc, #444]	; (8006754 <_dtoa_r+0x59c>)
 8006598:	f7fa fa10 	bl	80009bc <__aeabi_dcmplt>
 800659c:	2800      	cmp	r0, #0
 800659e:	d07e      	beq.n	800669e <_dtoa_r+0x4e6>
 80065a0:	9b08      	ldr	r3, [sp, #32]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d07b      	beq.n	800669e <_dtoa_r+0x4e6>
 80065a6:	9b06      	ldr	r3, [sp, #24]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	dd38      	ble.n	800661e <_dtoa_r+0x466>
 80065ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065b0:	2200      	movs	r2, #0
 80065b2:	4b69      	ldr	r3, [pc, #420]	; (8006758 <_dtoa_r+0x5a0>)
 80065b4:	f7f9 ff90 	bl	80004d8 <__aeabi_dmul>
 80065b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065bc:	9c06      	ldr	r4, [sp, #24]
 80065be:	f10b 38ff 	add.w	r8, fp, #4294967295
 80065c2:	3701      	adds	r7, #1
 80065c4:	4638      	mov	r0, r7
 80065c6:	f7f9 ff1d 	bl	8000404 <__aeabi_i2d>
 80065ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065ce:	f7f9 ff83 	bl	80004d8 <__aeabi_dmul>
 80065d2:	2200      	movs	r2, #0
 80065d4:	4b61      	ldr	r3, [pc, #388]	; (800675c <_dtoa_r+0x5a4>)
 80065d6:	f7f9 fdc9 	bl	800016c <__adddf3>
 80065da:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80065de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80065e2:	9611      	str	r6, [sp, #68]	; 0x44
 80065e4:	2c00      	cmp	r4, #0
 80065e6:	d15d      	bne.n	80066a4 <_dtoa_r+0x4ec>
 80065e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065ec:	2200      	movs	r2, #0
 80065ee:	4b5c      	ldr	r3, [pc, #368]	; (8006760 <_dtoa_r+0x5a8>)
 80065f0:	f7f9 fdba 	bl	8000168 <__aeabi_dsub>
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80065fc:	4633      	mov	r3, r6
 80065fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006600:	f7fa f9fa 	bl	80009f8 <__aeabi_dcmpgt>
 8006604:	2800      	cmp	r0, #0
 8006606:	f040 8295 	bne.w	8006b34 <_dtoa_r+0x97c>
 800660a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800660e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006610:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006614:	f7fa f9d2 	bl	80009bc <__aeabi_dcmplt>
 8006618:	2800      	cmp	r0, #0
 800661a:	f040 8289 	bne.w	8006b30 <_dtoa_r+0x978>
 800661e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006622:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006626:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006628:	2b00      	cmp	r3, #0
 800662a:	f2c0 8151 	blt.w	80068d0 <_dtoa_r+0x718>
 800662e:	f1bb 0f0e 	cmp.w	fp, #14
 8006632:	f300 814d 	bgt.w	80068d0 <_dtoa_r+0x718>
 8006636:	4b45      	ldr	r3, [pc, #276]	; (800674c <_dtoa_r+0x594>)
 8006638:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800663c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006640:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006644:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006646:	2b00      	cmp	r3, #0
 8006648:	f280 80da 	bge.w	8006800 <_dtoa_r+0x648>
 800664c:	9b08      	ldr	r3, [sp, #32]
 800664e:	2b00      	cmp	r3, #0
 8006650:	f300 80d6 	bgt.w	8006800 <_dtoa_r+0x648>
 8006654:	f040 826b 	bne.w	8006b2e <_dtoa_r+0x976>
 8006658:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800665c:	2200      	movs	r2, #0
 800665e:	4b40      	ldr	r3, [pc, #256]	; (8006760 <_dtoa_r+0x5a8>)
 8006660:	f7f9 ff3a 	bl	80004d8 <__aeabi_dmul>
 8006664:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006668:	f7fa f9bc 	bl	80009e4 <__aeabi_dcmpge>
 800666c:	9c08      	ldr	r4, [sp, #32]
 800666e:	4626      	mov	r6, r4
 8006670:	2800      	cmp	r0, #0
 8006672:	f040 8241 	bne.w	8006af8 <_dtoa_r+0x940>
 8006676:	2331      	movs	r3, #49	; 0x31
 8006678:	9f03      	ldr	r7, [sp, #12]
 800667a:	f10b 0b01 	add.w	fp, fp, #1
 800667e:	f807 3b01 	strb.w	r3, [r7], #1
 8006682:	e23d      	b.n	8006b00 <_dtoa_r+0x948>
 8006684:	07e2      	lsls	r2, r4, #31
 8006686:	d505      	bpl.n	8006694 <_dtoa_r+0x4dc>
 8006688:	e9d6 2300 	ldrd	r2, r3, [r6]
 800668c:	f7f9 ff24 	bl	80004d8 <__aeabi_dmul>
 8006690:	2301      	movs	r3, #1
 8006692:	3701      	adds	r7, #1
 8006694:	1064      	asrs	r4, r4, #1
 8006696:	3608      	adds	r6, #8
 8006698:	e76d      	b.n	8006576 <_dtoa_r+0x3be>
 800669a:	2702      	movs	r7, #2
 800669c:	e770      	b.n	8006580 <_dtoa_r+0x3c8>
 800669e:	46d8      	mov	r8, fp
 80066a0:	9c08      	ldr	r4, [sp, #32]
 80066a2:	e78f      	b.n	80065c4 <_dtoa_r+0x40c>
 80066a4:	9903      	ldr	r1, [sp, #12]
 80066a6:	4b29      	ldr	r3, [pc, #164]	; (800674c <_dtoa_r+0x594>)
 80066a8:	4421      	add	r1, r4
 80066aa:	9112      	str	r1, [sp, #72]	; 0x48
 80066ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066ae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80066b2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80066b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80066ba:	2900      	cmp	r1, #0
 80066bc:	d054      	beq.n	8006768 <_dtoa_r+0x5b0>
 80066be:	2000      	movs	r0, #0
 80066c0:	4928      	ldr	r1, [pc, #160]	; (8006764 <_dtoa_r+0x5ac>)
 80066c2:	f7fa f833 	bl	800072c <__aeabi_ddiv>
 80066c6:	463b      	mov	r3, r7
 80066c8:	4632      	mov	r2, r6
 80066ca:	f7f9 fd4d 	bl	8000168 <__aeabi_dsub>
 80066ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80066d2:	9f03      	ldr	r7, [sp, #12]
 80066d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066d8:	f7fa f9ae 	bl	8000a38 <__aeabi_d2iz>
 80066dc:	4604      	mov	r4, r0
 80066de:	f7f9 fe91 	bl	8000404 <__aeabi_i2d>
 80066e2:	4602      	mov	r2, r0
 80066e4:	460b      	mov	r3, r1
 80066e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066ea:	f7f9 fd3d 	bl	8000168 <__aeabi_dsub>
 80066ee:	4602      	mov	r2, r0
 80066f0:	460b      	mov	r3, r1
 80066f2:	3430      	adds	r4, #48	; 0x30
 80066f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80066f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80066fc:	f807 4b01 	strb.w	r4, [r7], #1
 8006700:	f7fa f95c 	bl	80009bc <__aeabi_dcmplt>
 8006704:	2800      	cmp	r0, #0
 8006706:	d173      	bne.n	80067f0 <_dtoa_r+0x638>
 8006708:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800670c:	2000      	movs	r0, #0
 800670e:	4911      	ldr	r1, [pc, #68]	; (8006754 <_dtoa_r+0x59c>)
 8006710:	f7f9 fd2a 	bl	8000168 <__aeabi_dsub>
 8006714:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006718:	f7fa f950 	bl	80009bc <__aeabi_dcmplt>
 800671c:	2800      	cmp	r0, #0
 800671e:	f040 80b6 	bne.w	800688e <_dtoa_r+0x6d6>
 8006722:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006724:	429f      	cmp	r7, r3
 8006726:	f43f af7a 	beq.w	800661e <_dtoa_r+0x466>
 800672a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800672e:	2200      	movs	r2, #0
 8006730:	4b09      	ldr	r3, [pc, #36]	; (8006758 <_dtoa_r+0x5a0>)
 8006732:	f7f9 fed1 	bl	80004d8 <__aeabi_dmul>
 8006736:	2200      	movs	r2, #0
 8006738:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800673c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006740:	4b05      	ldr	r3, [pc, #20]	; (8006758 <_dtoa_r+0x5a0>)
 8006742:	f7f9 fec9 	bl	80004d8 <__aeabi_dmul>
 8006746:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800674a:	e7c3      	b.n	80066d4 <_dtoa_r+0x51c>
 800674c:	0800a188 	.word	0x0800a188
 8006750:	0800a160 	.word	0x0800a160
 8006754:	3ff00000 	.word	0x3ff00000
 8006758:	40240000 	.word	0x40240000
 800675c:	401c0000 	.word	0x401c0000
 8006760:	40140000 	.word	0x40140000
 8006764:	3fe00000 	.word	0x3fe00000
 8006768:	4630      	mov	r0, r6
 800676a:	4639      	mov	r1, r7
 800676c:	f7f9 feb4 	bl	80004d8 <__aeabi_dmul>
 8006770:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006772:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006776:	9c03      	ldr	r4, [sp, #12]
 8006778:	9314      	str	r3, [sp, #80]	; 0x50
 800677a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800677e:	f7fa f95b 	bl	8000a38 <__aeabi_d2iz>
 8006782:	9015      	str	r0, [sp, #84]	; 0x54
 8006784:	f7f9 fe3e 	bl	8000404 <__aeabi_i2d>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006790:	f7f9 fcea 	bl	8000168 <__aeabi_dsub>
 8006794:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006796:	4606      	mov	r6, r0
 8006798:	3330      	adds	r3, #48	; 0x30
 800679a:	f804 3b01 	strb.w	r3, [r4], #1
 800679e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067a0:	460f      	mov	r7, r1
 80067a2:	429c      	cmp	r4, r3
 80067a4:	f04f 0200 	mov.w	r2, #0
 80067a8:	d124      	bne.n	80067f4 <_dtoa_r+0x63c>
 80067aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80067ae:	4baf      	ldr	r3, [pc, #700]	; (8006a6c <_dtoa_r+0x8b4>)
 80067b0:	f7f9 fcdc 	bl	800016c <__adddf3>
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	4630      	mov	r0, r6
 80067ba:	4639      	mov	r1, r7
 80067bc:	f7fa f91c 	bl	80009f8 <__aeabi_dcmpgt>
 80067c0:	2800      	cmp	r0, #0
 80067c2:	d163      	bne.n	800688c <_dtoa_r+0x6d4>
 80067c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80067c8:	2000      	movs	r0, #0
 80067ca:	49a8      	ldr	r1, [pc, #672]	; (8006a6c <_dtoa_r+0x8b4>)
 80067cc:	f7f9 fccc 	bl	8000168 <__aeabi_dsub>
 80067d0:	4602      	mov	r2, r0
 80067d2:	460b      	mov	r3, r1
 80067d4:	4630      	mov	r0, r6
 80067d6:	4639      	mov	r1, r7
 80067d8:	f7fa f8f0 	bl	80009bc <__aeabi_dcmplt>
 80067dc:	2800      	cmp	r0, #0
 80067de:	f43f af1e 	beq.w	800661e <_dtoa_r+0x466>
 80067e2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80067e4:	1e7b      	subs	r3, r7, #1
 80067e6:	9314      	str	r3, [sp, #80]	; 0x50
 80067e8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80067ec:	2b30      	cmp	r3, #48	; 0x30
 80067ee:	d0f8      	beq.n	80067e2 <_dtoa_r+0x62a>
 80067f0:	46c3      	mov	fp, r8
 80067f2:	e03b      	b.n	800686c <_dtoa_r+0x6b4>
 80067f4:	4b9e      	ldr	r3, [pc, #632]	; (8006a70 <_dtoa_r+0x8b8>)
 80067f6:	f7f9 fe6f 	bl	80004d8 <__aeabi_dmul>
 80067fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067fe:	e7bc      	b.n	800677a <_dtoa_r+0x5c2>
 8006800:	9f03      	ldr	r7, [sp, #12]
 8006802:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006806:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800680a:	4640      	mov	r0, r8
 800680c:	4649      	mov	r1, r9
 800680e:	f7f9 ff8d 	bl	800072c <__aeabi_ddiv>
 8006812:	f7fa f911 	bl	8000a38 <__aeabi_d2iz>
 8006816:	4604      	mov	r4, r0
 8006818:	f7f9 fdf4 	bl	8000404 <__aeabi_i2d>
 800681c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006820:	f7f9 fe5a 	bl	80004d8 <__aeabi_dmul>
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	4640      	mov	r0, r8
 800682a:	4649      	mov	r1, r9
 800682c:	f7f9 fc9c 	bl	8000168 <__aeabi_dsub>
 8006830:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006834:	f807 6b01 	strb.w	r6, [r7], #1
 8006838:	9e03      	ldr	r6, [sp, #12]
 800683a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800683e:	1bbe      	subs	r6, r7, r6
 8006840:	45b4      	cmp	ip, r6
 8006842:	4602      	mov	r2, r0
 8006844:	460b      	mov	r3, r1
 8006846:	d136      	bne.n	80068b6 <_dtoa_r+0x6fe>
 8006848:	f7f9 fc90 	bl	800016c <__adddf3>
 800684c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006850:	4680      	mov	r8, r0
 8006852:	4689      	mov	r9, r1
 8006854:	f7fa f8d0 	bl	80009f8 <__aeabi_dcmpgt>
 8006858:	bb58      	cbnz	r0, 80068b2 <_dtoa_r+0x6fa>
 800685a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800685e:	4640      	mov	r0, r8
 8006860:	4649      	mov	r1, r9
 8006862:	f7fa f8a1 	bl	80009a8 <__aeabi_dcmpeq>
 8006866:	b108      	cbz	r0, 800686c <_dtoa_r+0x6b4>
 8006868:	07e3      	lsls	r3, r4, #31
 800686a:	d422      	bmi.n	80068b2 <_dtoa_r+0x6fa>
 800686c:	4651      	mov	r1, sl
 800686e:	4628      	mov	r0, r5
 8006870:	f000 fbc2 	bl	8006ff8 <_Bfree>
 8006874:	2300      	movs	r3, #0
 8006876:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006878:	703b      	strb	r3, [r7, #0]
 800687a:	f10b 0301 	add.w	r3, fp, #1
 800687e:	6013      	str	r3, [r2, #0]
 8006880:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006882:	2b00      	cmp	r3, #0
 8006884:	f43f ace6 	beq.w	8006254 <_dtoa_r+0x9c>
 8006888:	601f      	str	r7, [r3, #0]
 800688a:	e4e3      	b.n	8006254 <_dtoa_r+0x9c>
 800688c:	4627      	mov	r7, r4
 800688e:	463b      	mov	r3, r7
 8006890:	461f      	mov	r7, r3
 8006892:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006896:	2a39      	cmp	r2, #57	; 0x39
 8006898:	d107      	bne.n	80068aa <_dtoa_r+0x6f2>
 800689a:	9a03      	ldr	r2, [sp, #12]
 800689c:	429a      	cmp	r2, r3
 800689e:	d1f7      	bne.n	8006890 <_dtoa_r+0x6d8>
 80068a0:	2230      	movs	r2, #48	; 0x30
 80068a2:	9903      	ldr	r1, [sp, #12]
 80068a4:	f108 0801 	add.w	r8, r8, #1
 80068a8:	700a      	strb	r2, [r1, #0]
 80068aa:	781a      	ldrb	r2, [r3, #0]
 80068ac:	3201      	adds	r2, #1
 80068ae:	701a      	strb	r2, [r3, #0]
 80068b0:	e79e      	b.n	80067f0 <_dtoa_r+0x638>
 80068b2:	46d8      	mov	r8, fp
 80068b4:	e7eb      	b.n	800688e <_dtoa_r+0x6d6>
 80068b6:	2200      	movs	r2, #0
 80068b8:	4b6d      	ldr	r3, [pc, #436]	; (8006a70 <_dtoa_r+0x8b8>)
 80068ba:	f7f9 fe0d 	bl	80004d8 <__aeabi_dmul>
 80068be:	2200      	movs	r2, #0
 80068c0:	2300      	movs	r3, #0
 80068c2:	4680      	mov	r8, r0
 80068c4:	4689      	mov	r9, r1
 80068c6:	f7fa f86f 	bl	80009a8 <__aeabi_dcmpeq>
 80068ca:	2800      	cmp	r0, #0
 80068cc:	d09b      	beq.n	8006806 <_dtoa_r+0x64e>
 80068ce:	e7cd      	b.n	800686c <_dtoa_r+0x6b4>
 80068d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80068d2:	2a00      	cmp	r2, #0
 80068d4:	f000 80c4 	beq.w	8006a60 <_dtoa_r+0x8a8>
 80068d8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80068da:	2a01      	cmp	r2, #1
 80068dc:	f300 80a8 	bgt.w	8006a30 <_dtoa_r+0x878>
 80068e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80068e2:	2a00      	cmp	r2, #0
 80068e4:	f000 80a0 	beq.w	8006a28 <_dtoa_r+0x870>
 80068e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80068ec:	464f      	mov	r7, r9
 80068ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80068f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068f2:	2101      	movs	r1, #1
 80068f4:	441a      	add	r2, r3
 80068f6:	4628      	mov	r0, r5
 80068f8:	4499      	add	r9, r3
 80068fa:	9209      	str	r2, [sp, #36]	; 0x24
 80068fc:	f000 fc7c 	bl	80071f8 <__i2b>
 8006900:	4606      	mov	r6, r0
 8006902:	b15f      	cbz	r7, 800691c <_dtoa_r+0x764>
 8006904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006906:	2b00      	cmp	r3, #0
 8006908:	dd08      	ble.n	800691c <_dtoa_r+0x764>
 800690a:	42bb      	cmp	r3, r7
 800690c:	bfa8      	it	ge
 800690e:	463b      	movge	r3, r7
 8006910:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006912:	eba9 0903 	sub.w	r9, r9, r3
 8006916:	1aff      	subs	r7, r7, r3
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	9309      	str	r3, [sp, #36]	; 0x24
 800691c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800691e:	b1f3      	cbz	r3, 800695e <_dtoa_r+0x7a6>
 8006920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 80a0 	beq.w	8006a68 <_dtoa_r+0x8b0>
 8006928:	2c00      	cmp	r4, #0
 800692a:	dd10      	ble.n	800694e <_dtoa_r+0x796>
 800692c:	4631      	mov	r1, r6
 800692e:	4622      	mov	r2, r4
 8006930:	4628      	mov	r0, r5
 8006932:	f000 fd1f 	bl	8007374 <__pow5mult>
 8006936:	4652      	mov	r2, sl
 8006938:	4601      	mov	r1, r0
 800693a:	4606      	mov	r6, r0
 800693c:	4628      	mov	r0, r5
 800693e:	f000 fc71 	bl	8007224 <__multiply>
 8006942:	4680      	mov	r8, r0
 8006944:	4651      	mov	r1, sl
 8006946:	4628      	mov	r0, r5
 8006948:	f000 fb56 	bl	8006ff8 <_Bfree>
 800694c:	46c2      	mov	sl, r8
 800694e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006950:	1b1a      	subs	r2, r3, r4
 8006952:	d004      	beq.n	800695e <_dtoa_r+0x7a6>
 8006954:	4651      	mov	r1, sl
 8006956:	4628      	mov	r0, r5
 8006958:	f000 fd0c 	bl	8007374 <__pow5mult>
 800695c:	4682      	mov	sl, r0
 800695e:	2101      	movs	r1, #1
 8006960:	4628      	mov	r0, r5
 8006962:	f000 fc49 	bl	80071f8 <__i2b>
 8006966:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006968:	4604      	mov	r4, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	f340 8082 	ble.w	8006a74 <_dtoa_r+0x8bc>
 8006970:	461a      	mov	r2, r3
 8006972:	4601      	mov	r1, r0
 8006974:	4628      	mov	r0, r5
 8006976:	f000 fcfd 	bl	8007374 <__pow5mult>
 800697a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800697c:	4604      	mov	r4, r0
 800697e:	2b01      	cmp	r3, #1
 8006980:	dd7b      	ble.n	8006a7a <_dtoa_r+0x8c2>
 8006982:	f04f 0800 	mov.w	r8, #0
 8006986:	6923      	ldr	r3, [r4, #16]
 8006988:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800698c:	6918      	ldr	r0, [r3, #16]
 800698e:	f000 fbe5 	bl	800715c <__hi0bits>
 8006992:	f1c0 0020 	rsb	r0, r0, #32
 8006996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006998:	4418      	add	r0, r3
 800699a:	f010 001f 	ands.w	r0, r0, #31
 800699e:	f000 8092 	beq.w	8006ac6 <_dtoa_r+0x90e>
 80069a2:	f1c0 0320 	rsb	r3, r0, #32
 80069a6:	2b04      	cmp	r3, #4
 80069a8:	f340 8085 	ble.w	8006ab6 <_dtoa_r+0x8fe>
 80069ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ae:	f1c0 001c 	rsb	r0, r0, #28
 80069b2:	4403      	add	r3, r0
 80069b4:	4481      	add	r9, r0
 80069b6:	4407      	add	r7, r0
 80069b8:	9309      	str	r3, [sp, #36]	; 0x24
 80069ba:	f1b9 0f00 	cmp.w	r9, #0
 80069be:	dd05      	ble.n	80069cc <_dtoa_r+0x814>
 80069c0:	4651      	mov	r1, sl
 80069c2:	464a      	mov	r2, r9
 80069c4:	4628      	mov	r0, r5
 80069c6:	f000 fd2f 	bl	8007428 <__lshift>
 80069ca:	4682      	mov	sl, r0
 80069cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	dd05      	ble.n	80069de <_dtoa_r+0x826>
 80069d2:	4621      	mov	r1, r4
 80069d4:	461a      	mov	r2, r3
 80069d6:	4628      	mov	r0, r5
 80069d8:	f000 fd26 	bl	8007428 <__lshift>
 80069dc:	4604      	mov	r4, r0
 80069de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d072      	beq.n	8006aca <_dtoa_r+0x912>
 80069e4:	4621      	mov	r1, r4
 80069e6:	4650      	mov	r0, sl
 80069e8:	f000 fd8a 	bl	8007500 <__mcmp>
 80069ec:	2800      	cmp	r0, #0
 80069ee:	da6c      	bge.n	8006aca <_dtoa_r+0x912>
 80069f0:	2300      	movs	r3, #0
 80069f2:	4651      	mov	r1, sl
 80069f4:	220a      	movs	r2, #10
 80069f6:	4628      	mov	r0, r5
 80069f8:	f000 fb20 	bl	800703c <__multadd>
 80069fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069fe:	4682      	mov	sl, r0
 8006a00:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 81ac 	beq.w	8006d62 <_dtoa_r+0xbaa>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	4631      	mov	r1, r6
 8006a0e:	220a      	movs	r2, #10
 8006a10:	4628      	mov	r0, r5
 8006a12:	f000 fb13 	bl	800703c <__multadd>
 8006a16:	9b06      	ldr	r3, [sp, #24]
 8006a18:	4606      	mov	r6, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f300 8093 	bgt.w	8006b46 <_dtoa_r+0x98e>
 8006a20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	dc59      	bgt.n	8006ada <_dtoa_r+0x922>
 8006a26:	e08e      	b.n	8006b46 <_dtoa_r+0x98e>
 8006a28:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006a2a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006a2e:	e75d      	b.n	80068ec <_dtoa_r+0x734>
 8006a30:	9b08      	ldr	r3, [sp, #32]
 8006a32:	1e5c      	subs	r4, r3, #1
 8006a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a36:	42a3      	cmp	r3, r4
 8006a38:	bfbf      	itttt	lt
 8006a3a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006a3c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006a3e:	1ae3      	sublt	r3, r4, r3
 8006a40:	18d2      	addlt	r2, r2, r3
 8006a42:	bfa8      	it	ge
 8006a44:	1b1c      	subge	r4, r3, r4
 8006a46:	9b08      	ldr	r3, [sp, #32]
 8006a48:	bfbe      	ittt	lt
 8006a4a:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006a4c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006a4e:	2400      	movlt	r4, #0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	bfb5      	itete	lt
 8006a54:	eba9 0703 	sublt.w	r7, r9, r3
 8006a58:	464f      	movge	r7, r9
 8006a5a:	2300      	movlt	r3, #0
 8006a5c:	9b08      	ldrge	r3, [sp, #32]
 8006a5e:	e747      	b.n	80068f0 <_dtoa_r+0x738>
 8006a60:	464f      	mov	r7, r9
 8006a62:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006a64:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006a66:	e74c      	b.n	8006902 <_dtoa_r+0x74a>
 8006a68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a6a:	e773      	b.n	8006954 <_dtoa_r+0x79c>
 8006a6c:	3fe00000 	.word	0x3fe00000
 8006a70:	40240000 	.word	0x40240000
 8006a74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	dc18      	bgt.n	8006aac <_dtoa_r+0x8f4>
 8006a7a:	9b04      	ldr	r3, [sp, #16]
 8006a7c:	b9b3      	cbnz	r3, 8006aac <_dtoa_r+0x8f4>
 8006a7e:	9b05      	ldr	r3, [sp, #20]
 8006a80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a84:	b993      	cbnz	r3, 8006aac <_dtoa_r+0x8f4>
 8006a86:	9b05      	ldr	r3, [sp, #20]
 8006a88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a8c:	0d1b      	lsrs	r3, r3, #20
 8006a8e:	051b      	lsls	r3, r3, #20
 8006a90:	b17b      	cbz	r3, 8006ab2 <_dtoa_r+0x8fa>
 8006a92:	f04f 0801 	mov.w	r8, #1
 8006a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a98:	f109 0901 	add.w	r9, r9, #1
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8006aa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f47f af6f 	bne.w	8006986 <_dtoa_r+0x7ce>
 8006aa8:	2001      	movs	r0, #1
 8006aaa:	e774      	b.n	8006996 <_dtoa_r+0x7de>
 8006aac:	f04f 0800 	mov.w	r8, #0
 8006ab0:	e7f6      	b.n	8006aa0 <_dtoa_r+0x8e8>
 8006ab2:	4698      	mov	r8, r3
 8006ab4:	e7f4      	b.n	8006aa0 <_dtoa_r+0x8e8>
 8006ab6:	d080      	beq.n	80069ba <_dtoa_r+0x802>
 8006ab8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006aba:	331c      	adds	r3, #28
 8006abc:	441a      	add	r2, r3
 8006abe:	4499      	add	r9, r3
 8006ac0:	441f      	add	r7, r3
 8006ac2:	9209      	str	r2, [sp, #36]	; 0x24
 8006ac4:	e779      	b.n	80069ba <_dtoa_r+0x802>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	e7f6      	b.n	8006ab8 <_dtoa_r+0x900>
 8006aca:	9b08      	ldr	r3, [sp, #32]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	dc34      	bgt.n	8006b3a <_dtoa_r+0x982>
 8006ad0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	dd31      	ble.n	8006b3a <_dtoa_r+0x982>
 8006ad6:	9b08      	ldr	r3, [sp, #32]
 8006ad8:	9306      	str	r3, [sp, #24]
 8006ada:	9b06      	ldr	r3, [sp, #24]
 8006adc:	b963      	cbnz	r3, 8006af8 <_dtoa_r+0x940>
 8006ade:	4621      	mov	r1, r4
 8006ae0:	2205      	movs	r2, #5
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	f000 faaa 	bl	800703c <__multadd>
 8006ae8:	4601      	mov	r1, r0
 8006aea:	4604      	mov	r4, r0
 8006aec:	4650      	mov	r0, sl
 8006aee:	f000 fd07 	bl	8007500 <__mcmp>
 8006af2:	2800      	cmp	r0, #0
 8006af4:	f73f adbf 	bgt.w	8006676 <_dtoa_r+0x4be>
 8006af8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006afa:	9f03      	ldr	r7, [sp, #12]
 8006afc:	ea6f 0b03 	mvn.w	fp, r3
 8006b00:	f04f 0800 	mov.w	r8, #0
 8006b04:	4621      	mov	r1, r4
 8006b06:	4628      	mov	r0, r5
 8006b08:	f000 fa76 	bl	8006ff8 <_Bfree>
 8006b0c:	2e00      	cmp	r6, #0
 8006b0e:	f43f aead 	beq.w	800686c <_dtoa_r+0x6b4>
 8006b12:	f1b8 0f00 	cmp.w	r8, #0
 8006b16:	d005      	beq.n	8006b24 <_dtoa_r+0x96c>
 8006b18:	45b0      	cmp	r8, r6
 8006b1a:	d003      	beq.n	8006b24 <_dtoa_r+0x96c>
 8006b1c:	4641      	mov	r1, r8
 8006b1e:	4628      	mov	r0, r5
 8006b20:	f000 fa6a 	bl	8006ff8 <_Bfree>
 8006b24:	4631      	mov	r1, r6
 8006b26:	4628      	mov	r0, r5
 8006b28:	f000 fa66 	bl	8006ff8 <_Bfree>
 8006b2c:	e69e      	b.n	800686c <_dtoa_r+0x6b4>
 8006b2e:	2400      	movs	r4, #0
 8006b30:	4626      	mov	r6, r4
 8006b32:	e7e1      	b.n	8006af8 <_dtoa_r+0x940>
 8006b34:	46c3      	mov	fp, r8
 8006b36:	4626      	mov	r6, r4
 8006b38:	e59d      	b.n	8006676 <_dtoa_r+0x4be>
 8006b3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 80c8 	beq.w	8006cd2 <_dtoa_r+0xb1a>
 8006b42:	9b08      	ldr	r3, [sp, #32]
 8006b44:	9306      	str	r3, [sp, #24]
 8006b46:	2f00      	cmp	r7, #0
 8006b48:	dd05      	ble.n	8006b56 <_dtoa_r+0x99e>
 8006b4a:	4631      	mov	r1, r6
 8006b4c:	463a      	mov	r2, r7
 8006b4e:	4628      	mov	r0, r5
 8006b50:	f000 fc6a 	bl	8007428 <__lshift>
 8006b54:	4606      	mov	r6, r0
 8006b56:	f1b8 0f00 	cmp.w	r8, #0
 8006b5a:	d05b      	beq.n	8006c14 <_dtoa_r+0xa5c>
 8006b5c:	4628      	mov	r0, r5
 8006b5e:	6871      	ldr	r1, [r6, #4]
 8006b60:	f000 fa0a 	bl	8006f78 <_Balloc>
 8006b64:	4607      	mov	r7, r0
 8006b66:	b928      	cbnz	r0, 8006b74 <_dtoa_r+0x9bc>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006b6e:	4b81      	ldr	r3, [pc, #516]	; (8006d74 <_dtoa_r+0xbbc>)
 8006b70:	f7ff bb36 	b.w	80061e0 <_dtoa_r+0x28>
 8006b74:	6932      	ldr	r2, [r6, #16]
 8006b76:	f106 010c 	add.w	r1, r6, #12
 8006b7a:	3202      	adds	r2, #2
 8006b7c:	0092      	lsls	r2, r2, #2
 8006b7e:	300c      	adds	r0, #12
 8006b80:	f002 fb02 	bl	8009188 <memcpy>
 8006b84:	2201      	movs	r2, #1
 8006b86:	4639      	mov	r1, r7
 8006b88:	4628      	mov	r0, r5
 8006b8a:	f000 fc4d 	bl	8007428 <__lshift>
 8006b8e:	46b0      	mov	r8, r6
 8006b90:	4606      	mov	r6, r0
 8006b92:	9b03      	ldr	r3, [sp, #12]
 8006b94:	9a03      	ldr	r2, [sp, #12]
 8006b96:	3301      	adds	r3, #1
 8006b98:	9308      	str	r3, [sp, #32]
 8006b9a:	9b06      	ldr	r3, [sp, #24]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ba0:	9b04      	ldr	r3, [sp, #16]
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	930a      	str	r3, [sp, #40]	; 0x28
 8006ba8:	9b08      	ldr	r3, [sp, #32]
 8006baa:	4621      	mov	r1, r4
 8006bac:	3b01      	subs	r3, #1
 8006bae:	4650      	mov	r0, sl
 8006bb0:	9304      	str	r3, [sp, #16]
 8006bb2:	f7ff fa75 	bl	80060a0 <quorem>
 8006bb6:	4641      	mov	r1, r8
 8006bb8:	9006      	str	r0, [sp, #24]
 8006bba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006bbe:	4650      	mov	r0, sl
 8006bc0:	f000 fc9e 	bl	8007500 <__mcmp>
 8006bc4:	4632      	mov	r2, r6
 8006bc6:	9009      	str	r0, [sp, #36]	; 0x24
 8006bc8:	4621      	mov	r1, r4
 8006bca:	4628      	mov	r0, r5
 8006bcc:	f000 fcb4 	bl	8007538 <__mdiff>
 8006bd0:	68c2      	ldr	r2, [r0, #12]
 8006bd2:	4607      	mov	r7, r0
 8006bd4:	bb02      	cbnz	r2, 8006c18 <_dtoa_r+0xa60>
 8006bd6:	4601      	mov	r1, r0
 8006bd8:	4650      	mov	r0, sl
 8006bda:	f000 fc91 	bl	8007500 <__mcmp>
 8006bde:	4602      	mov	r2, r0
 8006be0:	4639      	mov	r1, r7
 8006be2:	4628      	mov	r0, r5
 8006be4:	920c      	str	r2, [sp, #48]	; 0x30
 8006be6:	f000 fa07 	bl	8006ff8 <_Bfree>
 8006bea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bee:	9f08      	ldr	r7, [sp, #32]
 8006bf0:	ea43 0102 	orr.w	r1, r3, r2
 8006bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bf6:	4319      	orrs	r1, r3
 8006bf8:	d110      	bne.n	8006c1c <_dtoa_r+0xa64>
 8006bfa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006bfe:	d029      	beq.n	8006c54 <_dtoa_r+0xa9c>
 8006c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	dd02      	ble.n	8006c0c <_dtoa_r+0xa54>
 8006c06:	9b06      	ldr	r3, [sp, #24]
 8006c08:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006c0c:	9b04      	ldr	r3, [sp, #16]
 8006c0e:	f883 9000 	strb.w	r9, [r3]
 8006c12:	e777      	b.n	8006b04 <_dtoa_r+0x94c>
 8006c14:	4630      	mov	r0, r6
 8006c16:	e7ba      	b.n	8006b8e <_dtoa_r+0x9d6>
 8006c18:	2201      	movs	r2, #1
 8006c1a:	e7e1      	b.n	8006be0 <_dtoa_r+0xa28>
 8006c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	db04      	blt.n	8006c2c <_dtoa_r+0xa74>
 8006c22:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006c24:	430b      	orrs	r3, r1
 8006c26:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006c28:	430b      	orrs	r3, r1
 8006c2a:	d120      	bne.n	8006c6e <_dtoa_r+0xab6>
 8006c2c:	2a00      	cmp	r2, #0
 8006c2e:	dded      	ble.n	8006c0c <_dtoa_r+0xa54>
 8006c30:	4651      	mov	r1, sl
 8006c32:	2201      	movs	r2, #1
 8006c34:	4628      	mov	r0, r5
 8006c36:	f000 fbf7 	bl	8007428 <__lshift>
 8006c3a:	4621      	mov	r1, r4
 8006c3c:	4682      	mov	sl, r0
 8006c3e:	f000 fc5f 	bl	8007500 <__mcmp>
 8006c42:	2800      	cmp	r0, #0
 8006c44:	dc03      	bgt.n	8006c4e <_dtoa_r+0xa96>
 8006c46:	d1e1      	bne.n	8006c0c <_dtoa_r+0xa54>
 8006c48:	f019 0f01 	tst.w	r9, #1
 8006c4c:	d0de      	beq.n	8006c0c <_dtoa_r+0xa54>
 8006c4e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006c52:	d1d8      	bne.n	8006c06 <_dtoa_r+0xa4e>
 8006c54:	2339      	movs	r3, #57	; 0x39
 8006c56:	9a04      	ldr	r2, [sp, #16]
 8006c58:	7013      	strb	r3, [r2, #0]
 8006c5a:	463b      	mov	r3, r7
 8006c5c:	461f      	mov	r7, r3
 8006c5e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006c62:	3b01      	subs	r3, #1
 8006c64:	2a39      	cmp	r2, #57	; 0x39
 8006c66:	d06b      	beq.n	8006d40 <_dtoa_r+0xb88>
 8006c68:	3201      	adds	r2, #1
 8006c6a:	701a      	strb	r2, [r3, #0]
 8006c6c:	e74a      	b.n	8006b04 <_dtoa_r+0x94c>
 8006c6e:	2a00      	cmp	r2, #0
 8006c70:	dd07      	ble.n	8006c82 <_dtoa_r+0xaca>
 8006c72:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006c76:	d0ed      	beq.n	8006c54 <_dtoa_r+0xa9c>
 8006c78:	9a04      	ldr	r2, [sp, #16]
 8006c7a:	f109 0301 	add.w	r3, r9, #1
 8006c7e:	7013      	strb	r3, [r2, #0]
 8006c80:	e740      	b.n	8006b04 <_dtoa_r+0x94c>
 8006c82:	9b08      	ldr	r3, [sp, #32]
 8006c84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c86:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d042      	beq.n	8006d14 <_dtoa_r+0xb5c>
 8006c8e:	4651      	mov	r1, sl
 8006c90:	2300      	movs	r3, #0
 8006c92:	220a      	movs	r2, #10
 8006c94:	4628      	mov	r0, r5
 8006c96:	f000 f9d1 	bl	800703c <__multadd>
 8006c9a:	45b0      	cmp	r8, r6
 8006c9c:	4682      	mov	sl, r0
 8006c9e:	f04f 0300 	mov.w	r3, #0
 8006ca2:	f04f 020a 	mov.w	r2, #10
 8006ca6:	4641      	mov	r1, r8
 8006ca8:	4628      	mov	r0, r5
 8006caa:	d107      	bne.n	8006cbc <_dtoa_r+0xb04>
 8006cac:	f000 f9c6 	bl	800703c <__multadd>
 8006cb0:	4680      	mov	r8, r0
 8006cb2:	4606      	mov	r6, r0
 8006cb4:	9b08      	ldr	r3, [sp, #32]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	9308      	str	r3, [sp, #32]
 8006cba:	e775      	b.n	8006ba8 <_dtoa_r+0x9f0>
 8006cbc:	f000 f9be 	bl	800703c <__multadd>
 8006cc0:	4631      	mov	r1, r6
 8006cc2:	4680      	mov	r8, r0
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	220a      	movs	r2, #10
 8006cc8:	4628      	mov	r0, r5
 8006cca:	f000 f9b7 	bl	800703c <__multadd>
 8006cce:	4606      	mov	r6, r0
 8006cd0:	e7f0      	b.n	8006cb4 <_dtoa_r+0xafc>
 8006cd2:	9b08      	ldr	r3, [sp, #32]
 8006cd4:	9306      	str	r3, [sp, #24]
 8006cd6:	9f03      	ldr	r7, [sp, #12]
 8006cd8:	4621      	mov	r1, r4
 8006cda:	4650      	mov	r0, sl
 8006cdc:	f7ff f9e0 	bl	80060a0 <quorem>
 8006ce0:	9b03      	ldr	r3, [sp, #12]
 8006ce2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006ce6:	f807 9b01 	strb.w	r9, [r7], #1
 8006cea:	1afa      	subs	r2, r7, r3
 8006cec:	9b06      	ldr	r3, [sp, #24]
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	dd07      	ble.n	8006d02 <_dtoa_r+0xb4a>
 8006cf2:	4651      	mov	r1, sl
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	220a      	movs	r2, #10
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	f000 f99f 	bl	800703c <__multadd>
 8006cfe:	4682      	mov	sl, r0
 8006d00:	e7ea      	b.n	8006cd8 <_dtoa_r+0xb20>
 8006d02:	9b06      	ldr	r3, [sp, #24]
 8006d04:	f04f 0800 	mov.w	r8, #0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	bfcc      	ite	gt
 8006d0c:	461f      	movgt	r7, r3
 8006d0e:	2701      	movle	r7, #1
 8006d10:	9b03      	ldr	r3, [sp, #12]
 8006d12:	441f      	add	r7, r3
 8006d14:	4651      	mov	r1, sl
 8006d16:	2201      	movs	r2, #1
 8006d18:	4628      	mov	r0, r5
 8006d1a:	f000 fb85 	bl	8007428 <__lshift>
 8006d1e:	4621      	mov	r1, r4
 8006d20:	4682      	mov	sl, r0
 8006d22:	f000 fbed 	bl	8007500 <__mcmp>
 8006d26:	2800      	cmp	r0, #0
 8006d28:	dc97      	bgt.n	8006c5a <_dtoa_r+0xaa2>
 8006d2a:	d102      	bne.n	8006d32 <_dtoa_r+0xb7a>
 8006d2c:	f019 0f01 	tst.w	r9, #1
 8006d30:	d193      	bne.n	8006c5a <_dtoa_r+0xaa2>
 8006d32:	463b      	mov	r3, r7
 8006d34:	461f      	mov	r7, r3
 8006d36:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d3a:	2a30      	cmp	r2, #48	; 0x30
 8006d3c:	d0fa      	beq.n	8006d34 <_dtoa_r+0xb7c>
 8006d3e:	e6e1      	b.n	8006b04 <_dtoa_r+0x94c>
 8006d40:	9a03      	ldr	r2, [sp, #12]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d18a      	bne.n	8006c5c <_dtoa_r+0xaa4>
 8006d46:	2331      	movs	r3, #49	; 0x31
 8006d48:	f10b 0b01 	add.w	fp, fp, #1
 8006d4c:	e797      	b.n	8006c7e <_dtoa_r+0xac6>
 8006d4e:	4b0a      	ldr	r3, [pc, #40]	; (8006d78 <_dtoa_r+0xbc0>)
 8006d50:	f7ff ba9f 	b.w	8006292 <_dtoa_r+0xda>
 8006d54:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	f47f aa77 	bne.w	800624a <_dtoa_r+0x92>
 8006d5c:	4b07      	ldr	r3, [pc, #28]	; (8006d7c <_dtoa_r+0xbc4>)
 8006d5e:	f7ff ba98 	b.w	8006292 <_dtoa_r+0xda>
 8006d62:	9b06      	ldr	r3, [sp, #24]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	dcb6      	bgt.n	8006cd6 <_dtoa_r+0xb1e>
 8006d68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	f73f aeb5 	bgt.w	8006ada <_dtoa_r+0x922>
 8006d70:	e7b1      	b.n	8006cd6 <_dtoa_r+0xb1e>
 8006d72:	bf00      	nop
 8006d74:	0800a0f1 	.word	0x0800a0f1
 8006d78:	0800a3d8 	.word	0x0800a3d8
 8006d7c:	0800a075 	.word	0x0800a075

08006d80 <_free_r>:
 8006d80:	b538      	push	{r3, r4, r5, lr}
 8006d82:	4605      	mov	r5, r0
 8006d84:	2900      	cmp	r1, #0
 8006d86:	d040      	beq.n	8006e0a <_free_r+0x8a>
 8006d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d8c:	1f0c      	subs	r4, r1, #4
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	bfb8      	it	lt
 8006d92:	18e4      	addlt	r4, r4, r3
 8006d94:	f000 f8e4 	bl	8006f60 <__malloc_lock>
 8006d98:	4a1c      	ldr	r2, [pc, #112]	; (8006e0c <_free_r+0x8c>)
 8006d9a:	6813      	ldr	r3, [r2, #0]
 8006d9c:	b933      	cbnz	r3, 8006dac <_free_r+0x2c>
 8006d9e:	6063      	str	r3, [r4, #4]
 8006da0:	6014      	str	r4, [r2, #0]
 8006da2:	4628      	mov	r0, r5
 8006da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006da8:	f000 b8e0 	b.w	8006f6c <__malloc_unlock>
 8006dac:	42a3      	cmp	r3, r4
 8006dae:	d908      	bls.n	8006dc2 <_free_r+0x42>
 8006db0:	6820      	ldr	r0, [r4, #0]
 8006db2:	1821      	adds	r1, r4, r0
 8006db4:	428b      	cmp	r3, r1
 8006db6:	bf01      	itttt	eq
 8006db8:	6819      	ldreq	r1, [r3, #0]
 8006dba:	685b      	ldreq	r3, [r3, #4]
 8006dbc:	1809      	addeq	r1, r1, r0
 8006dbe:	6021      	streq	r1, [r4, #0]
 8006dc0:	e7ed      	b.n	8006d9e <_free_r+0x1e>
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	b10b      	cbz	r3, 8006dcc <_free_r+0x4c>
 8006dc8:	42a3      	cmp	r3, r4
 8006dca:	d9fa      	bls.n	8006dc2 <_free_r+0x42>
 8006dcc:	6811      	ldr	r1, [r2, #0]
 8006dce:	1850      	adds	r0, r2, r1
 8006dd0:	42a0      	cmp	r0, r4
 8006dd2:	d10b      	bne.n	8006dec <_free_r+0x6c>
 8006dd4:	6820      	ldr	r0, [r4, #0]
 8006dd6:	4401      	add	r1, r0
 8006dd8:	1850      	adds	r0, r2, r1
 8006dda:	4283      	cmp	r3, r0
 8006ddc:	6011      	str	r1, [r2, #0]
 8006dde:	d1e0      	bne.n	8006da2 <_free_r+0x22>
 8006de0:	6818      	ldr	r0, [r3, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	4408      	add	r0, r1
 8006de6:	6010      	str	r0, [r2, #0]
 8006de8:	6053      	str	r3, [r2, #4]
 8006dea:	e7da      	b.n	8006da2 <_free_r+0x22>
 8006dec:	d902      	bls.n	8006df4 <_free_r+0x74>
 8006dee:	230c      	movs	r3, #12
 8006df0:	602b      	str	r3, [r5, #0]
 8006df2:	e7d6      	b.n	8006da2 <_free_r+0x22>
 8006df4:	6820      	ldr	r0, [r4, #0]
 8006df6:	1821      	adds	r1, r4, r0
 8006df8:	428b      	cmp	r3, r1
 8006dfa:	bf01      	itttt	eq
 8006dfc:	6819      	ldreq	r1, [r3, #0]
 8006dfe:	685b      	ldreq	r3, [r3, #4]
 8006e00:	1809      	addeq	r1, r1, r0
 8006e02:	6021      	streq	r1, [r4, #0]
 8006e04:	6063      	str	r3, [r4, #4]
 8006e06:	6054      	str	r4, [r2, #4]
 8006e08:	e7cb      	b.n	8006da2 <_free_r+0x22>
 8006e0a:	bd38      	pop	{r3, r4, r5, pc}
 8006e0c:	20000588 	.word	0x20000588

08006e10 <malloc>:
 8006e10:	4b02      	ldr	r3, [pc, #8]	; (8006e1c <malloc+0xc>)
 8006e12:	4601      	mov	r1, r0
 8006e14:	6818      	ldr	r0, [r3, #0]
 8006e16:	f000 b823 	b.w	8006e60 <_malloc_r>
 8006e1a:	bf00      	nop
 8006e1c:	20000068 	.word	0x20000068

08006e20 <sbrk_aligned>:
 8006e20:	b570      	push	{r4, r5, r6, lr}
 8006e22:	4e0e      	ldr	r6, [pc, #56]	; (8006e5c <sbrk_aligned+0x3c>)
 8006e24:	460c      	mov	r4, r1
 8006e26:	6831      	ldr	r1, [r6, #0]
 8006e28:	4605      	mov	r5, r0
 8006e2a:	b911      	cbnz	r1, 8006e32 <sbrk_aligned+0x12>
 8006e2c:	f002 f99c 	bl	8009168 <_sbrk_r>
 8006e30:	6030      	str	r0, [r6, #0]
 8006e32:	4621      	mov	r1, r4
 8006e34:	4628      	mov	r0, r5
 8006e36:	f002 f997 	bl	8009168 <_sbrk_r>
 8006e3a:	1c43      	adds	r3, r0, #1
 8006e3c:	d00a      	beq.n	8006e54 <sbrk_aligned+0x34>
 8006e3e:	1cc4      	adds	r4, r0, #3
 8006e40:	f024 0403 	bic.w	r4, r4, #3
 8006e44:	42a0      	cmp	r0, r4
 8006e46:	d007      	beq.n	8006e58 <sbrk_aligned+0x38>
 8006e48:	1a21      	subs	r1, r4, r0
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	f002 f98c 	bl	8009168 <_sbrk_r>
 8006e50:	3001      	adds	r0, #1
 8006e52:	d101      	bne.n	8006e58 <sbrk_aligned+0x38>
 8006e54:	f04f 34ff 	mov.w	r4, #4294967295
 8006e58:	4620      	mov	r0, r4
 8006e5a:	bd70      	pop	{r4, r5, r6, pc}
 8006e5c:	2000058c 	.word	0x2000058c

08006e60 <_malloc_r>:
 8006e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e64:	1ccd      	adds	r5, r1, #3
 8006e66:	f025 0503 	bic.w	r5, r5, #3
 8006e6a:	3508      	adds	r5, #8
 8006e6c:	2d0c      	cmp	r5, #12
 8006e6e:	bf38      	it	cc
 8006e70:	250c      	movcc	r5, #12
 8006e72:	2d00      	cmp	r5, #0
 8006e74:	4607      	mov	r7, r0
 8006e76:	db01      	blt.n	8006e7c <_malloc_r+0x1c>
 8006e78:	42a9      	cmp	r1, r5
 8006e7a:	d905      	bls.n	8006e88 <_malloc_r+0x28>
 8006e7c:	230c      	movs	r3, #12
 8006e7e:	2600      	movs	r6, #0
 8006e80:	603b      	str	r3, [r7, #0]
 8006e82:	4630      	mov	r0, r6
 8006e84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006f5c <_malloc_r+0xfc>
 8006e8c:	f000 f868 	bl	8006f60 <__malloc_lock>
 8006e90:	f8d8 3000 	ldr.w	r3, [r8]
 8006e94:	461c      	mov	r4, r3
 8006e96:	bb5c      	cbnz	r4, 8006ef0 <_malloc_r+0x90>
 8006e98:	4629      	mov	r1, r5
 8006e9a:	4638      	mov	r0, r7
 8006e9c:	f7ff ffc0 	bl	8006e20 <sbrk_aligned>
 8006ea0:	1c43      	adds	r3, r0, #1
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	d155      	bne.n	8006f52 <_malloc_r+0xf2>
 8006ea6:	f8d8 4000 	ldr.w	r4, [r8]
 8006eaa:	4626      	mov	r6, r4
 8006eac:	2e00      	cmp	r6, #0
 8006eae:	d145      	bne.n	8006f3c <_malloc_r+0xdc>
 8006eb0:	2c00      	cmp	r4, #0
 8006eb2:	d048      	beq.n	8006f46 <_malloc_r+0xe6>
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	4631      	mov	r1, r6
 8006eb8:	4638      	mov	r0, r7
 8006eba:	eb04 0903 	add.w	r9, r4, r3
 8006ebe:	f002 f953 	bl	8009168 <_sbrk_r>
 8006ec2:	4581      	cmp	r9, r0
 8006ec4:	d13f      	bne.n	8006f46 <_malloc_r+0xe6>
 8006ec6:	6821      	ldr	r1, [r4, #0]
 8006ec8:	4638      	mov	r0, r7
 8006eca:	1a6d      	subs	r5, r5, r1
 8006ecc:	4629      	mov	r1, r5
 8006ece:	f7ff ffa7 	bl	8006e20 <sbrk_aligned>
 8006ed2:	3001      	adds	r0, #1
 8006ed4:	d037      	beq.n	8006f46 <_malloc_r+0xe6>
 8006ed6:	6823      	ldr	r3, [r4, #0]
 8006ed8:	442b      	add	r3, r5
 8006eda:	6023      	str	r3, [r4, #0]
 8006edc:	f8d8 3000 	ldr.w	r3, [r8]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d038      	beq.n	8006f56 <_malloc_r+0xf6>
 8006ee4:	685a      	ldr	r2, [r3, #4]
 8006ee6:	42a2      	cmp	r2, r4
 8006ee8:	d12b      	bne.n	8006f42 <_malloc_r+0xe2>
 8006eea:	2200      	movs	r2, #0
 8006eec:	605a      	str	r2, [r3, #4]
 8006eee:	e00f      	b.n	8006f10 <_malloc_r+0xb0>
 8006ef0:	6822      	ldr	r2, [r4, #0]
 8006ef2:	1b52      	subs	r2, r2, r5
 8006ef4:	d41f      	bmi.n	8006f36 <_malloc_r+0xd6>
 8006ef6:	2a0b      	cmp	r2, #11
 8006ef8:	d917      	bls.n	8006f2a <_malloc_r+0xca>
 8006efa:	1961      	adds	r1, r4, r5
 8006efc:	42a3      	cmp	r3, r4
 8006efe:	6025      	str	r5, [r4, #0]
 8006f00:	bf18      	it	ne
 8006f02:	6059      	strne	r1, [r3, #4]
 8006f04:	6863      	ldr	r3, [r4, #4]
 8006f06:	bf08      	it	eq
 8006f08:	f8c8 1000 	streq.w	r1, [r8]
 8006f0c:	5162      	str	r2, [r4, r5]
 8006f0e:	604b      	str	r3, [r1, #4]
 8006f10:	4638      	mov	r0, r7
 8006f12:	f104 060b 	add.w	r6, r4, #11
 8006f16:	f000 f829 	bl	8006f6c <__malloc_unlock>
 8006f1a:	f026 0607 	bic.w	r6, r6, #7
 8006f1e:	1d23      	adds	r3, r4, #4
 8006f20:	1af2      	subs	r2, r6, r3
 8006f22:	d0ae      	beq.n	8006e82 <_malloc_r+0x22>
 8006f24:	1b9b      	subs	r3, r3, r6
 8006f26:	50a3      	str	r3, [r4, r2]
 8006f28:	e7ab      	b.n	8006e82 <_malloc_r+0x22>
 8006f2a:	42a3      	cmp	r3, r4
 8006f2c:	6862      	ldr	r2, [r4, #4]
 8006f2e:	d1dd      	bne.n	8006eec <_malloc_r+0x8c>
 8006f30:	f8c8 2000 	str.w	r2, [r8]
 8006f34:	e7ec      	b.n	8006f10 <_malloc_r+0xb0>
 8006f36:	4623      	mov	r3, r4
 8006f38:	6864      	ldr	r4, [r4, #4]
 8006f3a:	e7ac      	b.n	8006e96 <_malloc_r+0x36>
 8006f3c:	4634      	mov	r4, r6
 8006f3e:	6876      	ldr	r6, [r6, #4]
 8006f40:	e7b4      	b.n	8006eac <_malloc_r+0x4c>
 8006f42:	4613      	mov	r3, r2
 8006f44:	e7cc      	b.n	8006ee0 <_malloc_r+0x80>
 8006f46:	230c      	movs	r3, #12
 8006f48:	4638      	mov	r0, r7
 8006f4a:	603b      	str	r3, [r7, #0]
 8006f4c:	f000 f80e 	bl	8006f6c <__malloc_unlock>
 8006f50:	e797      	b.n	8006e82 <_malloc_r+0x22>
 8006f52:	6025      	str	r5, [r4, #0]
 8006f54:	e7dc      	b.n	8006f10 <_malloc_r+0xb0>
 8006f56:	605b      	str	r3, [r3, #4]
 8006f58:	deff      	udf	#255	; 0xff
 8006f5a:	bf00      	nop
 8006f5c:	20000588 	.word	0x20000588

08006f60 <__malloc_lock>:
 8006f60:	4801      	ldr	r0, [pc, #4]	; (8006f68 <__malloc_lock+0x8>)
 8006f62:	f7ff b888 	b.w	8006076 <__retarget_lock_acquire_recursive>
 8006f66:	bf00      	nop
 8006f68:	20000584 	.word	0x20000584

08006f6c <__malloc_unlock>:
 8006f6c:	4801      	ldr	r0, [pc, #4]	; (8006f74 <__malloc_unlock+0x8>)
 8006f6e:	f7ff b883 	b.w	8006078 <__retarget_lock_release_recursive>
 8006f72:	bf00      	nop
 8006f74:	20000584 	.word	0x20000584

08006f78 <_Balloc>:
 8006f78:	b570      	push	{r4, r5, r6, lr}
 8006f7a:	69c6      	ldr	r6, [r0, #28]
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	460d      	mov	r5, r1
 8006f80:	b976      	cbnz	r6, 8006fa0 <_Balloc+0x28>
 8006f82:	2010      	movs	r0, #16
 8006f84:	f7ff ff44 	bl	8006e10 <malloc>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	61e0      	str	r0, [r4, #28]
 8006f8c:	b920      	cbnz	r0, 8006f98 <_Balloc+0x20>
 8006f8e:	216b      	movs	r1, #107	; 0x6b
 8006f90:	4b17      	ldr	r3, [pc, #92]	; (8006ff0 <_Balloc+0x78>)
 8006f92:	4818      	ldr	r0, [pc, #96]	; (8006ff4 <_Balloc+0x7c>)
 8006f94:	f002 f90c 	bl	80091b0 <__assert_func>
 8006f98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f9c:	6006      	str	r6, [r0, #0]
 8006f9e:	60c6      	str	r6, [r0, #12]
 8006fa0:	69e6      	ldr	r6, [r4, #28]
 8006fa2:	68f3      	ldr	r3, [r6, #12]
 8006fa4:	b183      	cbz	r3, 8006fc8 <_Balloc+0x50>
 8006fa6:	69e3      	ldr	r3, [r4, #28]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006fae:	b9b8      	cbnz	r0, 8006fe0 <_Balloc+0x68>
 8006fb0:	2101      	movs	r1, #1
 8006fb2:	fa01 f605 	lsl.w	r6, r1, r5
 8006fb6:	1d72      	adds	r2, r6, #5
 8006fb8:	4620      	mov	r0, r4
 8006fba:	0092      	lsls	r2, r2, #2
 8006fbc:	f002 f916 	bl	80091ec <_calloc_r>
 8006fc0:	b160      	cbz	r0, 8006fdc <_Balloc+0x64>
 8006fc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fc6:	e00e      	b.n	8006fe6 <_Balloc+0x6e>
 8006fc8:	2221      	movs	r2, #33	; 0x21
 8006fca:	2104      	movs	r1, #4
 8006fcc:	4620      	mov	r0, r4
 8006fce:	f002 f90d 	bl	80091ec <_calloc_r>
 8006fd2:	69e3      	ldr	r3, [r4, #28]
 8006fd4:	60f0      	str	r0, [r6, #12]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1e4      	bne.n	8006fa6 <_Balloc+0x2e>
 8006fdc:	2000      	movs	r0, #0
 8006fde:	bd70      	pop	{r4, r5, r6, pc}
 8006fe0:	6802      	ldr	r2, [r0, #0]
 8006fe2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fec:	e7f7      	b.n	8006fde <_Balloc+0x66>
 8006fee:	bf00      	nop
 8006ff0:	0800a082 	.word	0x0800a082
 8006ff4:	0800a102 	.word	0x0800a102

08006ff8 <_Bfree>:
 8006ff8:	b570      	push	{r4, r5, r6, lr}
 8006ffa:	69c6      	ldr	r6, [r0, #28]
 8006ffc:	4605      	mov	r5, r0
 8006ffe:	460c      	mov	r4, r1
 8007000:	b976      	cbnz	r6, 8007020 <_Bfree+0x28>
 8007002:	2010      	movs	r0, #16
 8007004:	f7ff ff04 	bl	8006e10 <malloc>
 8007008:	4602      	mov	r2, r0
 800700a:	61e8      	str	r0, [r5, #28]
 800700c:	b920      	cbnz	r0, 8007018 <_Bfree+0x20>
 800700e:	218f      	movs	r1, #143	; 0x8f
 8007010:	4b08      	ldr	r3, [pc, #32]	; (8007034 <_Bfree+0x3c>)
 8007012:	4809      	ldr	r0, [pc, #36]	; (8007038 <_Bfree+0x40>)
 8007014:	f002 f8cc 	bl	80091b0 <__assert_func>
 8007018:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800701c:	6006      	str	r6, [r0, #0]
 800701e:	60c6      	str	r6, [r0, #12]
 8007020:	b13c      	cbz	r4, 8007032 <_Bfree+0x3a>
 8007022:	69eb      	ldr	r3, [r5, #28]
 8007024:	6862      	ldr	r2, [r4, #4]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800702c:	6021      	str	r1, [r4, #0]
 800702e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007032:	bd70      	pop	{r4, r5, r6, pc}
 8007034:	0800a082 	.word	0x0800a082
 8007038:	0800a102 	.word	0x0800a102

0800703c <__multadd>:
 800703c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007040:	4607      	mov	r7, r0
 8007042:	460c      	mov	r4, r1
 8007044:	461e      	mov	r6, r3
 8007046:	2000      	movs	r0, #0
 8007048:	690d      	ldr	r5, [r1, #16]
 800704a:	f101 0c14 	add.w	ip, r1, #20
 800704e:	f8dc 3000 	ldr.w	r3, [ip]
 8007052:	3001      	adds	r0, #1
 8007054:	b299      	uxth	r1, r3
 8007056:	fb02 6101 	mla	r1, r2, r1, r6
 800705a:	0c1e      	lsrs	r6, r3, #16
 800705c:	0c0b      	lsrs	r3, r1, #16
 800705e:	fb02 3306 	mla	r3, r2, r6, r3
 8007062:	b289      	uxth	r1, r1
 8007064:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007068:	4285      	cmp	r5, r0
 800706a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800706e:	f84c 1b04 	str.w	r1, [ip], #4
 8007072:	dcec      	bgt.n	800704e <__multadd+0x12>
 8007074:	b30e      	cbz	r6, 80070ba <__multadd+0x7e>
 8007076:	68a3      	ldr	r3, [r4, #8]
 8007078:	42ab      	cmp	r3, r5
 800707a:	dc19      	bgt.n	80070b0 <__multadd+0x74>
 800707c:	6861      	ldr	r1, [r4, #4]
 800707e:	4638      	mov	r0, r7
 8007080:	3101      	adds	r1, #1
 8007082:	f7ff ff79 	bl	8006f78 <_Balloc>
 8007086:	4680      	mov	r8, r0
 8007088:	b928      	cbnz	r0, 8007096 <__multadd+0x5a>
 800708a:	4602      	mov	r2, r0
 800708c:	21ba      	movs	r1, #186	; 0xba
 800708e:	4b0c      	ldr	r3, [pc, #48]	; (80070c0 <__multadd+0x84>)
 8007090:	480c      	ldr	r0, [pc, #48]	; (80070c4 <__multadd+0x88>)
 8007092:	f002 f88d 	bl	80091b0 <__assert_func>
 8007096:	6922      	ldr	r2, [r4, #16]
 8007098:	f104 010c 	add.w	r1, r4, #12
 800709c:	3202      	adds	r2, #2
 800709e:	0092      	lsls	r2, r2, #2
 80070a0:	300c      	adds	r0, #12
 80070a2:	f002 f871 	bl	8009188 <memcpy>
 80070a6:	4621      	mov	r1, r4
 80070a8:	4638      	mov	r0, r7
 80070aa:	f7ff ffa5 	bl	8006ff8 <_Bfree>
 80070ae:	4644      	mov	r4, r8
 80070b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80070b4:	3501      	adds	r5, #1
 80070b6:	615e      	str	r6, [r3, #20]
 80070b8:	6125      	str	r5, [r4, #16]
 80070ba:	4620      	mov	r0, r4
 80070bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070c0:	0800a0f1 	.word	0x0800a0f1
 80070c4:	0800a102 	.word	0x0800a102

080070c8 <__s2b>:
 80070c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070cc:	4615      	mov	r5, r2
 80070ce:	2209      	movs	r2, #9
 80070d0:	461f      	mov	r7, r3
 80070d2:	3308      	adds	r3, #8
 80070d4:	460c      	mov	r4, r1
 80070d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80070da:	4606      	mov	r6, r0
 80070dc:	2201      	movs	r2, #1
 80070de:	2100      	movs	r1, #0
 80070e0:	429a      	cmp	r2, r3
 80070e2:	db09      	blt.n	80070f8 <__s2b+0x30>
 80070e4:	4630      	mov	r0, r6
 80070e6:	f7ff ff47 	bl	8006f78 <_Balloc>
 80070ea:	b940      	cbnz	r0, 80070fe <__s2b+0x36>
 80070ec:	4602      	mov	r2, r0
 80070ee:	21d3      	movs	r1, #211	; 0xd3
 80070f0:	4b18      	ldr	r3, [pc, #96]	; (8007154 <__s2b+0x8c>)
 80070f2:	4819      	ldr	r0, [pc, #100]	; (8007158 <__s2b+0x90>)
 80070f4:	f002 f85c 	bl	80091b0 <__assert_func>
 80070f8:	0052      	lsls	r2, r2, #1
 80070fa:	3101      	adds	r1, #1
 80070fc:	e7f0      	b.n	80070e0 <__s2b+0x18>
 80070fe:	9b08      	ldr	r3, [sp, #32]
 8007100:	2d09      	cmp	r5, #9
 8007102:	6143      	str	r3, [r0, #20]
 8007104:	f04f 0301 	mov.w	r3, #1
 8007108:	6103      	str	r3, [r0, #16]
 800710a:	dd16      	ble.n	800713a <__s2b+0x72>
 800710c:	f104 0909 	add.w	r9, r4, #9
 8007110:	46c8      	mov	r8, r9
 8007112:	442c      	add	r4, r5
 8007114:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007118:	4601      	mov	r1, r0
 800711a:	220a      	movs	r2, #10
 800711c:	4630      	mov	r0, r6
 800711e:	3b30      	subs	r3, #48	; 0x30
 8007120:	f7ff ff8c 	bl	800703c <__multadd>
 8007124:	45a0      	cmp	r8, r4
 8007126:	d1f5      	bne.n	8007114 <__s2b+0x4c>
 8007128:	f1a5 0408 	sub.w	r4, r5, #8
 800712c:	444c      	add	r4, r9
 800712e:	1b2d      	subs	r5, r5, r4
 8007130:	1963      	adds	r3, r4, r5
 8007132:	42bb      	cmp	r3, r7
 8007134:	db04      	blt.n	8007140 <__s2b+0x78>
 8007136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800713a:	2509      	movs	r5, #9
 800713c:	340a      	adds	r4, #10
 800713e:	e7f6      	b.n	800712e <__s2b+0x66>
 8007140:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007144:	4601      	mov	r1, r0
 8007146:	220a      	movs	r2, #10
 8007148:	4630      	mov	r0, r6
 800714a:	3b30      	subs	r3, #48	; 0x30
 800714c:	f7ff ff76 	bl	800703c <__multadd>
 8007150:	e7ee      	b.n	8007130 <__s2b+0x68>
 8007152:	bf00      	nop
 8007154:	0800a0f1 	.word	0x0800a0f1
 8007158:	0800a102 	.word	0x0800a102

0800715c <__hi0bits>:
 800715c:	0c02      	lsrs	r2, r0, #16
 800715e:	0412      	lsls	r2, r2, #16
 8007160:	4603      	mov	r3, r0
 8007162:	b9ca      	cbnz	r2, 8007198 <__hi0bits+0x3c>
 8007164:	0403      	lsls	r3, r0, #16
 8007166:	2010      	movs	r0, #16
 8007168:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800716c:	bf04      	itt	eq
 800716e:	021b      	lsleq	r3, r3, #8
 8007170:	3008      	addeq	r0, #8
 8007172:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007176:	bf04      	itt	eq
 8007178:	011b      	lsleq	r3, r3, #4
 800717a:	3004      	addeq	r0, #4
 800717c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007180:	bf04      	itt	eq
 8007182:	009b      	lsleq	r3, r3, #2
 8007184:	3002      	addeq	r0, #2
 8007186:	2b00      	cmp	r3, #0
 8007188:	db05      	blt.n	8007196 <__hi0bits+0x3a>
 800718a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800718e:	f100 0001 	add.w	r0, r0, #1
 8007192:	bf08      	it	eq
 8007194:	2020      	moveq	r0, #32
 8007196:	4770      	bx	lr
 8007198:	2000      	movs	r0, #0
 800719a:	e7e5      	b.n	8007168 <__hi0bits+0xc>

0800719c <__lo0bits>:
 800719c:	6803      	ldr	r3, [r0, #0]
 800719e:	4602      	mov	r2, r0
 80071a0:	f013 0007 	ands.w	r0, r3, #7
 80071a4:	d00b      	beq.n	80071be <__lo0bits+0x22>
 80071a6:	07d9      	lsls	r1, r3, #31
 80071a8:	d421      	bmi.n	80071ee <__lo0bits+0x52>
 80071aa:	0798      	lsls	r0, r3, #30
 80071ac:	bf49      	itett	mi
 80071ae:	085b      	lsrmi	r3, r3, #1
 80071b0:	089b      	lsrpl	r3, r3, #2
 80071b2:	2001      	movmi	r0, #1
 80071b4:	6013      	strmi	r3, [r2, #0]
 80071b6:	bf5c      	itt	pl
 80071b8:	2002      	movpl	r0, #2
 80071ba:	6013      	strpl	r3, [r2, #0]
 80071bc:	4770      	bx	lr
 80071be:	b299      	uxth	r1, r3
 80071c0:	b909      	cbnz	r1, 80071c6 <__lo0bits+0x2a>
 80071c2:	2010      	movs	r0, #16
 80071c4:	0c1b      	lsrs	r3, r3, #16
 80071c6:	b2d9      	uxtb	r1, r3
 80071c8:	b909      	cbnz	r1, 80071ce <__lo0bits+0x32>
 80071ca:	3008      	adds	r0, #8
 80071cc:	0a1b      	lsrs	r3, r3, #8
 80071ce:	0719      	lsls	r1, r3, #28
 80071d0:	bf04      	itt	eq
 80071d2:	091b      	lsreq	r3, r3, #4
 80071d4:	3004      	addeq	r0, #4
 80071d6:	0799      	lsls	r1, r3, #30
 80071d8:	bf04      	itt	eq
 80071da:	089b      	lsreq	r3, r3, #2
 80071dc:	3002      	addeq	r0, #2
 80071de:	07d9      	lsls	r1, r3, #31
 80071e0:	d403      	bmi.n	80071ea <__lo0bits+0x4e>
 80071e2:	085b      	lsrs	r3, r3, #1
 80071e4:	f100 0001 	add.w	r0, r0, #1
 80071e8:	d003      	beq.n	80071f2 <__lo0bits+0x56>
 80071ea:	6013      	str	r3, [r2, #0]
 80071ec:	4770      	bx	lr
 80071ee:	2000      	movs	r0, #0
 80071f0:	4770      	bx	lr
 80071f2:	2020      	movs	r0, #32
 80071f4:	4770      	bx	lr
	...

080071f8 <__i2b>:
 80071f8:	b510      	push	{r4, lr}
 80071fa:	460c      	mov	r4, r1
 80071fc:	2101      	movs	r1, #1
 80071fe:	f7ff febb 	bl	8006f78 <_Balloc>
 8007202:	4602      	mov	r2, r0
 8007204:	b928      	cbnz	r0, 8007212 <__i2b+0x1a>
 8007206:	f240 1145 	movw	r1, #325	; 0x145
 800720a:	4b04      	ldr	r3, [pc, #16]	; (800721c <__i2b+0x24>)
 800720c:	4804      	ldr	r0, [pc, #16]	; (8007220 <__i2b+0x28>)
 800720e:	f001 ffcf 	bl	80091b0 <__assert_func>
 8007212:	2301      	movs	r3, #1
 8007214:	6144      	str	r4, [r0, #20]
 8007216:	6103      	str	r3, [r0, #16]
 8007218:	bd10      	pop	{r4, pc}
 800721a:	bf00      	nop
 800721c:	0800a0f1 	.word	0x0800a0f1
 8007220:	0800a102 	.word	0x0800a102

08007224 <__multiply>:
 8007224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007228:	4691      	mov	r9, r2
 800722a:	690a      	ldr	r2, [r1, #16]
 800722c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007230:	460c      	mov	r4, r1
 8007232:	429a      	cmp	r2, r3
 8007234:	bfbe      	ittt	lt
 8007236:	460b      	movlt	r3, r1
 8007238:	464c      	movlt	r4, r9
 800723a:	4699      	movlt	r9, r3
 800723c:	6927      	ldr	r7, [r4, #16]
 800723e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007242:	68a3      	ldr	r3, [r4, #8]
 8007244:	6861      	ldr	r1, [r4, #4]
 8007246:	eb07 060a 	add.w	r6, r7, sl
 800724a:	42b3      	cmp	r3, r6
 800724c:	b085      	sub	sp, #20
 800724e:	bfb8      	it	lt
 8007250:	3101      	addlt	r1, #1
 8007252:	f7ff fe91 	bl	8006f78 <_Balloc>
 8007256:	b930      	cbnz	r0, 8007266 <__multiply+0x42>
 8007258:	4602      	mov	r2, r0
 800725a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800725e:	4b43      	ldr	r3, [pc, #268]	; (800736c <__multiply+0x148>)
 8007260:	4843      	ldr	r0, [pc, #268]	; (8007370 <__multiply+0x14c>)
 8007262:	f001 ffa5 	bl	80091b0 <__assert_func>
 8007266:	f100 0514 	add.w	r5, r0, #20
 800726a:	462b      	mov	r3, r5
 800726c:	2200      	movs	r2, #0
 800726e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007272:	4543      	cmp	r3, r8
 8007274:	d321      	bcc.n	80072ba <__multiply+0x96>
 8007276:	f104 0314 	add.w	r3, r4, #20
 800727a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800727e:	f109 0314 	add.w	r3, r9, #20
 8007282:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007286:	9202      	str	r2, [sp, #8]
 8007288:	1b3a      	subs	r2, r7, r4
 800728a:	3a15      	subs	r2, #21
 800728c:	f022 0203 	bic.w	r2, r2, #3
 8007290:	3204      	adds	r2, #4
 8007292:	f104 0115 	add.w	r1, r4, #21
 8007296:	428f      	cmp	r7, r1
 8007298:	bf38      	it	cc
 800729a:	2204      	movcc	r2, #4
 800729c:	9201      	str	r2, [sp, #4]
 800729e:	9a02      	ldr	r2, [sp, #8]
 80072a0:	9303      	str	r3, [sp, #12]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d80c      	bhi.n	80072c0 <__multiply+0x9c>
 80072a6:	2e00      	cmp	r6, #0
 80072a8:	dd03      	ble.n	80072b2 <__multiply+0x8e>
 80072aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d05a      	beq.n	8007368 <__multiply+0x144>
 80072b2:	6106      	str	r6, [r0, #16]
 80072b4:	b005      	add	sp, #20
 80072b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ba:	f843 2b04 	str.w	r2, [r3], #4
 80072be:	e7d8      	b.n	8007272 <__multiply+0x4e>
 80072c0:	f8b3 a000 	ldrh.w	sl, [r3]
 80072c4:	f1ba 0f00 	cmp.w	sl, #0
 80072c8:	d023      	beq.n	8007312 <__multiply+0xee>
 80072ca:	46a9      	mov	r9, r5
 80072cc:	f04f 0c00 	mov.w	ip, #0
 80072d0:	f104 0e14 	add.w	lr, r4, #20
 80072d4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80072d8:	f8d9 1000 	ldr.w	r1, [r9]
 80072dc:	fa1f fb82 	uxth.w	fp, r2
 80072e0:	b289      	uxth	r1, r1
 80072e2:	fb0a 110b 	mla	r1, sl, fp, r1
 80072e6:	4461      	add	r1, ip
 80072e8:	f8d9 c000 	ldr.w	ip, [r9]
 80072ec:	0c12      	lsrs	r2, r2, #16
 80072ee:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80072f2:	fb0a c202 	mla	r2, sl, r2, ip
 80072f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80072fa:	b289      	uxth	r1, r1
 80072fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007300:	4577      	cmp	r7, lr
 8007302:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007306:	f849 1b04 	str.w	r1, [r9], #4
 800730a:	d8e3      	bhi.n	80072d4 <__multiply+0xb0>
 800730c:	9a01      	ldr	r2, [sp, #4]
 800730e:	f845 c002 	str.w	ip, [r5, r2]
 8007312:	9a03      	ldr	r2, [sp, #12]
 8007314:	3304      	adds	r3, #4
 8007316:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800731a:	f1b9 0f00 	cmp.w	r9, #0
 800731e:	d021      	beq.n	8007364 <__multiply+0x140>
 8007320:	46ae      	mov	lr, r5
 8007322:	f04f 0a00 	mov.w	sl, #0
 8007326:	6829      	ldr	r1, [r5, #0]
 8007328:	f104 0c14 	add.w	ip, r4, #20
 800732c:	f8bc b000 	ldrh.w	fp, [ip]
 8007330:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007334:	b289      	uxth	r1, r1
 8007336:	fb09 220b 	mla	r2, r9, fp, r2
 800733a:	4452      	add	r2, sl
 800733c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007340:	f84e 1b04 	str.w	r1, [lr], #4
 8007344:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007348:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800734c:	f8be 1000 	ldrh.w	r1, [lr]
 8007350:	4567      	cmp	r7, ip
 8007352:	fb09 110a 	mla	r1, r9, sl, r1
 8007356:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800735a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800735e:	d8e5      	bhi.n	800732c <__multiply+0x108>
 8007360:	9a01      	ldr	r2, [sp, #4]
 8007362:	50a9      	str	r1, [r5, r2]
 8007364:	3504      	adds	r5, #4
 8007366:	e79a      	b.n	800729e <__multiply+0x7a>
 8007368:	3e01      	subs	r6, #1
 800736a:	e79c      	b.n	80072a6 <__multiply+0x82>
 800736c:	0800a0f1 	.word	0x0800a0f1
 8007370:	0800a102 	.word	0x0800a102

08007374 <__pow5mult>:
 8007374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007378:	4615      	mov	r5, r2
 800737a:	f012 0203 	ands.w	r2, r2, #3
 800737e:	4606      	mov	r6, r0
 8007380:	460f      	mov	r7, r1
 8007382:	d007      	beq.n	8007394 <__pow5mult+0x20>
 8007384:	4c25      	ldr	r4, [pc, #148]	; (800741c <__pow5mult+0xa8>)
 8007386:	3a01      	subs	r2, #1
 8007388:	2300      	movs	r3, #0
 800738a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800738e:	f7ff fe55 	bl	800703c <__multadd>
 8007392:	4607      	mov	r7, r0
 8007394:	10ad      	asrs	r5, r5, #2
 8007396:	d03d      	beq.n	8007414 <__pow5mult+0xa0>
 8007398:	69f4      	ldr	r4, [r6, #28]
 800739a:	b97c      	cbnz	r4, 80073bc <__pow5mult+0x48>
 800739c:	2010      	movs	r0, #16
 800739e:	f7ff fd37 	bl	8006e10 <malloc>
 80073a2:	4602      	mov	r2, r0
 80073a4:	61f0      	str	r0, [r6, #28]
 80073a6:	b928      	cbnz	r0, 80073b4 <__pow5mult+0x40>
 80073a8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80073ac:	4b1c      	ldr	r3, [pc, #112]	; (8007420 <__pow5mult+0xac>)
 80073ae:	481d      	ldr	r0, [pc, #116]	; (8007424 <__pow5mult+0xb0>)
 80073b0:	f001 fefe 	bl	80091b0 <__assert_func>
 80073b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80073b8:	6004      	str	r4, [r0, #0]
 80073ba:	60c4      	str	r4, [r0, #12]
 80073bc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80073c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80073c4:	b94c      	cbnz	r4, 80073da <__pow5mult+0x66>
 80073c6:	f240 2171 	movw	r1, #625	; 0x271
 80073ca:	4630      	mov	r0, r6
 80073cc:	f7ff ff14 	bl	80071f8 <__i2b>
 80073d0:	2300      	movs	r3, #0
 80073d2:	4604      	mov	r4, r0
 80073d4:	f8c8 0008 	str.w	r0, [r8, #8]
 80073d8:	6003      	str	r3, [r0, #0]
 80073da:	f04f 0900 	mov.w	r9, #0
 80073de:	07eb      	lsls	r3, r5, #31
 80073e0:	d50a      	bpl.n	80073f8 <__pow5mult+0x84>
 80073e2:	4639      	mov	r1, r7
 80073e4:	4622      	mov	r2, r4
 80073e6:	4630      	mov	r0, r6
 80073e8:	f7ff ff1c 	bl	8007224 <__multiply>
 80073ec:	4680      	mov	r8, r0
 80073ee:	4639      	mov	r1, r7
 80073f0:	4630      	mov	r0, r6
 80073f2:	f7ff fe01 	bl	8006ff8 <_Bfree>
 80073f6:	4647      	mov	r7, r8
 80073f8:	106d      	asrs	r5, r5, #1
 80073fa:	d00b      	beq.n	8007414 <__pow5mult+0xa0>
 80073fc:	6820      	ldr	r0, [r4, #0]
 80073fe:	b938      	cbnz	r0, 8007410 <__pow5mult+0x9c>
 8007400:	4622      	mov	r2, r4
 8007402:	4621      	mov	r1, r4
 8007404:	4630      	mov	r0, r6
 8007406:	f7ff ff0d 	bl	8007224 <__multiply>
 800740a:	6020      	str	r0, [r4, #0]
 800740c:	f8c0 9000 	str.w	r9, [r0]
 8007410:	4604      	mov	r4, r0
 8007412:	e7e4      	b.n	80073de <__pow5mult+0x6a>
 8007414:	4638      	mov	r0, r7
 8007416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800741a:	bf00      	nop
 800741c:	0800a250 	.word	0x0800a250
 8007420:	0800a082 	.word	0x0800a082
 8007424:	0800a102 	.word	0x0800a102

08007428 <__lshift>:
 8007428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800742c:	460c      	mov	r4, r1
 800742e:	4607      	mov	r7, r0
 8007430:	4691      	mov	r9, r2
 8007432:	6923      	ldr	r3, [r4, #16]
 8007434:	6849      	ldr	r1, [r1, #4]
 8007436:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800743a:	68a3      	ldr	r3, [r4, #8]
 800743c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007440:	f108 0601 	add.w	r6, r8, #1
 8007444:	42b3      	cmp	r3, r6
 8007446:	db0b      	blt.n	8007460 <__lshift+0x38>
 8007448:	4638      	mov	r0, r7
 800744a:	f7ff fd95 	bl	8006f78 <_Balloc>
 800744e:	4605      	mov	r5, r0
 8007450:	b948      	cbnz	r0, 8007466 <__lshift+0x3e>
 8007452:	4602      	mov	r2, r0
 8007454:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007458:	4b27      	ldr	r3, [pc, #156]	; (80074f8 <__lshift+0xd0>)
 800745a:	4828      	ldr	r0, [pc, #160]	; (80074fc <__lshift+0xd4>)
 800745c:	f001 fea8 	bl	80091b0 <__assert_func>
 8007460:	3101      	adds	r1, #1
 8007462:	005b      	lsls	r3, r3, #1
 8007464:	e7ee      	b.n	8007444 <__lshift+0x1c>
 8007466:	2300      	movs	r3, #0
 8007468:	f100 0114 	add.w	r1, r0, #20
 800746c:	f100 0210 	add.w	r2, r0, #16
 8007470:	4618      	mov	r0, r3
 8007472:	4553      	cmp	r3, sl
 8007474:	db33      	blt.n	80074de <__lshift+0xb6>
 8007476:	6920      	ldr	r0, [r4, #16]
 8007478:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800747c:	f104 0314 	add.w	r3, r4, #20
 8007480:	f019 091f 	ands.w	r9, r9, #31
 8007484:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007488:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800748c:	d02b      	beq.n	80074e6 <__lshift+0xbe>
 800748e:	468a      	mov	sl, r1
 8007490:	2200      	movs	r2, #0
 8007492:	f1c9 0e20 	rsb	lr, r9, #32
 8007496:	6818      	ldr	r0, [r3, #0]
 8007498:	fa00 f009 	lsl.w	r0, r0, r9
 800749c:	4310      	orrs	r0, r2
 800749e:	f84a 0b04 	str.w	r0, [sl], #4
 80074a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80074a6:	459c      	cmp	ip, r3
 80074a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80074ac:	d8f3      	bhi.n	8007496 <__lshift+0x6e>
 80074ae:	ebac 0304 	sub.w	r3, ip, r4
 80074b2:	3b15      	subs	r3, #21
 80074b4:	f023 0303 	bic.w	r3, r3, #3
 80074b8:	3304      	adds	r3, #4
 80074ba:	f104 0015 	add.w	r0, r4, #21
 80074be:	4584      	cmp	ip, r0
 80074c0:	bf38      	it	cc
 80074c2:	2304      	movcc	r3, #4
 80074c4:	50ca      	str	r2, [r1, r3]
 80074c6:	b10a      	cbz	r2, 80074cc <__lshift+0xa4>
 80074c8:	f108 0602 	add.w	r6, r8, #2
 80074cc:	3e01      	subs	r6, #1
 80074ce:	4638      	mov	r0, r7
 80074d0:	4621      	mov	r1, r4
 80074d2:	612e      	str	r6, [r5, #16]
 80074d4:	f7ff fd90 	bl	8006ff8 <_Bfree>
 80074d8:	4628      	mov	r0, r5
 80074da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074de:	f842 0f04 	str.w	r0, [r2, #4]!
 80074e2:	3301      	adds	r3, #1
 80074e4:	e7c5      	b.n	8007472 <__lshift+0x4a>
 80074e6:	3904      	subs	r1, #4
 80074e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80074ec:	459c      	cmp	ip, r3
 80074ee:	f841 2f04 	str.w	r2, [r1, #4]!
 80074f2:	d8f9      	bhi.n	80074e8 <__lshift+0xc0>
 80074f4:	e7ea      	b.n	80074cc <__lshift+0xa4>
 80074f6:	bf00      	nop
 80074f8:	0800a0f1 	.word	0x0800a0f1
 80074fc:	0800a102 	.word	0x0800a102

08007500 <__mcmp>:
 8007500:	4603      	mov	r3, r0
 8007502:	690a      	ldr	r2, [r1, #16]
 8007504:	6900      	ldr	r0, [r0, #16]
 8007506:	b530      	push	{r4, r5, lr}
 8007508:	1a80      	subs	r0, r0, r2
 800750a:	d10d      	bne.n	8007528 <__mcmp+0x28>
 800750c:	3314      	adds	r3, #20
 800750e:	3114      	adds	r1, #20
 8007510:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007514:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007518:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800751c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007520:	4295      	cmp	r5, r2
 8007522:	d002      	beq.n	800752a <__mcmp+0x2a>
 8007524:	d304      	bcc.n	8007530 <__mcmp+0x30>
 8007526:	2001      	movs	r0, #1
 8007528:	bd30      	pop	{r4, r5, pc}
 800752a:	42a3      	cmp	r3, r4
 800752c:	d3f4      	bcc.n	8007518 <__mcmp+0x18>
 800752e:	e7fb      	b.n	8007528 <__mcmp+0x28>
 8007530:	f04f 30ff 	mov.w	r0, #4294967295
 8007534:	e7f8      	b.n	8007528 <__mcmp+0x28>
	...

08007538 <__mdiff>:
 8007538:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800753c:	460d      	mov	r5, r1
 800753e:	4607      	mov	r7, r0
 8007540:	4611      	mov	r1, r2
 8007542:	4628      	mov	r0, r5
 8007544:	4614      	mov	r4, r2
 8007546:	f7ff ffdb 	bl	8007500 <__mcmp>
 800754a:	1e06      	subs	r6, r0, #0
 800754c:	d111      	bne.n	8007572 <__mdiff+0x3a>
 800754e:	4631      	mov	r1, r6
 8007550:	4638      	mov	r0, r7
 8007552:	f7ff fd11 	bl	8006f78 <_Balloc>
 8007556:	4602      	mov	r2, r0
 8007558:	b928      	cbnz	r0, 8007566 <__mdiff+0x2e>
 800755a:	f240 2137 	movw	r1, #567	; 0x237
 800755e:	4b3a      	ldr	r3, [pc, #232]	; (8007648 <__mdiff+0x110>)
 8007560:	483a      	ldr	r0, [pc, #232]	; (800764c <__mdiff+0x114>)
 8007562:	f001 fe25 	bl	80091b0 <__assert_func>
 8007566:	2301      	movs	r3, #1
 8007568:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800756c:	4610      	mov	r0, r2
 800756e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007572:	bfa4      	itt	ge
 8007574:	4623      	movge	r3, r4
 8007576:	462c      	movge	r4, r5
 8007578:	4638      	mov	r0, r7
 800757a:	6861      	ldr	r1, [r4, #4]
 800757c:	bfa6      	itte	ge
 800757e:	461d      	movge	r5, r3
 8007580:	2600      	movge	r6, #0
 8007582:	2601      	movlt	r6, #1
 8007584:	f7ff fcf8 	bl	8006f78 <_Balloc>
 8007588:	4602      	mov	r2, r0
 800758a:	b918      	cbnz	r0, 8007594 <__mdiff+0x5c>
 800758c:	f240 2145 	movw	r1, #581	; 0x245
 8007590:	4b2d      	ldr	r3, [pc, #180]	; (8007648 <__mdiff+0x110>)
 8007592:	e7e5      	b.n	8007560 <__mdiff+0x28>
 8007594:	f102 0814 	add.w	r8, r2, #20
 8007598:	46c2      	mov	sl, r8
 800759a:	f04f 0c00 	mov.w	ip, #0
 800759e:	6927      	ldr	r7, [r4, #16]
 80075a0:	60c6      	str	r6, [r0, #12]
 80075a2:	692e      	ldr	r6, [r5, #16]
 80075a4:	f104 0014 	add.w	r0, r4, #20
 80075a8:	f105 0914 	add.w	r9, r5, #20
 80075ac:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80075b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80075b4:	3410      	adds	r4, #16
 80075b6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80075ba:	f859 3b04 	ldr.w	r3, [r9], #4
 80075be:	fa1f f18b 	uxth.w	r1, fp
 80075c2:	4461      	add	r1, ip
 80075c4:	fa1f fc83 	uxth.w	ip, r3
 80075c8:	0c1b      	lsrs	r3, r3, #16
 80075ca:	eba1 010c 	sub.w	r1, r1, ip
 80075ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80075d2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80075d6:	b289      	uxth	r1, r1
 80075d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80075dc:	454e      	cmp	r6, r9
 80075de:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80075e2:	f84a 1b04 	str.w	r1, [sl], #4
 80075e6:	d8e6      	bhi.n	80075b6 <__mdiff+0x7e>
 80075e8:	1b73      	subs	r3, r6, r5
 80075ea:	3b15      	subs	r3, #21
 80075ec:	f023 0303 	bic.w	r3, r3, #3
 80075f0:	3515      	adds	r5, #21
 80075f2:	3304      	adds	r3, #4
 80075f4:	42ae      	cmp	r6, r5
 80075f6:	bf38      	it	cc
 80075f8:	2304      	movcc	r3, #4
 80075fa:	4418      	add	r0, r3
 80075fc:	4443      	add	r3, r8
 80075fe:	461e      	mov	r6, r3
 8007600:	4605      	mov	r5, r0
 8007602:	4575      	cmp	r5, lr
 8007604:	d30e      	bcc.n	8007624 <__mdiff+0xec>
 8007606:	f10e 0103 	add.w	r1, lr, #3
 800760a:	1a09      	subs	r1, r1, r0
 800760c:	f021 0103 	bic.w	r1, r1, #3
 8007610:	3803      	subs	r0, #3
 8007612:	4586      	cmp	lr, r0
 8007614:	bf38      	it	cc
 8007616:	2100      	movcc	r1, #0
 8007618:	440b      	add	r3, r1
 800761a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800761e:	b189      	cbz	r1, 8007644 <__mdiff+0x10c>
 8007620:	6117      	str	r7, [r2, #16]
 8007622:	e7a3      	b.n	800756c <__mdiff+0x34>
 8007624:	f855 8b04 	ldr.w	r8, [r5], #4
 8007628:	fa1f f188 	uxth.w	r1, r8
 800762c:	4461      	add	r1, ip
 800762e:	140c      	asrs	r4, r1, #16
 8007630:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007634:	b289      	uxth	r1, r1
 8007636:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800763a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800763e:	f846 1b04 	str.w	r1, [r6], #4
 8007642:	e7de      	b.n	8007602 <__mdiff+0xca>
 8007644:	3f01      	subs	r7, #1
 8007646:	e7e8      	b.n	800761a <__mdiff+0xe2>
 8007648:	0800a0f1 	.word	0x0800a0f1
 800764c:	0800a102 	.word	0x0800a102

08007650 <__ulp>:
 8007650:	4b0e      	ldr	r3, [pc, #56]	; (800768c <__ulp+0x3c>)
 8007652:	400b      	ands	r3, r1
 8007654:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007658:	2b00      	cmp	r3, #0
 800765a:	dc08      	bgt.n	800766e <__ulp+0x1e>
 800765c:	425b      	negs	r3, r3
 800765e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007662:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007666:	da04      	bge.n	8007672 <__ulp+0x22>
 8007668:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800766c:	4113      	asrs	r3, r2
 800766e:	2200      	movs	r2, #0
 8007670:	e008      	b.n	8007684 <__ulp+0x34>
 8007672:	f1a2 0314 	sub.w	r3, r2, #20
 8007676:	2b1e      	cmp	r3, #30
 8007678:	bfd6      	itet	le
 800767a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800767e:	2201      	movgt	r2, #1
 8007680:	40da      	lsrle	r2, r3
 8007682:	2300      	movs	r3, #0
 8007684:	4619      	mov	r1, r3
 8007686:	4610      	mov	r0, r2
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	7ff00000 	.word	0x7ff00000

08007690 <__b2d>:
 8007690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007692:	6905      	ldr	r5, [r0, #16]
 8007694:	f100 0714 	add.w	r7, r0, #20
 8007698:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800769c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80076a0:	1f2e      	subs	r6, r5, #4
 80076a2:	4620      	mov	r0, r4
 80076a4:	f7ff fd5a 	bl	800715c <__hi0bits>
 80076a8:	f1c0 0220 	rsb	r2, r0, #32
 80076ac:	280a      	cmp	r0, #10
 80076ae:	4603      	mov	r3, r0
 80076b0:	f8df c068 	ldr.w	ip, [pc, #104]	; 800771c <__b2d+0x8c>
 80076b4:	600a      	str	r2, [r1, #0]
 80076b6:	dc12      	bgt.n	80076de <__b2d+0x4e>
 80076b8:	f1c0 0e0b 	rsb	lr, r0, #11
 80076bc:	fa24 f20e 	lsr.w	r2, r4, lr
 80076c0:	42b7      	cmp	r7, r6
 80076c2:	ea42 010c 	orr.w	r1, r2, ip
 80076c6:	bf2c      	ite	cs
 80076c8:	2200      	movcs	r2, #0
 80076ca:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80076ce:	3315      	adds	r3, #21
 80076d0:	fa04 f303 	lsl.w	r3, r4, r3
 80076d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80076d8:	431a      	orrs	r2, r3
 80076da:	4610      	mov	r0, r2
 80076dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076de:	42b7      	cmp	r7, r6
 80076e0:	bf2e      	itee	cs
 80076e2:	2200      	movcs	r2, #0
 80076e4:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80076e8:	f1a5 0608 	subcc.w	r6, r5, #8
 80076ec:	3b0b      	subs	r3, #11
 80076ee:	d012      	beq.n	8007716 <__b2d+0x86>
 80076f0:	f1c3 0520 	rsb	r5, r3, #32
 80076f4:	fa22 f105 	lsr.w	r1, r2, r5
 80076f8:	409c      	lsls	r4, r3
 80076fa:	430c      	orrs	r4, r1
 80076fc:	42be      	cmp	r6, r7
 80076fe:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8007702:	bf94      	ite	ls
 8007704:	2400      	movls	r4, #0
 8007706:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800770a:	409a      	lsls	r2, r3
 800770c:	40ec      	lsrs	r4, r5
 800770e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007712:	4322      	orrs	r2, r4
 8007714:	e7e1      	b.n	80076da <__b2d+0x4a>
 8007716:	ea44 010c 	orr.w	r1, r4, ip
 800771a:	e7de      	b.n	80076da <__b2d+0x4a>
 800771c:	3ff00000 	.word	0x3ff00000

08007720 <__d2b>:
 8007720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007722:	2101      	movs	r1, #1
 8007724:	4617      	mov	r7, r2
 8007726:	461c      	mov	r4, r3
 8007728:	9e08      	ldr	r6, [sp, #32]
 800772a:	f7ff fc25 	bl	8006f78 <_Balloc>
 800772e:	4605      	mov	r5, r0
 8007730:	b930      	cbnz	r0, 8007740 <__d2b+0x20>
 8007732:	4602      	mov	r2, r0
 8007734:	f240 310f 	movw	r1, #783	; 0x30f
 8007738:	4b22      	ldr	r3, [pc, #136]	; (80077c4 <__d2b+0xa4>)
 800773a:	4823      	ldr	r0, [pc, #140]	; (80077c8 <__d2b+0xa8>)
 800773c:	f001 fd38 	bl	80091b0 <__assert_func>
 8007740:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007744:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007748:	bb24      	cbnz	r4, 8007794 <__d2b+0x74>
 800774a:	2f00      	cmp	r7, #0
 800774c:	9301      	str	r3, [sp, #4]
 800774e:	d026      	beq.n	800779e <__d2b+0x7e>
 8007750:	4668      	mov	r0, sp
 8007752:	9700      	str	r7, [sp, #0]
 8007754:	f7ff fd22 	bl	800719c <__lo0bits>
 8007758:	e9dd 1200 	ldrd	r1, r2, [sp]
 800775c:	b1e8      	cbz	r0, 800779a <__d2b+0x7a>
 800775e:	f1c0 0320 	rsb	r3, r0, #32
 8007762:	fa02 f303 	lsl.w	r3, r2, r3
 8007766:	430b      	orrs	r3, r1
 8007768:	40c2      	lsrs	r2, r0
 800776a:	616b      	str	r3, [r5, #20]
 800776c:	9201      	str	r2, [sp, #4]
 800776e:	9b01      	ldr	r3, [sp, #4]
 8007770:	2b00      	cmp	r3, #0
 8007772:	bf14      	ite	ne
 8007774:	2102      	movne	r1, #2
 8007776:	2101      	moveq	r1, #1
 8007778:	61ab      	str	r3, [r5, #24]
 800777a:	6129      	str	r1, [r5, #16]
 800777c:	b1bc      	cbz	r4, 80077ae <__d2b+0x8e>
 800777e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007782:	4404      	add	r4, r0
 8007784:	6034      	str	r4, [r6, #0]
 8007786:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800778a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800778c:	6018      	str	r0, [r3, #0]
 800778e:	4628      	mov	r0, r5
 8007790:	b003      	add	sp, #12
 8007792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007794:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007798:	e7d7      	b.n	800774a <__d2b+0x2a>
 800779a:	6169      	str	r1, [r5, #20]
 800779c:	e7e7      	b.n	800776e <__d2b+0x4e>
 800779e:	a801      	add	r0, sp, #4
 80077a0:	f7ff fcfc 	bl	800719c <__lo0bits>
 80077a4:	9b01      	ldr	r3, [sp, #4]
 80077a6:	2101      	movs	r1, #1
 80077a8:	616b      	str	r3, [r5, #20]
 80077aa:	3020      	adds	r0, #32
 80077ac:	e7e5      	b.n	800777a <__d2b+0x5a>
 80077ae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80077b2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80077b6:	6030      	str	r0, [r6, #0]
 80077b8:	6918      	ldr	r0, [r3, #16]
 80077ba:	f7ff fccf 	bl	800715c <__hi0bits>
 80077be:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80077c2:	e7e2      	b.n	800778a <__d2b+0x6a>
 80077c4:	0800a0f1 	.word	0x0800a0f1
 80077c8:	0800a102 	.word	0x0800a102

080077cc <__ratio>:
 80077cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d0:	4688      	mov	r8, r1
 80077d2:	4669      	mov	r1, sp
 80077d4:	4681      	mov	r9, r0
 80077d6:	f7ff ff5b 	bl	8007690 <__b2d>
 80077da:	460f      	mov	r7, r1
 80077dc:	4604      	mov	r4, r0
 80077de:	460d      	mov	r5, r1
 80077e0:	4640      	mov	r0, r8
 80077e2:	a901      	add	r1, sp, #4
 80077e4:	f7ff ff54 	bl	8007690 <__b2d>
 80077e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80077ec:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80077f0:	468b      	mov	fp, r1
 80077f2:	eba3 0c02 	sub.w	ip, r3, r2
 80077f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80077fa:	1a9b      	subs	r3, r3, r2
 80077fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007800:	2b00      	cmp	r3, #0
 8007802:	bfd5      	itete	le
 8007804:	460a      	movle	r2, r1
 8007806:	462a      	movgt	r2, r5
 8007808:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800780c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007810:	bfd8      	it	le
 8007812:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007816:	465b      	mov	r3, fp
 8007818:	4602      	mov	r2, r0
 800781a:	4639      	mov	r1, r7
 800781c:	4620      	mov	r0, r4
 800781e:	f7f8 ff85 	bl	800072c <__aeabi_ddiv>
 8007822:	b003      	add	sp, #12
 8007824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007828 <__copybits>:
 8007828:	3901      	subs	r1, #1
 800782a:	b570      	push	{r4, r5, r6, lr}
 800782c:	1149      	asrs	r1, r1, #5
 800782e:	6914      	ldr	r4, [r2, #16]
 8007830:	3101      	adds	r1, #1
 8007832:	f102 0314 	add.w	r3, r2, #20
 8007836:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800783a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800783e:	1f05      	subs	r5, r0, #4
 8007840:	42a3      	cmp	r3, r4
 8007842:	d30c      	bcc.n	800785e <__copybits+0x36>
 8007844:	1aa3      	subs	r3, r4, r2
 8007846:	3b11      	subs	r3, #17
 8007848:	f023 0303 	bic.w	r3, r3, #3
 800784c:	3211      	adds	r2, #17
 800784e:	42a2      	cmp	r2, r4
 8007850:	bf88      	it	hi
 8007852:	2300      	movhi	r3, #0
 8007854:	4418      	add	r0, r3
 8007856:	2300      	movs	r3, #0
 8007858:	4288      	cmp	r0, r1
 800785a:	d305      	bcc.n	8007868 <__copybits+0x40>
 800785c:	bd70      	pop	{r4, r5, r6, pc}
 800785e:	f853 6b04 	ldr.w	r6, [r3], #4
 8007862:	f845 6f04 	str.w	r6, [r5, #4]!
 8007866:	e7eb      	b.n	8007840 <__copybits+0x18>
 8007868:	f840 3b04 	str.w	r3, [r0], #4
 800786c:	e7f4      	b.n	8007858 <__copybits+0x30>

0800786e <__any_on>:
 800786e:	f100 0214 	add.w	r2, r0, #20
 8007872:	6900      	ldr	r0, [r0, #16]
 8007874:	114b      	asrs	r3, r1, #5
 8007876:	4298      	cmp	r0, r3
 8007878:	b510      	push	{r4, lr}
 800787a:	db11      	blt.n	80078a0 <__any_on+0x32>
 800787c:	dd0a      	ble.n	8007894 <__any_on+0x26>
 800787e:	f011 011f 	ands.w	r1, r1, #31
 8007882:	d007      	beq.n	8007894 <__any_on+0x26>
 8007884:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007888:	fa24 f001 	lsr.w	r0, r4, r1
 800788c:	fa00 f101 	lsl.w	r1, r0, r1
 8007890:	428c      	cmp	r4, r1
 8007892:	d10b      	bne.n	80078ac <__any_on+0x3e>
 8007894:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007898:	4293      	cmp	r3, r2
 800789a:	d803      	bhi.n	80078a4 <__any_on+0x36>
 800789c:	2000      	movs	r0, #0
 800789e:	bd10      	pop	{r4, pc}
 80078a0:	4603      	mov	r3, r0
 80078a2:	e7f7      	b.n	8007894 <__any_on+0x26>
 80078a4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80078a8:	2900      	cmp	r1, #0
 80078aa:	d0f5      	beq.n	8007898 <__any_on+0x2a>
 80078ac:	2001      	movs	r0, #1
 80078ae:	e7f6      	b.n	800789e <__any_on+0x30>

080078b0 <sulp>:
 80078b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078b4:	460f      	mov	r7, r1
 80078b6:	4690      	mov	r8, r2
 80078b8:	f7ff feca 	bl	8007650 <__ulp>
 80078bc:	4604      	mov	r4, r0
 80078be:	460d      	mov	r5, r1
 80078c0:	f1b8 0f00 	cmp.w	r8, #0
 80078c4:	d011      	beq.n	80078ea <sulp+0x3a>
 80078c6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80078ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	dd0b      	ble.n	80078ea <sulp+0x3a>
 80078d2:	2400      	movs	r4, #0
 80078d4:	051b      	lsls	r3, r3, #20
 80078d6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80078da:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80078de:	4622      	mov	r2, r4
 80078e0:	462b      	mov	r3, r5
 80078e2:	f7f8 fdf9 	bl	80004d8 <__aeabi_dmul>
 80078e6:	4604      	mov	r4, r0
 80078e8:	460d      	mov	r5, r1
 80078ea:	4620      	mov	r0, r4
 80078ec:	4629      	mov	r1, r5
 80078ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078f2:	0000      	movs	r0, r0
 80078f4:	0000      	movs	r0, r0
	...

080078f8 <_strtod_l>:
 80078f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078fc:	b09f      	sub	sp, #124	; 0x7c
 80078fe:	9217      	str	r2, [sp, #92]	; 0x5c
 8007900:	2200      	movs	r2, #0
 8007902:	4604      	mov	r4, r0
 8007904:	921a      	str	r2, [sp, #104]	; 0x68
 8007906:	460d      	mov	r5, r1
 8007908:	f04f 0800 	mov.w	r8, #0
 800790c:	f04f 0900 	mov.w	r9, #0
 8007910:	460a      	mov	r2, r1
 8007912:	9219      	str	r2, [sp, #100]	; 0x64
 8007914:	7811      	ldrb	r1, [r2, #0]
 8007916:	292b      	cmp	r1, #43	; 0x2b
 8007918:	d04a      	beq.n	80079b0 <_strtod_l+0xb8>
 800791a:	d838      	bhi.n	800798e <_strtod_l+0x96>
 800791c:	290d      	cmp	r1, #13
 800791e:	d832      	bhi.n	8007986 <_strtod_l+0x8e>
 8007920:	2908      	cmp	r1, #8
 8007922:	d832      	bhi.n	800798a <_strtod_l+0x92>
 8007924:	2900      	cmp	r1, #0
 8007926:	d03b      	beq.n	80079a0 <_strtod_l+0xa8>
 8007928:	2200      	movs	r2, #0
 800792a:	920e      	str	r2, [sp, #56]	; 0x38
 800792c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800792e:	7832      	ldrb	r2, [r6, #0]
 8007930:	2a30      	cmp	r2, #48	; 0x30
 8007932:	f040 80b2 	bne.w	8007a9a <_strtod_l+0x1a2>
 8007936:	7872      	ldrb	r2, [r6, #1]
 8007938:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800793c:	2a58      	cmp	r2, #88	; 0x58
 800793e:	d16e      	bne.n	8007a1e <_strtod_l+0x126>
 8007940:	9302      	str	r3, [sp, #8]
 8007942:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007944:	4620      	mov	r0, r4
 8007946:	9301      	str	r3, [sp, #4]
 8007948:	ab1a      	add	r3, sp, #104	; 0x68
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	4a8c      	ldr	r2, [pc, #560]	; (8007b80 <_strtod_l+0x288>)
 800794e:	ab1b      	add	r3, sp, #108	; 0x6c
 8007950:	a919      	add	r1, sp, #100	; 0x64
 8007952:	f001 fcc7 	bl	80092e4 <__gethex>
 8007956:	f010 070f 	ands.w	r7, r0, #15
 800795a:	4605      	mov	r5, r0
 800795c:	d005      	beq.n	800796a <_strtod_l+0x72>
 800795e:	2f06      	cmp	r7, #6
 8007960:	d128      	bne.n	80079b4 <_strtod_l+0xbc>
 8007962:	2300      	movs	r3, #0
 8007964:	3601      	adds	r6, #1
 8007966:	9619      	str	r6, [sp, #100]	; 0x64
 8007968:	930e      	str	r3, [sp, #56]	; 0x38
 800796a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800796c:	2b00      	cmp	r3, #0
 800796e:	f040 85a0 	bne.w	80084b2 <_strtod_l+0xbba>
 8007972:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007974:	b1cb      	cbz	r3, 80079aa <_strtod_l+0xb2>
 8007976:	4642      	mov	r2, r8
 8007978:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800797c:	4610      	mov	r0, r2
 800797e:	4619      	mov	r1, r3
 8007980:	b01f      	add	sp, #124	; 0x7c
 8007982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007986:	2920      	cmp	r1, #32
 8007988:	d1ce      	bne.n	8007928 <_strtod_l+0x30>
 800798a:	3201      	adds	r2, #1
 800798c:	e7c1      	b.n	8007912 <_strtod_l+0x1a>
 800798e:	292d      	cmp	r1, #45	; 0x2d
 8007990:	d1ca      	bne.n	8007928 <_strtod_l+0x30>
 8007992:	2101      	movs	r1, #1
 8007994:	910e      	str	r1, [sp, #56]	; 0x38
 8007996:	1c51      	adds	r1, r2, #1
 8007998:	9119      	str	r1, [sp, #100]	; 0x64
 800799a:	7852      	ldrb	r2, [r2, #1]
 800799c:	2a00      	cmp	r2, #0
 800799e:	d1c5      	bne.n	800792c <_strtod_l+0x34>
 80079a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079a2:	9519      	str	r5, [sp, #100]	; 0x64
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f040 8582 	bne.w	80084ae <_strtod_l+0xbb6>
 80079aa:	4642      	mov	r2, r8
 80079ac:	464b      	mov	r3, r9
 80079ae:	e7e5      	b.n	800797c <_strtod_l+0x84>
 80079b0:	2100      	movs	r1, #0
 80079b2:	e7ef      	b.n	8007994 <_strtod_l+0x9c>
 80079b4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80079b6:	b13a      	cbz	r2, 80079c8 <_strtod_l+0xd0>
 80079b8:	2135      	movs	r1, #53	; 0x35
 80079ba:	a81c      	add	r0, sp, #112	; 0x70
 80079bc:	f7ff ff34 	bl	8007828 <__copybits>
 80079c0:	4620      	mov	r0, r4
 80079c2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80079c4:	f7ff fb18 	bl	8006ff8 <_Bfree>
 80079c8:	3f01      	subs	r7, #1
 80079ca:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80079cc:	2f04      	cmp	r7, #4
 80079ce:	d806      	bhi.n	80079de <_strtod_l+0xe6>
 80079d0:	e8df f007 	tbb	[pc, r7]
 80079d4:	201d0314 	.word	0x201d0314
 80079d8:	14          	.byte	0x14
 80079d9:	00          	.byte	0x00
 80079da:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80079de:	05e9      	lsls	r1, r5, #23
 80079e0:	bf48      	it	mi
 80079e2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80079e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80079ea:	0d1b      	lsrs	r3, r3, #20
 80079ec:	051b      	lsls	r3, r3, #20
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1bb      	bne.n	800796a <_strtod_l+0x72>
 80079f2:	f7fe fb15 	bl	8006020 <__errno>
 80079f6:	2322      	movs	r3, #34	; 0x22
 80079f8:	6003      	str	r3, [r0, #0]
 80079fa:	e7b6      	b.n	800796a <_strtod_l+0x72>
 80079fc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007a00:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007a04:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007a08:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007a0c:	e7e7      	b.n	80079de <_strtod_l+0xe6>
 8007a0e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8007b84 <_strtod_l+0x28c>
 8007a12:	e7e4      	b.n	80079de <_strtod_l+0xe6>
 8007a14:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007a18:	f04f 38ff 	mov.w	r8, #4294967295
 8007a1c:	e7df      	b.n	80079de <_strtod_l+0xe6>
 8007a1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a20:	1c5a      	adds	r2, r3, #1
 8007a22:	9219      	str	r2, [sp, #100]	; 0x64
 8007a24:	785b      	ldrb	r3, [r3, #1]
 8007a26:	2b30      	cmp	r3, #48	; 0x30
 8007a28:	d0f9      	beq.n	8007a1e <_strtod_l+0x126>
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d09d      	beq.n	800796a <_strtod_l+0x72>
 8007a2e:	2301      	movs	r3, #1
 8007a30:	f04f 0a00 	mov.w	sl, #0
 8007a34:	220a      	movs	r2, #10
 8007a36:	46d3      	mov	fp, sl
 8007a38:	9305      	str	r3, [sp, #20]
 8007a3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a3c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007a40:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a42:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007a44:	7806      	ldrb	r6, [r0, #0]
 8007a46:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007a4a:	b2d9      	uxtb	r1, r3
 8007a4c:	2909      	cmp	r1, #9
 8007a4e:	d926      	bls.n	8007a9e <_strtod_l+0x1a6>
 8007a50:	2201      	movs	r2, #1
 8007a52:	494d      	ldr	r1, [pc, #308]	; (8007b88 <_strtod_l+0x290>)
 8007a54:	f001 fb75 	bl	8009142 <strncmp>
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	d030      	beq.n	8007abe <_strtod_l+0x1c6>
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	4632      	mov	r2, r6
 8007a60:	4603      	mov	r3, r0
 8007a62:	465e      	mov	r6, fp
 8007a64:	9008      	str	r0, [sp, #32]
 8007a66:	2a65      	cmp	r2, #101	; 0x65
 8007a68:	d001      	beq.n	8007a6e <_strtod_l+0x176>
 8007a6a:	2a45      	cmp	r2, #69	; 0x45
 8007a6c:	d113      	bne.n	8007a96 <_strtod_l+0x19e>
 8007a6e:	b91e      	cbnz	r6, 8007a78 <_strtod_l+0x180>
 8007a70:	9a05      	ldr	r2, [sp, #20]
 8007a72:	4302      	orrs	r2, r0
 8007a74:	d094      	beq.n	80079a0 <_strtod_l+0xa8>
 8007a76:	2600      	movs	r6, #0
 8007a78:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007a7a:	1c6a      	adds	r2, r5, #1
 8007a7c:	9219      	str	r2, [sp, #100]	; 0x64
 8007a7e:	786a      	ldrb	r2, [r5, #1]
 8007a80:	2a2b      	cmp	r2, #43	; 0x2b
 8007a82:	d074      	beq.n	8007b6e <_strtod_l+0x276>
 8007a84:	2a2d      	cmp	r2, #45	; 0x2d
 8007a86:	d078      	beq.n	8007b7a <_strtod_l+0x282>
 8007a88:	f04f 0c00 	mov.w	ip, #0
 8007a8c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007a90:	2909      	cmp	r1, #9
 8007a92:	d97f      	bls.n	8007b94 <_strtod_l+0x29c>
 8007a94:	9519      	str	r5, [sp, #100]	; 0x64
 8007a96:	2700      	movs	r7, #0
 8007a98:	e09e      	b.n	8007bd8 <_strtod_l+0x2e0>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	e7c8      	b.n	8007a30 <_strtod_l+0x138>
 8007a9e:	f1bb 0f08 	cmp.w	fp, #8
 8007aa2:	bfd8      	it	le
 8007aa4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8007aa6:	f100 0001 	add.w	r0, r0, #1
 8007aaa:	bfd6      	itet	le
 8007aac:	fb02 3301 	mlale	r3, r2, r1, r3
 8007ab0:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007ab4:	930a      	strle	r3, [sp, #40]	; 0x28
 8007ab6:	f10b 0b01 	add.w	fp, fp, #1
 8007aba:	9019      	str	r0, [sp, #100]	; 0x64
 8007abc:	e7c1      	b.n	8007a42 <_strtod_l+0x14a>
 8007abe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ac0:	1c5a      	adds	r2, r3, #1
 8007ac2:	9219      	str	r2, [sp, #100]	; 0x64
 8007ac4:	785a      	ldrb	r2, [r3, #1]
 8007ac6:	f1bb 0f00 	cmp.w	fp, #0
 8007aca:	d037      	beq.n	8007b3c <_strtod_l+0x244>
 8007acc:	465e      	mov	r6, fp
 8007ace:	9008      	str	r0, [sp, #32]
 8007ad0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007ad4:	2b09      	cmp	r3, #9
 8007ad6:	d912      	bls.n	8007afe <_strtod_l+0x206>
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e7c4      	b.n	8007a66 <_strtod_l+0x16e>
 8007adc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ade:	3001      	adds	r0, #1
 8007ae0:	1c5a      	adds	r2, r3, #1
 8007ae2:	9219      	str	r2, [sp, #100]	; 0x64
 8007ae4:	785a      	ldrb	r2, [r3, #1]
 8007ae6:	2a30      	cmp	r2, #48	; 0x30
 8007ae8:	d0f8      	beq.n	8007adc <_strtod_l+0x1e4>
 8007aea:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007aee:	2b08      	cmp	r3, #8
 8007af0:	f200 84e4 	bhi.w	80084bc <_strtod_l+0xbc4>
 8007af4:	9008      	str	r0, [sp, #32]
 8007af6:	2000      	movs	r0, #0
 8007af8:	4606      	mov	r6, r0
 8007afa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007afc:	930b      	str	r3, [sp, #44]	; 0x2c
 8007afe:	3a30      	subs	r2, #48	; 0x30
 8007b00:	f100 0301 	add.w	r3, r0, #1
 8007b04:	d014      	beq.n	8007b30 <_strtod_l+0x238>
 8007b06:	9908      	ldr	r1, [sp, #32]
 8007b08:	eb00 0c06 	add.w	ip, r0, r6
 8007b0c:	4419      	add	r1, r3
 8007b0e:	9108      	str	r1, [sp, #32]
 8007b10:	4633      	mov	r3, r6
 8007b12:	210a      	movs	r1, #10
 8007b14:	4563      	cmp	r3, ip
 8007b16:	d113      	bne.n	8007b40 <_strtod_l+0x248>
 8007b18:	1833      	adds	r3, r6, r0
 8007b1a:	2b08      	cmp	r3, #8
 8007b1c:	f106 0601 	add.w	r6, r6, #1
 8007b20:	4406      	add	r6, r0
 8007b22:	dc1a      	bgt.n	8007b5a <_strtod_l+0x262>
 8007b24:	230a      	movs	r3, #10
 8007b26:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007b28:	fb03 2301 	mla	r3, r3, r1, r2
 8007b2c:	930a      	str	r3, [sp, #40]	; 0x28
 8007b2e:	2300      	movs	r3, #0
 8007b30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b32:	4618      	mov	r0, r3
 8007b34:	1c51      	adds	r1, r2, #1
 8007b36:	9119      	str	r1, [sp, #100]	; 0x64
 8007b38:	7852      	ldrb	r2, [r2, #1]
 8007b3a:	e7c9      	b.n	8007ad0 <_strtod_l+0x1d8>
 8007b3c:	4658      	mov	r0, fp
 8007b3e:	e7d2      	b.n	8007ae6 <_strtod_l+0x1ee>
 8007b40:	2b08      	cmp	r3, #8
 8007b42:	f103 0301 	add.w	r3, r3, #1
 8007b46:	dc03      	bgt.n	8007b50 <_strtod_l+0x258>
 8007b48:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007b4a:	434f      	muls	r7, r1
 8007b4c:	970a      	str	r7, [sp, #40]	; 0x28
 8007b4e:	e7e1      	b.n	8007b14 <_strtod_l+0x21c>
 8007b50:	2b10      	cmp	r3, #16
 8007b52:	bfd8      	it	le
 8007b54:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007b58:	e7dc      	b.n	8007b14 <_strtod_l+0x21c>
 8007b5a:	2e10      	cmp	r6, #16
 8007b5c:	bfdc      	itt	le
 8007b5e:	230a      	movle	r3, #10
 8007b60:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007b64:	e7e3      	b.n	8007b2e <_strtod_l+0x236>
 8007b66:	2300      	movs	r3, #0
 8007b68:	9308      	str	r3, [sp, #32]
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e780      	b.n	8007a70 <_strtod_l+0x178>
 8007b6e:	f04f 0c00 	mov.w	ip, #0
 8007b72:	1caa      	adds	r2, r5, #2
 8007b74:	9219      	str	r2, [sp, #100]	; 0x64
 8007b76:	78aa      	ldrb	r2, [r5, #2]
 8007b78:	e788      	b.n	8007a8c <_strtod_l+0x194>
 8007b7a:	f04f 0c01 	mov.w	ip, #1
 8007b7e:	e7f8      	b.n	8007b72 <_strtod_l+0x27a>
 8007b80:	0800a260 	.word	0x0800a260
 8007b84:	7ff00000 	.word	0x7ff00000
 8007b88:	0800a25c 	.word	0x0800a25c
 8007b8c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b8e:	1c51      	adds	r1, r2, #1
 8007b90:	9119      	str	r1, [sp, #100]	; 0x64
 8007b92:	7852      	ldrb	r2, [r2, #1]
 8007b94:	2a30      	cmp	r2, #48	; 0x30
 8007b96:	d0f9      	beq.n	8007b8c <_strtod_l+0x294>
 8007b98:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007b9c:	2908      	cmp	r1, #8
 8007b9e:	f63f af7a 	bhi.w	8007a96 <_strtod_l+0x19e>
 8007ba2:	3a30      	subs	r2, #48	; 0x30
 8007ba4:	9209      	str	r2, [sp, #36]	; 0x24
 8007ba6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007ba8:	920c      	str	r2, [sp, #48]	; 0x30
 8007baa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007bac:	1c57      	adds	r7, r2, #1
 8007bae:	9719      	str	r7, [sp, #100]	; 0x64
 8007bb0:	7852      	ldrb	r2, [r2, #1]
 8007bb2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007bb6:	f1be 0f09 	cmp.w	lr, #9
 8007bba:	d938      	bls.n	8007c2e <_strtod_l+0x336>
 8007bbc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007bbe:	1a7f      	subs	r7, r7, r1
 8007bc0:	2f08      	cmp	r7, #8
 8007bc2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007bc6:	dc03      	bgt.n	8007bd0 <_strtod_l+0x2d8>
 8007bc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bca:	428f      	cmp	r7, r1
 8007bcc:	bfa8      	it	ge
 8007bce:	460f      	movge	r7, r1
 8007bd0:	f1bc 0f00 	cmp.w	ip, #0
 8007bd4:	d000      	beq.n	8007bd8 <_strtod_l+0x2e0>
 8007bd6:	427f      	negs	r7, r7
 8007bd8:	2e00      	cmp	r6, #0
 8007bda:	d14f      	bne.n	8007c7c <_strtod_l+0x384>
 8007bdc:	9905      	ldr	r1, [sp, #20]
 8007bde:	4301      	orrs	r1, r0
 8007be0:	f47f aec3 	bne.w	800796a <_strtod_l+0x72>
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f47f aedb 	bne.w	80079a0 <_strtod_l+0xa8>
 8007bea:	2a69      	cmp	r2, #105	; 0x69
 8007bec:	d029      	beq.n	8007c42 <_strtod_l+0x34a>
 8007bee:	dc26      	bgt.n	8007c3e <_strtod_l+0x346>
 8007bf0:	2a49      	cmp	r2, #73	; 0x49
 8007bf2:	d026      	beq.n	8007c42 <_strtod_l+0x34a>
 8007bf4:	2a4e      	cmp	r2, #78	; 0x4e
 8007bf6:	f47f aed3 	bne.w	80079a0 <_strtod_l+0xa8>
 8007bfa:	499a      	ldr	r1, [pc, #616]	; (8007e64 <_strtod_l+0x56c>)
 8007bfc:	a819      	add	r0, sp, #100	; 0x64
 8007bfe:	f001 fdb3 	bl	8009768 <__match>
 8007c02:	2800      	cmp	r0, #0
 8007c04:	f43f aecc 	beq.w	80079a0 <_strtod_l+0xa8>
 8007c08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	2b28      	cmp	r3, #40	; 0x28
 8007c0e:	d12f      	bne.n	8007c70 <_strtod_l+0x378>
 8007c10:	4995      	ldr	r1, [pc, #596]	; (8007e68 <_strtod_l+0x570>)
 8007c12:	aa1c      	add	r2, sp, #112	; 0x70
 8007c14:	a819      	add	r0, sp, #100	; 0x64
 8007c16:	f001 fdbb 	bl	8009790 <__hexnan>
 8007c1a:	2805      	cmp	r0, #5
 8007c1c:	d128      	bne.n	8007c70 <_strtod_l+0x378>
 8007c1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c20:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007c24:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007c28:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007c2c:	e69d      	b.n	800796a <_strtod_l+0x72>
 8007c2e:	210a      	movs	r1, #10
 8007c30:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007c32:	fb01 2107 	mla	r1, r1, r7, r2
 8007c36:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007c3a:	9209      	str	r2, [sp, #36]	; 0x24
 8007c3c:	e7b5      	b.n	8007baa <_strtod_l+0x2b2>
 8007c3e:	2a6e      	cmp	r2, #110	; 0x6e
 8007c40:	e7d9      	b.n	8007bf6 <_strtod_l+0x2fe>
 8007c42:	498a      	ldr	r1, [pc, #552]	; (8007e6c <_strtod_l+0x574>)
 8007c44:	a819      	add	r0, sp, #100	; 0x64
 8007c46:	f001 fd8f 	bl	8009768 <__match>
 8007c4a:	2800      	cmp	r0, #0
 8007c4c:	f43f aea8 	beq.w	80079a0 <_strtod_l+0xa8>
 8007c50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c52:	4987      	ldr	r1, [pc, #540]	; (8007e70 <_strtod_l+0x578>)
 8007c54:	3b01      	subs	r3, #1
 8007c56:	a819      	add	r0, sp, #100	; 0x64
 8007c58:	9319      	str	r3, [sp, #100]	; 0x64
 8007c5a:	f001 fd85 	bl	8009768 <__match>
 8007c5e:	b910      	cbnz	r0, 8007c66 <_strtod_l+0x36e>
 8007c60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c62:	3301      	adds	r3, #1
 8007c64:	9319      	str	r3, [sp, #100]	; 0x64
 8007c66:	f04f 0800 	mov.w	r8, #0
 8007c6a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8007e74 <_strtod_l+0x57c>
 8007c6e:	e67c      	b.n	800796a <_strtod_l+0x72>
 8007c70:	4881      	ldr	r0, [pc, #516]	; (8007e78 <_strtod_l+0x580>)
 8007c72:	f001 fa97 	bl	80091a4 <nan>
 8007c76:	4680      	mov	r8, r0
 8007c78:	4689      	mov	r9, r1
 8007c7a:	e676      	b.n	800796a <_strtod_l+0x72>
 8007c7c:	9b08      	ldr	r3, [sp, #32]
 8007c7e:	f1bb 0f00 	cmp.w	fp, #0
 8007c82:	bf08      	it	eq
 8007c84:	46b3      	moveq	fp, r6
 8007c86:	1afb      	subs	r3, r7, r3
 8007c88:	2e10      	cmp	r6, #16
 8007c8a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007c8c:	4635      	mov	r5, r6
 8007c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c90:	bfa8      	it	ge
 8007c92:	2510      	movge	r5, #16
 8007c94:	f7f8 fba6 	bl	80003e4 <__aeabi_ui2d>
 8007c98:	2e09      	cmp	r6, #9
 8007c9a:	4680      	mov	r8, r0
 8007c9c:	4689      	mov	r9, r1
 8007c9e:	dd13      	ble.n	8007cc8 <_strtod_l+0x3d0>
 8007ca0:	4b76      	ldr	r3, [pc, #472]	; (8007e7c <_strtod_l+0x584>)
 8007ca2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007ca6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007caa:	f7f8 fc15 	bl	80004d8 <__aeabi_dmul>
 8007cae:	4680      	mov	r8, r0
 8007cb0:	4650      	mov	r0, sl
 8007cb2:	4689      	mov	r9, r1
 8007cb4:	f7f8 fb96 	bl	80003e4 <__aeabi_ui2d>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	4640      	mov	r0, r8
 8007cbe:	4649      	mov	r1, r9
 8007cc0:	f7f8 fa54 	bl	800016c <__adddf3>
 8007cc4:	4680      	mov	r8, r0
 8007cc6:	4689      	mov	r9, r1
 8007cc8:	2e0f      	cmp	r6, #15
 8007cca:	dc36      	bgt.n	8007d3a <_strtod_l+0x442>
 8007ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f43f ae4b 	beq.w	800796a <_strtod_l+0x72>
 8007cd4:	dd22      	ble.n	8007d1c <_strtod_l+0x424>
 8007cd6:	2b16      	cmp	r3, #22
 8007cd8:	dc09      	bgt.n	8007cee <_strtod_l+0x3f6>
 8007cda:	4968      	ldr	r1, [pc, #416]	; (8007e7c <_strtod_l+0x584>)
 8007cdc:	4642      	mov	r2, r8
 8007cde:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ce2:	464b      	mov	r3, r9
 8007ce4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ce8:	f7f8 fbf6 	bl	80004d8 <__aeabi_dmul>
 8007cec:	e7c3      	b.n	8007c76 <_strtod_l+0x37e>
 8007cee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cf0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	db20      	blt.n	8007d3a <_strtod_l+0x442>
 8007cf8:	4c60      	ldr	r4, [pc, #384]	; (8007e7c <_strtod_l+0x584>)
 8007cfa:	f1c6 060f 	rsb	r6, r6, #15
 8007cfe:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007d02:	4642      	mov	r2, r8
 8007d04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d08:	464b      	mov	r3, r9
 8007d0a:	f7f8 fbe5 	bl	80004d8 <__aeabi_dmul>
 8007d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d10:	1b9e      	subs	r6, r3, r6
 8007d12:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007d16:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007d1a:	e7e5      	b.n	8007ce8 <_strtod_l+0x3f0>
 8007d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d1e:	3316      	adds	r3, #22
 8007d20:	db0b      	blt.n	8007d3a <_strtod_l+0x442>
 8007d22:	9b08      	ldr	r3, [sp, #32]
 8007d24:	4640      	mov	r0, r8
 8007d26:	1bdf      	subs	r7, r3, r7
 8007d28:	4b54      	ldr	r3, [pc, #336]	; (8007e7c <_strtod_l+0x584>)
 8007d2a:	4649      	mov	r1, r9
 8007d2c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007d30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d34:	f7f8 fcfa 	bl	800072c <__aeabi_ddiv>
 8007d38:	e79d      	b.n	8007c76 <_strtod_l+0x37e>
 8007d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d3c:	1b75      	subs	r5, r6, r5
 8007d3e:	441d      	add	r5, r3
 8007d40:	2d00      	cmp	r5, #0
 8007d42:	dd70      	ble.n	8007e26 <_strtod_l+0x52e>
 8007d44:	f015 030f 	ands.w	r3, r5, #15
 8007d48:	d00a      	beq.n	8007d60 <_strtod_l+0x468>
 8007d4a:	494c      	ldr	r1, [pc, #304]	; (8007e7c <_strtod_l+0x584>)
 8007d4c:	4642      	mov	r2, r8
 8007d4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007d52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d56:	464b      	mov	r3, r9
 8007d58:	f7f8 fbbe 	bl	80004d8 <__aeabi_dmul>
 8007d5c:	4680      	mov	r8, r0
 8007d5e:	4689      	mov	r9, r1
 8007d60:	f035 050f 	bics.w	r5, r5, #15
 8007d64:	d04d      	beq.n	8007e02 <_strtod_l+0x50a>
 8007d66:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007d6a:	dd22      	ble.n	8007db2 <_strtod_l+0x4ba>
 8007d6c:	2600      	movs	r6, #0
 8007d6e:	46b3      	mov	fp, r6
 8007d70:	960b      	str	r6, [sp, #44]	; 0x2c
 8007d72:	9608      	str	r6, [sp, #32]
 8007d74:	2322      	movs	r3, #34	; 0x22
 8007d76:	f04f 0800 	mov.w	r8, #0
 8007d7a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8007e74 <_strtod_l+0x57c>
 8007d7e:	6023      	str	r3, [r4, #0]
 8007d80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f43f adf1 	beq.w	800796a <_strtod_l+0x72>
 8007d88:	4620      	mov	r0, r4
 8007d8a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007d8c:	f7ff f934 	bl	8006ff8 <_Bfree>
 8007d90:	4620      	mov	r0, r4
 8007d92:	9908      	ldr	r1, [sp, #32]
 8007d94:	f7ff f930 	bl	8006ff8 <_Bfree>
 8007d98:	4659      	mov	r1, fp
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	f7ff f92c 	bl	8006ff8 <_Bfree>
 8007da0:	4620      	mov	r0, r4
 8007da2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007da4:	f7ff f928 	bl	8006ff8 <_Bfree>
 8007da8:	4631      	mov	r1, r6
 8007daa:	4620      	mov	r0, r4
 8007dac:	f7ff f924 	bl	8006ff8 <_Bfree>
 8007db0:	e5db      	b.n	800796a <_strtod_l+0x72>
 8007db2:	4b33      	ldr	r3, [pc, #204]	; (8007e80 <_strtod_l+0x588>)
 8007db4:	4640      	mov	r0, r8
 8007db6:	9305      	str	r3, [sp, #20]
 8007db8:	2300      	movs	r3, #0
 8007dba:	4649      	mov	r1, r9
 8007dbc:	469a      	mov	sl, r3
 8007dbe:	112d      	asrs	r5, r5, #4
 8007dc0:	2d01      	cmp	r5, #1
 8007dc2:	dc21      	bgt.n	8007e08 <_strtod_l+0x510>
 8007dc4:	b10b      	cbz	r3, 8007dca <_strtod_l+0x4d2>
 8007dc6:	4680      	mov	r8, r0
 8007dc8:	4689      	mov	r9, r1
 8007dca:	492d      	ldr	r1, [pc, #180]	; (8007e80 <_strtod_l+0x588>)
 8007dcc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007dd0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007dd4:	4642      	mov	r2, r8
 8007dd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dda:	464b      	mov	r3, r9
 8007ddc:	f7f8 fb7c 	bl	80004d8 <__aeabi_dmul>
 8007de0:	4b24      	ldr	r3, [pc, #144]	; (8007e74 <_strtod_l+0x57c>)
 8007de2:	460a      	mov	r2, r1
 8007de4:	400b      	ands	r3, r1
 8007de6:	4927      	ldr	r1, [pc, #156]	; (8007e84 <_strtod_l+0x58c>)
 8007de8:	4680      	mov	r8, r0
 8007dea:	428b      	cmp	r3, r1
 8007dec:	d8be      	bhi.n	8007d6c <_strtod_l+0x474>
 8007dee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007df2:	428b      	cmp	r3, r1
 8007df4:	bf86      	itte	hi
 8007df6:	f04f 38ff 	movhi.w	r8, #4294967295
 8007dfa:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8007e88 <_strtod_l+0x590>
 8007dfe:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007e02:	2300      	movs	r3, #0
 8007e04:	9305      	str	r3, [sp, #20]
 8007e06:	e07b      	b.n	8007f00 <_strtod_l+0x608>
 8007e08:	07ea      	lsls	r2, r5, #31
 8007e0a:	d505      	bpl.n	8007e18 <_strtod_l+0x520>
 8007e0c:	9b05      	ldr	r3, [sp, #20]
 8007e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e12:	f7f8 fb61 	bl	80004d8 <__aeabi_dmul>
 8007e16:	2301      	movs	r3, #1
 8007e18:	9a05      	ldr	r2, [sp, #20]
 8007e1a:	f10a 0a01 	add.w	sl, sl, #1
 8007e1e:	3208      	adds	r2, #8
 8007e20:	106d      	asrs	r5, r5, #1
 8007e22:	9205      	str	r2, [sp, #20]
 8007e24:	e7cc      	b.n	8007dc0 <_strtod_l+0x4c8>
 8007e26:	d0ec      	beq.n	8007e02 <_strtod_l+0x50a>
 8007e28:	426d      	negs	r5, r5
 8007e2a:	f015 020f 	ands.w	r2, r5, #15
 8007e2e:	d00a      	beq.n	8007e46 <_strtod_l+0x54e>
 8007e30:	4b12      	ldr	r3, [pc, #72]	; (8007e7c <_strtod_l+0x584>)
 8007e32:	4640      	mov	r0, r8
 8007e34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e38:	4649      	mov	r1, r9
 8007e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3e:	f7f8 fc75 	bl	800072c <__aeabi_ddiv>
 8007e42:	4680      	mov	r8, r0
 8007e44:	4689      	mov	r9, r1
 8007e46:	112d      	asrs	r5, r5, #4
 8007e48:	d0db      	beq.n	8007e02 <_strtod_l+0x50a>
 8007e4a:	2d1f      	cmp	r5, #31
 8007e4c:	dd1e      	ble.n	8007e8c <_strtod_l+0x594>
 8007e4e:	2600      	movs	r6, #0
 8007e50:	46b3      	mov	fp, r6
 8007e52:	960b      	str	r6, [sp, #44]	; 0x2c
 8007e54:	9608      	str	r6, [sp, #32]
 8007e56:	2322      	movs	r3, #34	; 0x22
 8007e58:	f04f 0800 	mov.w	r8, #0
 8007e5c:	f04f 0900 	mov.w	r9, #0
 8007e60:	6023      	str	r3, [r4, #0]
 8007e62:	e78d      	b.n	8007d80 <_strtod_l+0x488>
 8007e64:	0800a04b 	.word	0x0800a04b
 8007e68:	0800a274 	.word	0x0800a274
 8007e6c:	0800a043 	.word	0x0800a043
 8007e70:	0800a078 	.word	0x0800a078
 8007e74:	7ff00000 	.word	0x7ff00000
 8007e78:	0800a420 	.word	0x0800a420
 8007e7c:	0800a188 	.word	0x0800a188
 8007e80:	0800a160 	.word	0x0800a160
 8007e84:	7ca00000 	.word	0x7ca00000
 8007e88:	7fefffff 	.word	0x7fefffff
 8007e8c:	f015 0310 	ands.w	r3, r5, #16
 8007e90:	bf18      	it	ne
 8007e92:	236a      	movne	r3, #106	; 0x6a
 8007e94:	4640      	mov	r0, r8
 8007e96:	9305      	str	r3, [sp, #20]
 8007e98:	4649      	mov	r1, r9
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8008168 <_strtod_l+0x870>
 8007ea0:	07ea      	lsls	r2, r5, #31
 8007ea2:	d504      	bpl.n	8007eae <_strtod_l+0x5b6>
 8007ea4:	e9da 2300 	ldrd	r2, r3, [sl]
 8007ea8:	f7f8 fb16 	bl	80004d8 <__aeabi_dmul>
 8007eac:	2301      	movs	r3, #1
 8007eae:	106d      	asrs	r5, r5, #1
 8007eb0:	f10a 0a08 	add.w	sl, sl, #8
 8007eb4:	d1f4      	bne.n	8007ea0 <_strtod_l+0x5a8>
 8007eb6:	b10b      	cbz	r3, 8007ebc <_strtod_l+0x5c4>
 8007eb8:	4680      	mov	r8, r0
 8007eba:	4689      	mov	r9, r1
 8007ebc:	9b05      	ldr	r3, [sp, #20]
 8007ebe:	b1bb      	cbz	r3, 8007ef0 <_strtod_l+0x5f8>
 8007ec0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007ec4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	4649      	mov	r1, r9
 8007ecc:	dd10      	ble.n	8007ef0 <_strtod_l+0x5f8>
 8007ece:	2b1f      	cmp	r3, #31
 8007ed0:	f340 8128 	ble.w	8008124 <_strtod_l+0x82c>
 8007ed4:	2b34      	cmp	r3, #52	; 0x34
 8007ed6:	bfd8      	it	le
 8007ed8:	f04f 33ff 	movle.w	r3, #4294967295
 8007edc:	f04f 0800 	mov.w	r8, #0
 8007ee0:	bfcf      	iteee	gt
 8007ee2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007ee6:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007eea:	4093      	lslle	r3, r2
 8007eec:	ea03 0901 	andle.w	r9, r3, r1
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	4640      	mov	r0, r8
 8007ef6:	4649      	mov	r1, r9
 8007ef8:	f7f8 fd56 	bl	80009a8 <__aeabi_dcmpeq>
 8007efc:	2800      	cmp	r0, #0
 8007efe:	d1a6      	bne.n	8007e4e <_strtod_l+0x556>
 8007f00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f02:	465a      	mov	r2, fp
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	4620      	mov	r0, r4
 8007f08:	4633      	mov	r3, r6
 8007f0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f0c:	f7ff f8dc 	bl	80070c8 <__s2b>
 8007f10:	900b      	str	r0, [sp, #44]	; 0x2c
 8007f12:	2800      	cmp	r0, #0
 8007f14:	f43f af2a 	beq.w	8007d6c <_strtod_l+0x474>
 8007f18:	2600      	movs	r6, #0
 8007f1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f1c:	9b08      	ldr	r3, [sp, #32]
 8007f1e:	2a00      	cmp	r2, #0
 8007f20:	eba3 0307 	sub.w	r3, r3, r7
 8007f24:	bfa8      	it	ge
 8007f26:	2300      	movge	r3, #0
 8007f28:	46b3      	mov	fp, r6
 8007f2a:	9312      	str	r3, [sp, #72]	; 0x48
 8007f2c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007f30:	9316      	str	r3, [sp, #88]	; 0x58
 8007f32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f34:	4620      	mov	r0, r4
 8007f36:	6859      	ldr	r1, [r3, #4]
 8007f38:	f7ff f81e 	bl	8006f78 <_Balloc>
 8007f3c:	9008      	str	r0, [sp, #32]
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	f43f af18 	beq.w	8007d74 <_strtod_l+0x47c>
 8007f44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f46:	300c      	adds	r0, #12
 8007f48:	691a      	ldr	r2, [r3, #16]
 8007f4a:	f103 010c 	add.w	r1, r3, #12
 8007f4e:	3202      	adds	r2, #2
 8007f50:	0092      	lsls	r2, r2, #2
 8007f52:	f001 f919 	bl	8009188 <memcpy>
 8007f56:	ab1c      	add	r3, sp, #112	; 0x70
 8007f58:	9301      	str	r3, [sp, #4]
 8007f5a:	ab1b      	add	r3, sp, #108	; 0x6c
 8007f5c:	9300      	str	r3, [sp, #0]
 8007f5e:	4642      	mov	r2, r8
 8007f60:	464b      	mov	r3, r9
 8007f62:	4620      	mov	r0, r4
 8007f64:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8007f68:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8007f6c:	f7ff fbd8 	bl	8007720 <__d2b>
 8007f70:	901a      	str	r0, [sp, #104]	; 0x68
 8007f72:	2800      	cmp	r0, #0
 8007f74:	f43f aefe 	beq.w	8007d74 <_strtod_l+0x47c>
 8007f78:	2101      	movs	r1, #1
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f7ff f93c 	bl	80071f8 <__i2b>
 8007f80:	4683      	mov	fp, r0
 8007f82:	2800      	cmp	r0, #0
 8007f84:	f43f aef6 	beq.w	8007d74 <_strtod_l+0x47c>
 8007f88:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007f8a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007f8c:	2f00      	cmp	r7, #0
 8007f8e:	bfab      	itete	ge
 8007f90:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8007f92:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007f94:	eb07 0a03 	addge.w	sl, r7, r3
 8007f98:	1bdd      	sublt	r5, r3, r7
 8007f9a:	9b05      	ldr	r3, [sp, #20]
 8007f9c:	bfa8      	it	ge
 8007f9e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007fa0:	eba7 0703 	sub.w	r7, r7, r3
 8007fa4:	4417      	add	r7, r2
 8007fa6:	4b71      	ldr	r3, [pc, #452]	; (800816c <_strtod_l+0x874>)
 8007fa8:	f107 37ff 	add.w	r7, r7, #4294967295
 8007fac:	bfb8      	it	lt
 8007fae:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8007fb2:	429f      	cmp	r7, r3
 8007fb4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007fb8:	f280 80c7 	bge.w	800814a <_strtod_l+0x852>
 8007fbc:	1bdb      	subs	r3, r3, r7
 8007fbe:	2b1f      	cmp	r3, #31
 8007fc0:	f04f 0101 	mov.w	r1, #1
 8007fc4:	eba2 0203 	sub.w	r2, r2, r3
 8007fc8:	f300 80b3 	bgt.w	8008132 <_strtod_l+0x83a>
 8007fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8007fd0:	9313      	str	r3, [sp, #76]	; 0x4c
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	9310      	str	r3, [sp, #64]	; 0x40
 8007fd6:	eb0a 0702 	add.w	r7, sl, r2
 8007fda:	9b05      	ldr	r3, [sp, #20]
 8007fdc:	45ba      	cmp	sl, r7
 8007fde:	4415      	add	r5, r2
 8007fe0:	441d      	add	r5, r3
 8007fe2:	4653      	mov	r3, sl
 8007fe4:	bfa8      	it	ge
 8007fe6:	463b      	movge	r3, r7
 8007fe8:	42ab      	cmp	r3, r5
 8007fea:	bfa8      	it	ge
 8007fec:	462b      	movge	r3, r5
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	bfc2      	ittt	gt
 8007ff2:	1aff      	subgt	r7, r7, r3
 8007ff4:	1aed      	subgt	r5, r5, r3
 8007ff6:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007ffa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	dd17      	ble.n	8008030 <_strtod_l+0x738>
 8008000:	4659      	mov	r1, fp
 8008002:	461a      	mov	r2, r3
 8008004:	4620      	mov	r0, r4
 8008006:	f7ff f9b5 	bl	8007374 <__pow5mult>
 800800a:	4683      	mov	fp, r0
 800800c:	2800      	cmp	r0, #0
 800800e:	f43f aeb1 	beq.w	8007d74 <_strtod_l+0x47c>
 8008012:	4601      	mov	r1, r0
 8008014:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008016:	4620      	mov	r0, r4
 8008018:	f7ff f904 	bl	8007224 <__multiply>
 800801c:	900a      	str	r0, [sp, #40]	; 0x28
 800801e:	2800      	cmp	r0, #0
 8008020:	f43f aea8 	beq.w	8007d74 <_strtod_l+0x47c>
 8008024:	4620      	mov	r0, r4
 8008026:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008028:	f7fe ffe6 	bl	8006ff8 <_Bfree>
 800802c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800802e:	931a      	str	r3, [sp, #104]	; 0x68
 8008030:	2f00      	cmp	r7, #0
 8008032:	f300 808f 	bgt.w	8008154 <_strtod_l+0x85c>
 8008036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008038:	2b00      	cmp	r3, #0
 800803a:	dd08      	ble.n	800804e <_strtod_l+0x756>
 800803c:	4620      	mov	r0, r4
 800803e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008040:	9908      	ldr	r1, [sp, #32]
 8008042:	f7ff f997 	bl	8007374 <__pow5mult>
 8008046:	9008      	str	r0, [sp, #32]
 8008048:	2800      	cmp	r0, #0
 800804a:	f43f ae93 	beq.w	8007d74 <_strtod_l+0x47c>
 800804e:	2d00      	cmp	r5, #0
 8008050:	dd08      	ble.n	8008064 <_strtod_l+0x76c>
 8008052:	462a      	mov	r2, r5
 8008054:	4620      	mov	r0, r4
 8008056:	9908      	ldr	r1, [sp, #32]
 8008058:	f7ff f9e6 	bl	8007428 <__lshift>
 800805c:	9008      	str	r0, [sp, #32]
 800805e:	2800      	cmp	r0, #0
 8008060:	f43f ae88 	beq.w	8007d74 <_strtod_l+0x47c>
 8008064:	f1ba 0f00 	cmp.w	sl, #0
 8008068:	dd08      	ble.n	800807c <_strtod_l+0x784>
 800806a:	4659      	mov	r1, fp
 800806c:	4652      	mov	r2, sl
 800806e:	4620      	mov	r0, r4
 8008070:	f7ff f9da 	bl	8007428 <__lshift>
 8008074:	4683      	mov	fp, r0
 8008076:	2800      	cmp	r0, #0
 8008078:	f43f ae7c 	beq.w	8007d74 <_strtod_l+0x47c>
 800807c:	4620      	mov	r0, r4
 800807e:	9a08      	ldr	r2, [sp, #32]
 8008080:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008082:	f7ff fa59 	bl	8007538 <__mdiff>
 8008086:	4606      	mov	r6, r0
 8008088:	2800      	cmp	r0, #0
 800808a:	f43f ae73 	beq.w	8007d74 <_strtod_l+0x47c>
 800808e:	2500      	movs	r5, #0
 8008090:	68c3      	ldr	r3, [r0, #12]
 8008092:	4659      	mov	r1, fp
 8008094:	60c5      	str	r5, [r0, #12]
 8008096:	930a      	str	r3, [sp, #40]	; 0x28
 8008098:	f7ff fa32 	bl	8007500 <__mcmp>
 800809c:	42a8      	cmp	r0, r5
 800809e:	da6b      	bge.n	8008178 <_strtod_l+0x880>
 80080a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080a2:	ea53 0308 	orrs.w	r3, r3, r8
 80080a6:	f040 808f 	bne.w	80081c8 <_strtod_l+0x8d0>
 80080aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	f040 808a 	bne.w	80081c8 <_strtod_l+0x8d0>
 80080b4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80080b8:	0d1b      	lsrs	r3, r3, #20
 80080ba:	051b      	lsls	r3, r3, #20
 80080bc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80080c0:	f240 8082 	bls.w	80081c8 <_strtod_l+0x8d0>
 80080c4:	6973      	ldr	r3, [r6, #20]
 80080c6:	b913      	cbnz	r3, 80080ce <_strtod_l+0x7d6>
 80080c8:	6933      	ldr	r3, [r6, #16]
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	dd7c      	ble.n	80081c8 <_strtod_l+0x8d0>
 80080ce:	4631      	mov	r1, r6
 80080d0:	2201      	movs	r2, #1
 80080d2:	4620      	mov	r0, r4
 80080d4:	f7ff f9a8 	bl	8007428 <__lshift>
 80080d8:	4659      	mov	r1, fp
 80080da:	4606      	mov	r6, r0
 80080dc:	f7ff fa10 	bl	8007500 <__mcmp>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	dd71      	ble.n	80081c8 <_strtod_l+0x8d0>
 80080e4:	9905      	ldr	r1, [sp, #20]
 80080e6:	464b      	mov	r3, r9
 80080e8:	4a21      	ldr	r2, [pc, #132]	; (8008170 <_strtod_l+0x878>)
 80080ea:	2900      	cmp	r1, #0
 80080ec:	f000 808d 	beq.w	800820a <_strtod_l+0x912>
 80080f0:	ea02 0109 	and.w	r1, r2, r9
 80080f4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80080f8:	f300 8087 	bgt.w	800820a <_strtod_l+0x912>
 80080fc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008100:	f77f aea9 	ble.w	8007e56 <_strtod_l+0x55e>
 8008104:	4640      	mov	r0, r8
 8008106:	4649      	mov	r1, r9
 8008108:	4b1a      	ldr	r3, [pc, #104]	; (8008174 <_strtod_l+0x87c>)
 800810a:	2200      	movs	r2, #0
 800810c:	f7f8 f9e4 	bl	80004d8 <__aeabi_dmul>
 8008110:	4b17      	ldr	r3, [pc, #92]	; (8008170 <_strtod_l+0x878>)
 8008112:	4680      	mov	r8, r0
 8008114:	400b      	ands	r3, r1
 8008116:	4689      	mov	r9, r1
 8008118:	2b00      	cmp	r3, #0
 800811a:	f47f ae35 	bne.w	8007d88 <_strtod_l+0x490>
 800811e:	2322      	movs	r3, #34	; 0x22
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	e631      	b.n	8007d88 <_strtod_l+0x490>
 8008124:	f04f 32ff 	mov.w	r2, #4294967295
 8008128:	fa02 f303 	lsl.w	r3, r2, r3
 800812c:	ea03 0808 	and.w	r8, r3, r8
 8008130:	e6de      	b.n	8007ef0 <_strtod_l+0x5f8>
 8008132:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8008136:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800813a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800813e:	37e2      	adds	r7, #226	; 0xe2
 8008140:	fa01 f307 	lsl.w	r3, r1, r7
 8008144:	9310      	str	r3, [sp, #64]	; 0x40
 8008146:	9113      	str	r1, [sp, #76]	; 0x4c
 8008148:	e745      	b.n	8007fd6 <_strtod_l+0x6de>
 800814a:	2300      	movs	r3, #0
 800814c:	9310      	str	r3, [sp, #64]	; 0x40
 800814e:	2301      	movs	r3, #1
 8008150:	9313      	str	r3, [sp, #76]	; 0x4c
 8008152:	e740      	b.n	8007fd6 <_strtod_l+0x6de>
 8008154:	463a      	mov	r2, r7
 8008156:	4620      	mov	r0, r4
 8008158:	991a      	ldr	r1, [sp, #104]	; 0x68
 800815a:	f7ff f965 	bl	8007428 <__lshift>
 800815e:	901a      	str	r0, [sp, #104]	; 0x68
 8008160:	2800      	cmp	r0, #0
 8008162:	f47f af68 	bne.w	8008036 <_strtod_l+0x73e>
 8008166:	e605      	b.n	8007d74 <_strtod_l+0x47c>
 8008168:	0800a288 	.word	0x0800a288
 800816c:	fffffc02 	.word	0xfffffc02
 8008170:	7ff00000 	.word	0x7ff00000
 8008174:	39500000 	.word	0x39500000
 8008178:	46ca      	mov	sl, r9
 800817a:	d165      	bne.n	8008248 <_strtod_l+0x950>
 800817c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800817e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008182:	b352      	cbz	r2, 80081da <_strtod_l+0x8e2>
 8008184:	4a9e      	ldr	r2, [pc, #632]	; (8008400 <_strtod_l+0xb08>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d12a      	bne.n	80081e0 <_strtod_l+0x8e8>
 800818a:	9b05      	ldr	r3, [sp, #20]
 800818c:	4641      	mov	r1, r8
 800818e:	b1fb      	cbz	r3, 80081d0 <_strtod_l+0x8d8>
 8008190:	4b9c      	ldr	r3, [pc, #624]	; (8008404 <_strtod_l+0xb0c>)
 8008192:	f04f 32ff 	mov.w	r2, #4294967295
 8008196:	ea09 0303 	and.w	r3, r9, r3
 800819a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800819e:	d81a      	bhi.n	80081d6 <_strtod_l+0x8de>
 80081a0:	0d1b      	lsrs	r3, r3, #20
 80081a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80081a6:	fa02 f303 	lsl.w	r3, r2, r3
 80081aa:	4299      	cmp	r1, r3
 80081ac:	d118      	bne.n	80081e0 <_strtod_l+0x8e8>
 80081ae:	4b96      	ldr	r3, [pc, #600]	; (8008408 <_strtod_l+0xb10>)
 80081b0:	459a      	cmp	sl, r3
 80081b2:	d102      	bne.n	80081ba <_strtod_l+0x8c2>
 80081b4:	3101      	adds	r1, #1
 80081b6:	f43f addd 	beq.w	8007d74 <_strtod_l+0x47c>
 80081ba:	f04f 0800 	mov.w	r8, #0
 80081be:	4b91      	ldr	r3, [pc, #580]	; (8008404 <_strtod_l+0xb0c>)
 80081c0:	ea0a 0303 	and.w	r3, sl, r3
 80081c4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80081c8:	9b05      	ldr	r3, [sp, #20]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d19a      	bne.n	8008104 <_strtod_l+0x80c>
 80081ce:	e5db      	b.n	8007d88 <_strtod_l+0x490>
 80081d0:	f04f 33ff 	mov.w	r3, #4294967295
 80081d4:	e7e9      	b.n	80081aa <_strtod_l+0x8b2>
 80081d6:	4613      	mov	r3, r2
 80081d8:	e7e7      	b.n	80081aa <_strtod_l+0x8b2>
 80081da:	ea53 0308 	orrs.w	r3, r3, r8
 80081de:	d081      	beq.n	80080e4 <_strtod_l+0x7ec>
 80081e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80081e2:	b1e3      	cbz	r3, 800821e <_strtod_l+0x926>
 80081e4:	ea13 0f0a 	tst.w	r3, sl
 80081e8:	d0ee      	beq.n	80081c8 <_strtod_l+0x8d0>
 80081ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081ec:	4640      	mov	r0, r8
 80081ee:	4649      	mov	r1, r9
 80081f0:	9a05      	ldr	r2, [sp, #20]
 80081f2:	b1c3      	cbz	r3, 8008226 <_strtod_l+0x92e>
 80081f4:	f7ff fb5c 	bl	80078b0 <sulp>
 80081f8:	4602      	mov	r2, r0
 80081fa:	460b      	mov	r3, r1
 80081fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80081fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008200:	f7f7 ffb4 	bl	800016c <__adddf3>
 8008204:	4680      	mov	r8, r0
 8008206:	4689      	mov	r9, r1
 8008208:	e7de      	b.n	80081c8 <_strtod_l+0x8d0>
 800820a:	4013      	ands	r3, r2
 800820c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008210:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008214:	f04f 38ff 	mov.w	r8, #4294967295
 8008218:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800821c:	e7d4      	b.n	80081c8 <_strtod_l+0x8d0>
 800821e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008220:	ea13 0f08 	tst.w	r3, r8
 8008224:	e7e0      	b.n	80081e8 <_strtod_l+0x8f0>
 8008226:	f7ff fb43 	bl	80078b0 <sulp>
 800822a:	4602      	mov	r2, r0
 800822c:	460b      	mov	r3, r1
 800822e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008230:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008232:	f7f7 ff99 	bl	8000168 <__aeabi_dsub>
 8008236:	2200      	movs	r2, #0
 8008238:	2300      	movs	r3, #0
 800823a:	4680      	mov	r8, r0
 800823c:	4689      	mov	r9, r1
 800823e:	f7f8 fbb3 	bl	80009a8 <__aeabi_dcmpeq>
 8008242:	2800      	cmp	r0, #0
 8008244:	d0c0      	beq.n	80081c8 <_strtod_l+0x8d0>
 8008246:	e606      	b.n	8007e56 <_strtod_l+0x55e>
 8008248:	4659      	mov	r1, fp
 800824a:	4630      	mov	r0, r6
 800824c:	f7ff fabe 	bl	80077cc <__ratio>
 8008250:	4602      	mov	r2, r0
 8008252:	460b      	mov	r3, r1
 8008254:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008258:	2200      	movs	r2, #0
 800825a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800825e:	f7f8 fbb7 	bl	80009d0 <__aeabi_dcmple>
 8008262:	2800      	cmp	r0, #0
 8008264:	d06f      	beq.n	8008346 <_strtod_l+0xa4e>
 8008266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008268:	2b00      	cmp	r3, #0
 800826a:	d17c      	bne.n	8008366 <_strtod_l+0xa6e>
 800826c:	f1b8 0f00 	cmp.w	r8, #0
 8008270:	d159      	bne.n	8008326 <_strtod_l+0xa2e>
 8008272:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008276:	2b00      	cmp	r3, #0
 8008278:	d17b      	bne.n	8008372 <_strtod_l+0xa7a>
 800827a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800827e:	2200      	movs	r2, #0
 8008280:	4b62      	ldr	r3, [pc, #392]	; (800840c <_strtod_l+0xb14>)
 8008282:	f7f8 fb9b 	bl	80009bc <__aeabi_dcmplt>
 8008286:	2800      	cmp	r0, #0
 8008288:	d15a      	bne.n	8008340 <_strtod_l+0xa48>
 800828a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800828e:	2200      	movs	r2, #0
 8008290:	4b5f      	ldr	r3, [pc, #380]	; (8008410 <_strtod_l+0xb18>)
 8008292:	f7f8 f921 	bl	80004d8 <__aeabi_dmul>
 8008296:	4605      	mov	r5, r0
 8008298:	460f      	mov	r7, r1
 800829a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800829e:	9506      	str	r5, [sp, #24]
 80082a0:	9307      	str	r3, [sp, #28]
 80082a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082a6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80082aa:	4b56      	ldr	r3, [pc, #344]	; (8008404 <_strtod_l+0xb0c>)
 80082ac:	4a55      	ldr	r2, [pc, #340]	; (8008404 <_strtod_l+0xb0c>)
 80082ae:	ea0a 0303 	and.w	r3, sl, r3
 80082b2:	9313      	str	r3, [sp, #76]	; 0x4c
 80082b4:	4b57      	ldr	r3, [pc, #348]	; (8008414 <_strtod_l+0xb1c>)
 80082b6:	ea0a 0202 	and.w	r2, sl, r2
 80082ba:	429a      	cmp	r2, r3
 80082bc:	f040 80b0 	bne.w	8008420 <_strtod_l+0xb28>
 80082c0:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80082c4:	4640      	mov	r0, r8
 80082c6:	4649      	mov	r1, r9
 80082c8:	f7ff f9c2 	bl	8007650 <__ulp>
 80082cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082d0:	f7f8 f902 	bl	80004d8 <__aeabi_dmul>
 80082d4:	4642      	mov	r2, r8
 80082d6:	464b      	mov	r3, r9
 80082d8:	f7f7 ff48 	bl	800016c <__adddf3>
 80082dc:	f8df a124 	ldr.w	sl, [pc, #292]	; 8008404 <_strtod_l+0xb0c>
 80082e0:	4a4d      	ldr	r2, [pc, #308]	; (8008418 <_strtod_l+0xb20>)
 80082e2:	ea01 0a0a 	and.w	sl, r1, sl
 80082e6:	4592      	cmp	sl, r2
 80082e8:	4680      	mov	r8, r0
 80082ea:	d948      	bls.n	800837e <_strtod_l+0xa86>
 80082ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80082ee:	4b46      	ldr	r3, [pc, #280]	; (8008408 <_strtod_l+0xb10>)
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d103      	bne.n	80082fc <_strtod_l+0xa04>
 80082f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082f6:	3301      	adds	r3, #1
 80082f8:	f43f ad3c 	beq.w	8007d74 <_strtod_l+0x47c>
 80082fc:	f04f 38ff 	mov.w	r8, #4294967295
 8008300:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8008408 <_strtod_l+0xb10>
 8008304:	4620      	mov	r0, r4
 8008306:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008308:	f7fe fe76 	bl	8006ff8 <_Bfree>
 800830c:	4620      	mov	r0, r4
 800830e:	9908      	ldr	r1, [sp, #32]
 8008310:	f7fe fe72 	bl	8006ff8 <_Bfree>
 8008314:	4659      	mov	r1, fp
 8008316:	4620      	mov	r0, r4
 8008318:	f7fe fe6e 	bl	8006ff8 <_Bfree>
 800831c:	4631      	mov	r1, r6
 800831e:	4620      	mov	r0, r4
 8008320:	f7fe fe6a 	bl	8006ff8 <_Bfree>
 8008324:	e605      	b.n	8007f32 <_strtod_l+0x63a>
 8008326:	f1b8 0f01 	cmp.w	r8, #1
 800832a:	d103      	bne.n	8008334 <_strtod_l+0xa3c>
 800832c:	f1b9 0f00 	cmp.w	r9, #0
 8008330:	f43f ad91 	beq.w	8007e56 <_strtod_l+0x55e>
 8008334:	2200      	movs	r2, #0
 8008336:	4b39      	ldr	r3, [pc, #228]	; (800841c <_strtod_l+0xb24>)
 8008338:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800833a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800833e:	e016      	b.n	800836e <_strtod_l+0xa76>
 8008340:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008342:	4f33      	ldr	r7, [pc, #204]	; (8008410 <_strtod_l+0xb18>)
 8008344:	e7a9      	b.n	800829a <_strtod_l+0x9a2>
 8008346:	4b32      	ldr	r3, [pc, #200]	; (8008410 <_strtod_l+0xb18>)
 8008348:	2200      	movs	r2, #0
 800834a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800834e:	f7f8 f8c3 	bl	80004d8 <__aeabi_dmul>
 8008352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008354:	4605      	mov	r5, r0
 8008356:	460f      	mov	r7, r1
 8008358:	2b00      	cmp	r3, #0
 800835a:	d09e      	beq.n	800829a <_strtod_l+0x9a2>
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008364:	e79d      	b.n	80082a2 <_strtod_l+0x9aa>
 8008366:	2200      	movs	r2, #0
 8008368:	4b28      	ldr	r3, [pc, #160]	; (800840c <_strtod_l+0xb14>)
 800836a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800836e:	4f27      	ldr	r7, [pc, #156]	; (800840c <_strtod_l+0xb14>)
 8008370:	e797      	b.n	80082a2 <_strtod_l+0x9aa>
 8008372:	2200      	movs	r2, #0
 8008374:	4b29      	ldr	r3, [pc, #164]	; (800841c <_strtod_l+0xb24>)
 8008376:	4645      	mov	r5, r8
 8008378:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800837c:	e7f7      	b.n	800836e <_strtod_l+0xa76>
 800837e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8008382:	9b05      	ldr	r3, [sp, #20]
 8008384:	46ca      	mov	sl, r9
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1bc      	bne.n	8008304 <_strtod_l+0xa0c>
 800838a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800838e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008390:	0d1b      	lsrs	r3, r3, #20
 8008392:	051b      	lsls	r3, r3, #20
 8008394:	429a      	cmp	r2, r3
 8008396:	d1b5      	bne.n	8008304 <_strtod_l+0xa0c>
 8008398:	4628      	mov	r0, r5
 800839a:	4639      	mov	r1, r7
 800839c:	f7f8 feb8 	bl	8001110 <__aeabi_d2lz>
 80083a0:	f7f8 f86c 	bl	800047c <__aeabi_l2d>
 80083a4:	4602      	mov	r2, r0
 80083a6:	460b      	mov	r3, r1
 80083a8:	4628      	mov	r0, r5
 80083aa:	4639      	mov	r1, r7
 80083ac:	f7f7 fedc 	bl	8000168 <__aeabi_dsub>
 80083b0:	460b      	mov	r3, r1
 80083b2:	4602      	mov	r2, r0
 80083b4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 80083b8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80083bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083be:	ea4a 0a08 	orr.w	sl, sl, r8
 80083c2:	ea5a 0a03 	orrs.w	sl, sl, r3
 80083c6:	d06c      	beq.n	80084a2 <_strtod_l+0xbaa>
 80083c8:	a309      	add	r3, pc, #36	; (adr r3, 80083f0 <_strtod_l+0xaf8>)
 80083ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ce:	f7f8 faf5 	bl	80009bc <__aeabi_dcmplt>
 80083d2:	2800      	cmp	r0, #0
 80083d4:	f47f acd8 	bne.w	8007d88 <_strtod_l+0x490>
 80083d8:	a307      	add	r3, pc, #28	; (adr r3, 80083f8 <_strtod_l+0xb00>)
 80083da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083e2:	f7f8 fb09 	bl	80009f8 <__aeabi_dcmpgt>
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d08c      	beq.n	8008304 <_strtod_l+0xa0c>
 80083ea:	e4cd      	b.n	8007d88 <_strtod_l+0x490>
 80083ec:	f3af 8000 	nop.w
 80083f0:	94a03595 	.word	0x94a03595
 80083f4:	3fdfffff 	.word	0x3fdfffff
 80083f8:	35afe535 	.word	0x35afe535
 80083fc:	3fe00000 	.word	0x3fe00000
 8008400:	000fffff 	.word	0x000fffff
 8008404:	7ff00000 	.word	0x7ff00000
 8008408:	7fefffff 	.word	0x7fefffff
 800840c:	3ff00000 	.word	0x3ff00000
 8008410:	3fe00000 	.word	0x3fe00000
 8008414:	7fe00000 	.word	0x7fe00000
 8008418:	7c9fffff 	.word	0x7c9fffff
 800841c:	bff00000 	.word	0xbff00000
 8008420:	9b05      	ldr	r3, [sp, #20]
 8008422:	b333      	cbz	r3, 8008472 <_strtod_l+0xb7a>
 8008424:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008426:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800842a:	d822      	bhi.n	8008472 <_strtod_l+0xb7a>
 800842c:	a328      	add	r3, pc, #160	; (adr r3, 80084d0 <_strtod_l+0xbd8>)
 800842e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008432:	4628      	mov	r0, r5
 8008434:	4639      	mov	r1, r7
 8008436:	f7f8 facb 	bl	80009d0 <__aeabi_dcmple>
 800843a:	b1a0      	cbz	r0, 8008466 <_strtod_l+0xb6e>
 800843c:	4639      	mov	r1, r7
 800843e:	4628      	mov	r0, r5
 8008440:	f7f8 fb22 	bl	8000a88 <__aeabi_d2uiz>
 8008444:	2801      	cmp	r0, #1
 8008446:	bf38      	it	cc
 8008448:	2001      	movcc	r0, #1
 800844a:	f7f7 ffcb 	bl	80003e4 <__aeabi_ui2d>
 800844e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008450:	4605      	mov	r5, r0
 8008452:	460f      	mov	r7, r1
 8008454:	bb03      	cbnz	r3, 8008498 <_strtod_l+0xba0>
 8008456:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800845a:	9014      	str	r0, [sp, #80]	; 0x50
 800845c:	9315      	str	r3, [sp, #84]	; 0x54
 800845e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008462:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008466:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008468:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800846a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800846e:	1a9b      	subs	r3, r3, r2
 8008470:	9311      	str	r3, [sp, #68]	; 0x44
 8008472:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008474:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008476:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800847a:	f7ff f8e9 	bl	8007650 <__ulp>
 800847e:	4602      	mov	r2, r0
 8008480:	460b      	mov	r3, r1
 8008482:	4640      	mov	r0, r8
 8008484:	4649      	mov	r1, r9
 8008486:	f7f8 f827 	bl	80004d8 <__aeabi_dmul>
 800848a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800848c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800848e:	f7f7 fe6d 	bl	800016c <__adddf3>
 8008492:	4680      	mov	r8, r0
 8008494:	4689      	mov	r9, r1
 8008496:	e774      	b.n	8008382 <_strtod_l+0xa8a>
 8008498:	4602      	mov	r2, r0
 800849a:	460b      	mov	r3, r1
 800849c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80084a0:	e7dd      	b.n	800845e <_strtod_l+0xb66>
 80084a2:	a30d      	add	r3, pc, #52	; (adr r3, 80084d8 <_strtod_l+0xbe0>)
 80084a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a8:	f7f8 fa88 	bl	80009bc <__aeabi_dcmplt>
 80084ac:	e79b      	b.n	80083e6 <_strtod_l+0xaee>
 80084ae:	2300      	movs	r3, #0
 80084b0:	930e      	str	r3, [sp, #56]	; 0x38
 80084b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80084b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80084b6:	6013      	str	r3, [r2, #0]
 80084b8:	f7ff ba5b 	b.w	8007972 <_strtod_l+0x7a>
 80084bc:	2a65      	cmp	r2, #101	; 0x65
 80084be:	f43f ab52 	beq.w	8007b66 <_strtod_l+0x26e>
 80084c2:	2a45      	cmp	r2, #69	; 0x45
 80084c4:	f43f ab4f 	beq.w	8007b66 <_strtod_l+0x26e>
 80084c8:	2301      	movs	r3, #1
 80084ca:	f7ff bb87 	b.w	8007bdc <_strtod_l+0x2e4>
 80084ce:	bf00      	nop
 80084d0:	ffc00000 	.word	0xffc00000
 80084d4:	41dfffff 	.word	0x41dfffff
 80084d8:	94a03595 	.word	0x94a03595
 80084dc:	3fcfffff 	.word	0x3fcfffff

080084e0 <_strtod_r>:
 80084e0:	4b01      	ldr	r3, [pc, #4]	; (80084e8 <_strtod_r+0x8>)
 80084e2:	f7ff ba09 	b.w	80078f8 <_strtod_l>
 80084e6:	bf00      	nop
 80084e8:	2000006c 	.word	0x2000006c

080084ec <_strtol_l.constprop.0>:
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084f2:	4686      	mov	lr, r0
 80084f4:	4690      	mov	r8, r2
 80084f6:	d001      	beq.n	80084fc <_strtol_l.constprop.0+0x10>
 80084f8:	2b24      	cmp	r3, #36	; 0x24
 80084fa:	d906      	bls.n	800850a <_strtol_l.constprop.0+0x1e>
 80084fc:	f7fd fd90 	bl	8006020 <__errno>
 8008500:	2316      	movs	r3, #22
 8008502:	6003      	str	r3, [r0, #0]
 8008504:	2000      	movs	r0, #0
 8008506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800850a:	460d      	mov	r5, r1
 800850c:	4835      	ldr	r0, [pc, #212]	; (80085e4 <_strtol_l.constprop.0+0xf8>)
 800850e:	462a      	mov	r2, r5
 8008510:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008514:	5d06      	ldrb	r6, [r0, r4]
 8008516:	f016 0608 	ands.w	r6, r6, #8
 800851a:	d1f8      	bne.n	800850e <_strtol_l.constprop.0+0x22>
 800851c:	2c2d      	cmp	r4, #45	; 0x2d
 800851e:	d12e      	bne.n	800857e <_strtol_l.constprop.0+0x92>
 8008520:	2601      	movs	r6, #1
 8008522:	782c      	ldrb	r4, [r5, #0]
 8008524:	1c95      	adds	r5, r2, #2
 8008526:	2b00      	cmp	r3, #0
 8008528:	d057      	beq.n	80085da <_strtol_l.constprop.0+0xee>
 800852a:	2b10      	cmp	r3, #16
 800852c:	d109      	bne.n	8008542 <_strtol_l.constprop.0+0x56>
 800852e:	2c30      	cmp	r4, #48	; 0x30
 8008530:	d107      	bne.n	8008542 <_strtol_l.constprop.0+0x56>
 8008532:	782a      	ldrb	r2, [r5, #0]
 8008534:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008538:	2a58      	cmp	r2, #88	; 0x58
 800853a:	d149      	bne.n	80085d0 <_strtol_l.constprop.0+0xe4>
 800853c:	2310      	movs	r3, #16
 800853e:	786c      	ldrb	r4, [r5, #1]
 8008540:	3502      	adds	r5, #2
 8008542:	2200      	movs	r2, #0
 8008544:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8008548:	f10c 3cff 	add.w	ip, ip, #4294967295
 800854c:	fbbc f9f3 	udiv	r9, ip, r3
 8008550:	4610      	mov	r0, r2
 8008552:	fb03 ca19 	mls	sl, r3, r9, ip
 8008556:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800855a:	2f09      	cmp	r7, #9
 800855c:	d814      	bhi.n	8008588 <_strtol_l.constprop.0+0x9c>
 800855e:	463c      	mov	r4, r7
 8008560:	42a3      	cmp	r3, r4
 8008562:	dd20      	ble.n	80085a6 <_strtol_l.constprop.0+0xba>
 8008564:	1c57      	adds	r7, r2, #1
 8008566:	d007      	beq.n	8008578 <_strtol_l.constprop.0+0x8c>
 8008568:	4581      	cmp	r9, r0
 800856a:	d319      	bcc.n	80085a0 <_strtol_l.constprop.0+0xb4>
 800856c:	d101      	bne.n	8008572 <_strtol_l.constprop.0+0x86>
 800856e:	45a2      	cmp	sl, r4
 8008570:	db16      	blt.n	80085a0 <_strtol_l.constprop.0+0xb4>
 8008572:	2201      	movs	r2, #1
 8008574:	fb00 4003 	mla	r0, r0, r3, r4
 8008578:	f815 4b01 	ldrb.w	r4, [r5], #1
 800857c:	e7eb      	b.n	8008556 <_strtol_l.constprop.0+0x6a>
 800857e:	2c2b      	cmp	r4, #43	; 0x2b
 8008580:	bf04      	itt	eq
 8008582:	782c      	ldrbeq	r4, [r5, #0]
 8008584:	1c95      	addeq	r5, r2, #2
 8008586:	e7ce      	b.n	8008526 <_strtol_l.constprop.0+0x3a>
 8008588:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800858c:	2f19      	cmp	r7, #25
 800858e:	d801      	bhi.n	8008594 <_strtol_l.constprop.0+0xa8>
 8008590:	3c37      	subs	r4, #55	; 0x37
 8008592:	e7e5      	b.n	8008560 <_strtol_l.constprop.0+0x74>
 8008594:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008598:	2f19      	cmp	r7, #25
 800859a:	d804      	bhi.n	80085a6 <_strtol_l.constprop.0+0xba>
 800859c:	3c57      	subs	r4, #87	; 0x57
 800859e:	e7df      	b.n	8008560 <_strtol_l.constprop.0+0x74>
 80085a0:	f04f 32ff 	mov.w	r2, #4294967295
 80085a4:	e7e8      	b.n	8008578 <_strtol_l.constprop.0+0x8c>
 80085a6:	1c53      	adds	r3, r2, #1
 80085a8:	d108      	bne.n	80085bc <_strtol_l.constprop.0+0xd0>
 80085aa:	2322      	movs	r3, #34	; 0x22
 80085ac:	4660      	mov	r0, ip
 80085ae:	f8ce 3000 	str.w	r3, [lr]
 80085b2:	f1b8 0f00 	cmp.w	r8, #0
 80085b6:	d0a6      	beq.n	8008506 <_strtol_l.constprop.0+0x1a>
 80085b8:	1e69      	subs	r1, r5, #1
 80085ba:	e006      	b.n	80085ca <_strtol_l.constprop.0+0xde>
 80085bc:	b106      	cbz	r6, 80085c0 <_strtol_l.constprop.0+0xd4>
 80085be:	4240      	negs	r0, r0
 80085c0:	f1b8 0f00 	cmp.w	r8, #0
 80085c4:	d09f      	beq.n	8008506 <_strtol_l.constprop.0+0x1a>
 80085c6:	2a00      	cmp	r2, #0
 80085c8:	d1f6      	bne.n	80085b8 <_strtol_l.constprop.0+0xcc>
 80085ca:	f8c8 1000 	str.w	r1, [r8]
 80085ce:	e79a      	b.n	8008506 <_strtol_l.constprop.0+0x1a>
 80085d0:	2430      	movs	r4, #48	; 0x30
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1b5      	bne.n	8008542 <_strtol_l.constprop.0+0x56>
 80085d6:	2308      	movs	r3, #8
 80085d8:	e7b3      	b.n	8008542 <_strtol_l.constprop.0+0x56>
 80085da:	2c30      	cmp	r4, #48	; 0x30
 80085dc:	d0a9      	beq.n	8008532 <_strtol_l.constprop.0+0x46>
 80085de:	230a      	movs	r3, #10
 80085e0:	e7af      	b.n	8008542 <_strtol_l.constprop.0+0x56>
 80085e2:	bf00      	nop
 80085e4:	0800a2b1 	.word	0x0800a2b1

080085e8 <_strtol_r>:
 80085e8:	f7ff bf80 	b.w	80084ec <_strtol_l.constprop.0>

080085ec <__ssputs_r>:
 80085ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085f0:	461f      	mov	r7, r3
 80085f2:	688e      	ldr	r6, [r1, #8]
 80085f4:	4682      	mov	sl, r0
 80085f6:	42be      	cmp	r6, r7
 80085f8:	460c      	mov	r4, r1
 80085fa:	4690      	mov	r8, r2
 80085fc:	680b      	ldr	r3, [r1, #0]
 80085fe:	d82c      	bhi.n	800865a <__ssputs_r+0x6e>
 8008600:	898a      	ldrh	r2, [r1, #12]
 8008602:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008606:	d026      	beq.n	8008656 <__ssputs_r+0x6a>
 8008608:	6965      	ldr	r5, [r4, #20]
 800860a:	6909      	ldr	r1, [r1, #16]
 800860c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008610:	eba3 0901 	sub.w	r9, r3, r1
 8008614:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008618:	1c7b      	adds	r3, r7, #1
 800861a:	444b      	add	r3, r9
 800861c:	106d      	asrs	r5, r5, #1
 800861e:	429d      	cmp	r5, r3
 8008620:	bf38      	it	cc
 8008622:	461d      	movcc	r5, r3
 8008624:	0553      	lsls	r3, r2, #21
 8008626:	d527      	bpl.n	8008678 <__ssputs_r+0x8c>
 8008628:	4629      	mov	r1, r5
 800862a:	f7fe fc19 	bl	8006e60 <_malloc_r>
 800862e:	4606      	mov	r6, r0
 8008630:	b360      	cbz	r0, 800868c <__ssputs_r+0xa0>
 8008632:	464a      	mov	r2, r9
 8008634:	6921      	ldr	r1, [r4, #16]
 8008636:	f000 fda7 	bl	8009188 <memcpy>
 800863a:	89a3      	ldrh	r3, [r4, #12]
 800863c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008644:	81a3      	strh	r3, [r4, #12]
 8008646:	6126      	str	r6, [r4, #16]
 8008648:	444e      	add	r6, r9
 800864a:	6026      	str	r6, [r4, #0]
 800864c:	463e      	mov	r6, r7
 800864e:	6165      	str	r5, [r4, #20]
 8008650:	eba5 0509 	sub.w	r5, r5, r9
 8008654:	60a5      	str	r5, [r4, #8]
 8008656:	42be      	cmp	r6, r7
 8008658:	d900      	bls.n	800865c <__ssputs_r+0x70>
 800865a:	463e      	mov	r6, r7
 800865c:	4632      	mov	r2, r6
 800865e:	4641      	mov	r1, r8
 8008660:	6820      	ldr	r0, [r4, #0]
 8008662:	f000 fd54 	bl	800910e <memmove>
 8008666:	2000      	movs	r0, #0
 8008668:	68a3      	ldr	r3, [r4, #8]
 800866a:	1b9b      	subs	r3, r3, r6
 800866c:	60a3      	str	r3, [r4, #8]
 800866e:	6823      	ldr	r3, [r4, #0]
 8008670:	4433      	add	r3, r6
 8008672:	6023      	str	r3, [r4, #0]
 8008674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008678:	462a      	mov	r2, r5
 800867a:	f001 f936 	bl	80098ea <_realloc_r>
 800867e:	4606      	mov	r6, r0
 8008680:	2800      	cmp	r0, #0
 8008682:	d1e0      	bne.n	8008646 <__ssputs_r+0x5a>
 8008684:	4650      	mov	r0, sl
 8008686:	6921      	ldr	r1, [r4, #16]
 8008688:	f7fe fb7a 	bl	8006d80 <_free_r>
 800868c:	230c      	movs	r3, #12
 800868e:	f8ca 3000 	str.w	r3, [sl]
 8008692:	89a3      	ldrh	r3, [r4, #12]
 8008694:	f04f 30ff 	mov.w	r0, #4294967295
 8008698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800869c:	81a3      	strh	r3, [r4, #12]
 800869e:	e7e9      	b.n	8008674 <__ssputs_r+0x88>

080086a0 <_svfiprintf_r>:
 80086a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086a4:	4698      	mov	r8, r3
 80086a6:	898b      	ldrh	r3, [r1, #12]
 80086a8:	4607      	mov	r7, r0
 80086aa:	061b      	lsls	r3, r3, #24
 80086ac:	460d      	mov	r5, r1
 80086ae:	4614      	mov	r4, r2
 80086b0:	b09d      	sub	sp, #116	; 0x74
 80086b2:	d50e      	bpl.n	80086d2 <_svfiprintf_r+0x32>
 80086b4:	690b      	ldr	r3, [r1, #16]
 80086b6:	b963      	cbnz	r3, 80086d2 <_svfiprintf_r+0x32>
 80086b8:	2140      	movs	r1, #64	; 0x40
 80086ba:	f7fe fbd1 	bl	8006e60 <_malloc_r>
 80086be:	6028      	str	r0, [r5, #0]
 80086c0:	6128      	str	r0, [r5, #16]
 80086c2:	b920      	cbnz	r0, 80086ce <_svfiprintf_r+0x2e>
 80086c4:	230c      	movs	r3, #12
 80086c6:	603b      	str	r3, [r7, #0]
 80086c8:	f04f 30ff 	mov.w	r0, #4294967295
 80086cc:	e0d0      	b.n	8008870 <_svfiprintf_r+0x1d0>
 80086ce:	2340      	movs	r3, #64	; 0x40
 80086d0:	616b      	str	r3, [r5, #20]
 80086d2:	2300      	movs	r3, #0
 80086d4:	9309      	str	r3, [sp, #36]	; 0x24
 80086d6:	2320      	movs	r3, #32
 80086d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086dc:	2330      	movs	r3, #48	; 0x30
 80086de:	f04f 0901 	mov.w	r9, #1
 80086e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80086e6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008888 <_svfiprintf_r+0x1e8>
 80086ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086ee:	4623      	mov	r3, r4
 80086f0:	469a      	mov	sl, r3
 80086f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086f6:	b10a      	cbz	r2, 80086fc <_svfiprintf_r+0x5c>
 80086f8:	2a25      	cmp	r2, #37	; 0x25
 80086fa:	d1f9      	bne.n	80086f0 <_svfiprintf_r+0x50>
 80086fc:	ebba 0b04 	subs.w	fp, sl, r4
 8008700:	d00b      	beq.n	800871a <_svfiprintf_r+0x7a>
 8008702:	465b      	mov	r3, fp
 8008704:	4622      	mov	r2, r4
 8008706:	4629      	mov	r1, r5
 8008708:	4638      	mov	r0, r7
 800870a:	f7ff ff6f 	bl	80085ec <__ssputs_r>
 800870e:	3001      	adds	r0, #1
 8008710:	f000 80a9 	beq.w	8008866 <_svfiprintf_r+0x1c6>
 8008714:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008716:	445a      	add	r2, fp
 8008718:	9209      	str	r2, [sp, #36]	; 0x24
 800871a:	f89a 3000 	ldrb.w	r3, [sl]
 800871e:	2b00      	cmp	r3, #0
 8008720:	f000 80a1 	beq.w	8008866 <_svfiprintf_r+0x1c6>
 8008724:	2300      	movs	r3, #0
 8008726:	f04f 32ff 	mov.w	r2, #4294967295
 800872a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800872e:	f10a 0a01 	add.w	sl, sl, #1
 8008732:	9304      	str	r3, [sp, #16]
 8008734:	9307      	str	r3, [sp, #28]
 8008736:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800873a:	931a      	str	r3, [sp, #104]	; 0x68
 800873c:	4654      	mov	r4, sl
 800873e:	2205      	movs	r2, #5
 8008740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008744:	4850      	ldr	r0, [pc, #320]	; (8008888 <_svfiprintf_r+0x1e8>)
 8008746:	f7fd fc98 	bl	800607a <memchr>
 800874a:	9a04      	ldr	r2, [sp, #16]
 800874c:	b9d8      	cbnz	r0, 8008786 <_svfiprintf_r+0xe6>
 800874e:	06d0      	lsls	r0, r2, #27
 8008750:	bf44      	itt	mi
 8008752:	2320      	movmi	r3, #32
 8008754:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008758:	0711      	lsls	r1, r2, #28
 800875a:	bf44      	itt	mi
 800875c:	232b      	movmi	r3, #43	; 0x2b
 800875e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008762:	f89a 3000 	ldrb.w	r3, [sl]
 8008766:	2b2a      	cmp	r3, #42	; 0x2a
 8008768:	d015      	beq.n	8008796 <_svfiprintf_r+0xf6>
 800876a:	4654      	mov	r4, sl
 800876c:	2000      	movs	r0, #0
 800876e:	f04f 0c0a 	mov.w	ip, #10
 8008772:	9a07      	ldr	r2, [sp, #28]
 8008774:	4621      	mov	r1, r4
 8008776:	f811 3b01 	ldrb.w	r3, [r1], #1
 800877a:	3b30      	subs	r3, #48	; 0x30
 800877c:	2b09      	cmp	r3, #9
 800877e:	d94d      	bls.n	800881c <_svfiprintf_r+0x17c>
 8008780:	b1b0      	cbz	r0, 80087b0 <_svfiprintf_r+0x110>
 8008782:	9207      	str	r2, [sp, #28]
 8008784:	e014      	b.n	80087b0 <_svfiprintf_r+0x110>
 8008786:	eba0 0308 	sub.w	r3, r0, r8
 800878a:	fa09 f303 	lsl.w	r3, r9, r3
 800878e:	4313      	orrs	r3, r2
 8008790:	46a2      	mov	sl, r4
 8008792:	9304      	str	r3, [sp, #16]
 8008794:	e7d2      	b.n	800873c <_svfiprintf_r+0x9c>
 8008796:	9b03      	ldr	r3, [sp, #12]
 8008798:	1d19      	adds	r1, r3, #4
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	9103      	str	r1, [sp, #12]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	bfbb      	ittet	lt
 80087a2:	425b      	neglt	r3, r3
 80087a4:	f042 0202 	orrlt.w	r2, r2, #2
 80087a8:	9307      	strge	r3, [sp, #28]
 80087aa:	9307      	strlt	r3, [sp, #28]
 80087ac:	bfb8      	it	lt
 80087ae:	9204      	strlt	r2, [sp, #16]
 80087b0:	7823      	ldrb	r3, [r4, #0]
 80087b2:	2b2e      	cmp	r3, #46	; 0x2e
 80087b4:	d10c      	bne.n	80087d0 <_svfiprintf_r+0x130>
 80087b6:	7863      	ldrb	r3, [r4, #1]
 80087b8:	2b2a      	cmp	r3, #42	; 0x2a
 80087ba:	d134      	bne.n	8008826 <_svfiprintf_r+0x186>
 80087bc:	9b03      	ldr	r3, [sp, #12]
 80087be:	3402      	adds	r4, #2
 80087c0:	1d1a      	adds	r2, r3, #4
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	9203      	str	r2, [sp, #12]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	bfb8      	it	lt
 80087ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80087ce:	9305      	str	r3, [sp, #20]
 80087d0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800888c <_svfiprintf_r+0x1ec>
 80087d4:	2203      	movs	r2, #3
 80087d6:	4650      	mov	r0, sl
 80087d8:	7821      	ldrb	r1, [r4, #0]
 80087da:	f7fd fc4e 	bl	800607a <memchr>
 80087de:	b138      	cbz	r0, 80087f0 <_svfiprintf_r+0x150>
 80087e0:	2240      	movs	r2, #64	; 0x40
 80087e2:	9b04      	ldr	r3, [sp, #16]
 80087e4:	eba0 000a 	sub.w	r0, r0, sl
 80087e8:	4082      	lsls	r2, r0
 80087ea:	4313      	orrs	r3, r2
 80087ec:	3401      	adds	r4, #1
 80087ee:	9304      	str	r3, [sp, #16]
 80087f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087f4:	2206      	movs	r2, #6
 80087f6:	4826      	ldr	r0, [pc, #152]	; (8008890 <_svfiprintf_r+0x1f0>)
 80087f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087fc:	f7fd fc3d 	bl	800607a <memchr>
 8008800:	2800      	cmp	r0, #0
 8008802:	d038      	beq.n	8008876 <_svfiprintf_r+0x1d6>
 8008804:	4b23      	ldr	r3, [pc, #140]	; (8008894 <_svfiprintf_r+0x1f4>)
 8008806:	bb1b      	cbnz	r3, 8008850 <_svfiprintf_r+0x1b0>
 8008808:	9b03      	ldr	r3, [sp, #12]
 800880a:	3307      	adds	r3, #7
 800880c:	f023 0307 	bic.w	r3, r3, #7
 8008810:	3308      	adds	r3, #8
 8008812:	9303      	str	r3, [sp, #12]
 8008814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008816:	4433      	add	r3, r6
 8008818:	9309      	str	r3, [sp, #36]	; 0x24
 800881a:	e768      	b.n	80086ee <_svfiprintf_r+0x4e>
 800881c:	460c      	mov	r4, r1
 800881e:	2001      	movs	r0, #1
 8008820:	fb0c 3202 	mla	r2, ip, r2, r3
 8008824:	e7a6      	b.n	8008774 <_svfiprintf_r+0xd4>
 8008826:	2300      	movs	r3, #0
 8008828:	f04f 0c0a 	mov.w	ip, #10
 800882c:	4619      	mov	r1, r3
 800882e:	3401      	adds	r4, #1
 8008830:	9305      	str	r3, [sp, #20]
 8008832:	4620      	mov	r0, r4
 8008834:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008838:	3a30      	subs	r2, #48	; 0x30
 800883a:	2a09      	cmp	r2, #9
 800883c:	d903      	bls.n	8008846 <_svfiprintf_r+0x1a6>
 800883e:	2b00      	cmp	r3, #0
 8008840:	d0c6      	beq.n	80087d0 <_svfiprintf_r+0x130>
 8008842:	9105      	str	r1, [sp, #20]
 8008844:	e7c4      	b.n	80087d0 <_svfiprintf_r+0x130>
 8008846:	4604      	mov	r4, r0
 8008848:	2301      	movs	r3, #1
 800884a:	fb0c 2101 	mla	r1, ip, r1, r2
 800884e:	e7f0      	b.n	8008832 <_svfiprintf_r+0x192>
 8008850:	ab03      	add	r3, sp, #12
 8008852:	9300      	str	r3, [sp, #0]
 8008854:	462a      	mov	r2, r5
 8008856:	4638      	mov	r0, r7
 8008858:	4b0f      	ldr	r3, [pc, #60]	; (8008898 <_svfiprintf_r+0x1f8>)
 800885a:	a904      	add	r1, sp, #16
 800885c:	f7fc fc38 	bl	80050d0 <_printf_float>
 8008860:	1c42      	adds	r2, r0, #1
 8008862:	4606      	mov	r6, r0
 8008864:	d1d6      	bne.n	8008814 <_svfiprintf_r+0x174>
 8008866:	89ab      	ldrh	r3, [r5, #12]
 8008868:	065b      	lsls	r3, r3, #25
 800886a:	f53f af2d 	bmi.w	80086c8 <_svfiprintf_r+0x28>
 800886e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008870:	b01d      	add	sp, #116	; 0x74
 8008872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008876:	ab03      	add	r3, sp, #12
 8008878:	9300      	str	r3, [sp, #0]
 800887a:	462a      	mov	r2, r5
 800887c:	4638      	mov	r0, r7
 800887e:	4b06      	ldr	r3, [pc, #24]	; (8008898 <_svfiprintf_r+0x1f8>)
 8008880:	a904      	add	r1, sp, #16
 8008882:	f7fc fec5 	bl	8005610 <_printf_i>
 8008886:	e7eb      	b.n	8008860 <_svfiprintf_r+0x1c0>
 8008888:	0800a3b1 	.word	0x0800a3b1
 800888c:	0800a3b7 	.word	0x0800a3b7
 8008890:	0800a3bb 	.word	0x0800a3bb
 8008894:	080050d1 	.word	0x080050d1
 8008898:	080085ed 	.word	0x080085ed

0800889c <_sungetc_r>:
 800889c:	b538      	push	{r3, r4, r5, lr}
 800889e:	1c4b      	adds	r3, r1, #1
 80088a0:	4614      	mov	r4, r2
 80088a2:	d103      	bne.n	80088ac <_sungetc_r+0x10>
 80088a4:	f04f 35ff 	mov.w	r5, #4294967295
 80088a8:	4628      	mov	r0, r5
 80088aa:	bd38      	pop	{r3, r4, r5, pc}
 80088ac:	8993      	ldrh	r3, [r2, #12]
 80088ae:	b2cd      	uxtb	r5, r1
 80088b0:	f023 0320 	bic.w	r3, r3, #32
 80088b4:	8193      	strh	r3, [r2, #12]
 80088b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088b8:	6852      	ldr	r2, [r2, #4]
 80088ba:	b18b      	cbz	r3, 80088e0 <_sungetc_r+0x44>
 80088bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80088be:	4293      	cmp	r3, r2
 80088c0:	dd08      	ble.n	80088d4 <_sungetc_r+0x38>
 80088c2:	6823      	ldr	r3, [r4, #0]
 80088c4:	1e5a      	subs	r2, r3, #1
 80088c6:	6022      	str	r2, [r4, #0]
 80088c8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80088cc:	6863      	ldr	r3, [r4, #4]
 80088ce:	3301      	adds	r3, #1
 80088d0:	6063      	str	r3, [r4, #4]
 80088d2:	e7e9      	b.n	80088a8 <_sungetc_r+0xc>
 80088d4:	4621      	mov	r1, r4
 80088d6:	f000 fbe2 	bl	800909e <__submore>
 80088da:	2800      	cmp	r0, #0
 80088dc:	d0f1      	beq.n	80088c2 <_sungetc_r+0x26>
 80088de:	e7e1      	b.n	80088a4 <_sungetc_r+0x8>
 80088e0:	6921      	ldr	r1, [r4, #16]
 80088e2:	6823      	ldr	r3, [r4, #0]
 80088e4:	b151      	cbz	r1, 80088fc <_sungetc_r+0x60>
 80088e6:	4299      	cmp	r1, r3
 80088e8:	d208      	bcs.n	80088fc <_sungetc_r+0x60>
 80088ea:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80088ee:	42a9      	cmp	r1, r5
 80088f0:	d104      	bne.n	80088fc <_sungetc_r+0x60>
 80088f2:	3b01      	subs	r3, #1
 80088f4:	3201      	adds	r2, #1
 80088f6:	6023      	str	r3, [r4, #0]
 80088f8:	6062      	str	r2, [r4, #4]
 80088fa:	e7d5      	b.n	80088a8 <_sungetc_r+0xc>
 80088fc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008904:	6363      	str	r3, [r4, #52]	; 0x34
 8008906:	2303      	movs	r3, #3
 8008908:	63a3      	str	r3, [r4, #56]	; 0x38
 800890a:	4623      	mov	r3, r4
 800890c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008910:	6023      	str	r3, [r4, #0]
 8008912:	2301      	movs	r3, #1
 8008914:	e7dc      	b.n	80088d0 <_sungetc_r+0x34>

08008916 <__ssrefill_r>:
 8008916:	b510      	push	{r4, lr}
 8008918:	460c      	mov	r4, r1
 800891a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800891c:	b169      	cbz	r1, 800893a <__ssrefill_r+0x24>
 800891e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008922:	4299      	cmp	r1, r3
 8008924:	d001      	beq.n	800892a <__ssrefill_r+0x14>
 8008926:	f7fe fa2b 	bl	8006d80 <_free_r>
 800892a:	2000      	movs	r0, #0
 800892c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800892e:	6360      	str	r0, [r4, #52]	; 0x34
 8008930:	6063      	str	r3, [r4, #4]
 8008932:	b113      	cbz	r3, 800893a <__ssrefill_r+0x24>
 8008934:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008936:	6023      	str	r3, [r4, #0]
 8008938:	bd10      	pop	{r4, pc}
 800893a:	6923      	ldr	r3, [r4, #16]
 800893c:	f04f 30ff 	mov.w	r0, #4294967295
 8008940:	6023      	str	r3, [r4, #0]
 8008942:	2300      	movs	r3, #0
 8008944:	6063      	str	r3, [r4, #4]
 8008946:	89a3      	ldrh	r3, [r4, #12]
 8008948:	f043 0320 	orr.w	r3, r3, #32
 800894c:	81a3      	strh	r3, [r4, #12]
 800894e:	e7f3      	b.n	8008938 <__ssrefill_r+0x22>

08008950 <__ssvfiscanf_r>:
 8008950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008954:	460c      	mov	r4, r1
 8008956:	2100      	movs	r1, #0
 8008958:	4606      	mov	r6, r0
 800895a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800895e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008962:	49a6      	ldr	r1, [pc, #664]	; (8008bfc <__ssvfiscanf_r+0x2ac>)
 8008964:	f10d 0804 	add.w	r8, sp, #4
 8008968:	91a0      	str	r1, [sp, #640]	; 0x280
 800896a:	49a5      	ldr	r1, [pc, #660]	; (8008c00 <__ssvfiscanf_r+0x2b0>)
 800896c:	4fa5      	ldr	r7, [pc, #660]	; (8008c04 <__ssvfiscanf_r+0x2b4>)
 800896e:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008c08 <__ssvfiscanf_r+0x2b8>
 8008972:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008976:	91a1      	str	r1, [sp, #644]	; 0x284
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	7813      	ldrb	r3, [r2, #0]
 800897c:	2b00      	cmp	r3, #0
 800897e:	f000 815a 	beq.w	8008c36 <__ssvfiscanf_r+0x2e6>
 8008982:	5cf9      	ldrb	r1, [r7, r3]
 8008984:	1c55      	adds	r5, r2, #1
 8008986:	f011 0108 	ands.w	r1, r1, #8
 800898a:	d019      	beq.n	80089c0 <__ssvfiscanf_r+0x70>
 800898c:	6863      	ldr	r3, [r4, #4]
 800898e:	2b00      	cmp	r3, #0
 8008990:	dd0f      	ble.n	80089b2 <__ssvfiscanf_r+0x62>
 8008992:	6823      	ldr	r3, [r4, #0]
 8008994:	781a      	ldrb	r2, [r3, #0]
 8008996:	5cba      	ldrb	r2, [r7, r2]
 8008998:	0712      	lsls	r2, r2, #28
 800899a:	d401      	bmi.n	80089a0 <__ssvfiscanf_r+0x50>
 800899c:	462a      	mov	r2, r5
 800899e:	e7ec      	b.n	800897a <__ssvfiscanf_r+0x2a>
 80089a0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80089a2:	3301      	adds	r3, #1
 80089a4:	3201      	adds	r2, #1
 80089a6:	9245      	str	r2, [sp, #276]	; 0x114
 80089a8:	6862      	ldr	r2, [r4, #4]
 80089aa:	6023      	str	r3, [r4, #0]
 80089ac:	3a01      	subs	r2, #1
 80089ae:	6062      	str	r2, [r4, #4]
 80089b0:	e7ec      	b.n	800898c <__ssvfiscanf_r+0x3c>
 80089b2:	4621      	mov	r1, r4
 80089b4:	4630      	mov	r0, r6
 80089b6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80089b8:	4798      	blx	r3
 80089ba:	2800      	cmp	r0, #0
 80089bc:	d0e9      	beq.n	8008992 <__ssvfiscanf_r+0x42>
 80089be:	e7ed      	b.n	800899c <__ssvfiscanf_r+0x4c>
 80089c0:	2b25      	cmp	r3, #37	; 0x25
 80089c2:	d012      	beq.n	80089ea <__ssvfiscanf_r+0x9a>
 80089c4:	469a      	mov	sl, r3
 80089c6:	6863      	ldr	r3, [r4, #4]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f340 8092 	ble.w	8008af2 <__ssvfiscanf_r+0x1a2>
 80089ce:	6822      	ldr	r2, [r4, #0]
 80089d0:	7813      	ldrb	r3, [r2, #0]
 80089d2:	4553      	cmp	r3, sl
 80089d4:	f040 812f 	bne.w	8008c36 <__ssvfiscanf_r+0x2e6>
 80089d8:	6863      	ldr	r3, [r4, #4]
 80089da:	3201      	adds	r2, #1
 80089dc:	3b01      	subs	r3, #1
 80089de:	6063      	str	r3, [r4, #4]
 80089e0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80089e2:	6022      	str	r2, [r4, #0]
 80089e4:	3301      	adds	r3, #1
 80089e6:	9345      	str	r3, [sp, #276]	; 0x114
 80089e8:	e7d8      	b.n	800899c <__ssvfiscanf_r+0x4c>
 80089ea:	9141      	str	r1, [sp, #260]	; 0x104
 80089ec:	9143      	str	r1, [sp, #268]	; 0x10c
 80089ee:	7853      	ldrb	r3, [r2, #1]
 80089f0:	2b2a      	cmp	r3, #42	; 0x2a
 80089f2:	bf04      	itt	eq
 80089f4:	2310      	moveq	r3, #16
 80089f6:	1c95      	addeq	r5, r2, #2
 80089f8:	f04f 020a 	mov.w	r2, #10
 80089fc:	bf08      	it	eq
 80089fe:	9341      	streq	r3, [sp, #260]	; 0x104
 8008a00:	46aa      	mov	sl, r5
 8008a02:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008a06:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008a0a:	2b09      	cmp	r3, #9
 8008a0c:	d91c      	bls.n	8008a48 <__ssvfiscanf_r+0xf8>
 8008a0e:	2203      	movs	r2, #3
 8008a10:	487d      	ldr	r0, [pc, #500]	; (8008c08 <__ssvfiscanf_r+0x2b8>)
 8008a12:	f7fd fb32 	bl	800607a <memchr>
 8008a16:	b138      	cbz	r0, 8008a28 <__ssvfiscanf_r+0xd8>
 8008a18:	2301      	movs	r3, #1
 8008a1a:	4655      	mov	r5, sl
 8008a1c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008a1e:	eba0 0009 	sub.w	r0, r0, r9
 8008a22:	4083      	lsls	r3, r0
 8008a24:	4313      	orrs	r3, r2
 8008a26:	9341      	str	r3, [sp, #260]	; 0x104
 8008a28:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008a2c:	2b78      	cmp	r3, #120	; 0x78
 8008a2e:	d806      	bhi.n	8008a3e <__ssvfiscanf_r+0xee>
 8008a30:	2b57      	cmp	r3, #87	; 0x57
 8008a32:	d810      	bhi.n	8008a56 <__ssvfiscanf_r+0x106>
 8008a34:	2b25      	cmp	r3, #37	; 0x25
 8008a36:	d0c5      	beq.n	80089c4 <__ssvfiscanf_r+0x74>
 8008a38:	d856      	bhi.n	8008ae8 <__ssvfiscanf_r+0x198>
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d064      	beq.n	8008b08 <__ssvfiscanf_r+0x1b8>
 8008a3e:	2303      	movs	r3, #3
 8008a40:	9347      	str	r3, [sp, #284]	; 0x11c
 8008a42:	230a      	movs	r3, #10
 8008a44:	9342      	str	r3, [sp, #264]	; 0x108
 8008a46:	e075      	b.n	8008b34 <__ssvfiscanf_r+0x1e4>
 8008a48:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008a4a:	4655      	mov	r5, sl
 8008a4c:	fb02 1103 	mla	r1, r2, r3, r1
 8008a50:	3930      	subs	r1, #48	; 0x30
 8008a52:	9143      	str	r1, [sp, #268]	; 0x10c
 8008a54:	e7d4      	b.n	8008a00 <__ssvfiscanf_r+0xb0>
 8008a56:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008a5a:	2a20      	cmp	r2, #32
 8008a5c:	d8ef      	bhi.n	8008a3e <__ssvfiscanf_r+0xee>
 8008a5e:	a101      	add	r1, pc, #4	; (adr r1, 8008a64 <__ssvfiscanf_r+0x114>)
 8008a60:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008a64:	08008b17 	.word	0x08008b17
 8008a68:	08008a3f 	.word	0x08008a3f
 8008a6c:	08008a3f 	.word	0x08008a3f
 8008a70:	08008b75 	.word	0x08008b75
 8008a74:	08008a3f 	.word	0x08008a3f
 8008a78:	08008a3f 	.word	0x08008a3f
 8008a7c:	08008a3f 	.word	0x08008a3f
 8008a80:	08008a3f 	.word	0x08008a3f
 8008a84:	08008a3f 	.word	0x08008a3f
 8008a88:	08008a3f 	.word	0x08008a3f
 8008a8c:	08008a3f 	.word	0x08008a3f
 8008a90:	08008b8b 	.word	0x08008b8b
 8008a94:	08008b71 	.word	0x08008b71
 8008a98:	08008aef 	.word	0x08008aef
 8008a9c:	08008aef 	.word	0x08008aef
 8008aa0:	08008aef 	.word	0x08008aef
 8008aa4:	08008a3f 	.word	0x08008a3f
 8008aa8:	08008b2d 	.word	0x08008b2d
 8008aac:	08008a3f 	.word	0x08008a3f
 8008ab0:	08008a3f 	.word	0x08008a3f
 8008ab4:	08008a3f 	.word	0x08008a3f
 8008ab8:	08008a3f 	.word	0x08008a3f
 8008abc:	08008b9b 	.word	0x08008b9b
 8008ac0:	08008b69 	.word	0x08008b69
 8008ac4:	08008b0f 	.word	0x08008b0f
 8008ac8:	08008a3f 	.word	0x08008a3f
 8008acc:	08008a3f 	.word	0x08008a3f
 8008ad0:	08008b97 	.word	0x08008b97
 8008ad4:	08008a3f 	.word	0x08008a3f
 8008ad8:	08008b71 	.word	0x08008b71
 8008adc:	08008a3f 	.word	0x08008a3f
 8008ae0:	08008a3f 	.word	0x08008a3f
 8008ae4:	08008b17 	.word	0x08008b17
 8008ae8:	3b45      	subs	r3, #69	; 0x45
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d8a7      	bhi.n	8008a3e <__ssvfiscanf_r+0xee>
 8008aee:	2305      	movs	r3, #5
 8008af0:	e01f      	b.n	8008b32 <__ssvfiscanf_r+0x1e2>
 8008af2:	4621      	mov	r1, r4
 8008af4:	4630      	mov	r0, r6
 8008af6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008af8:	4798      	blx	r3
 8008afa:	2800      	cmp	r0, #0
 8008afc:	f43f af67 	beq.w	80089ce <__ssvfiscanf_r+0x7e>
 8008b00:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008b02:	2800      	cmp	r0, #0
 8008b04:	f040 808d 	bne.w	8008c22 <__ssvfiscanf_r+0x2d2>
 8008b08:	f04f 30ff 	mov.w	r0, #4294967295
 8008b0c:	e08f      	b.n	8008c2e <__ssvfiscanf_r+0x2de>
 8008b0e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008b10:	f042 0220 	orr.w	r2, r2, #32
 8008b14:	9241      	str	r2, [sp, #260]	; 0x104
 8008b16:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b1c:	9241      	str	r2, [sp, #260]	; 0x104
 8008b1e:	2210      	movs	r2, #16
 8008b20:	2b6f      	cmp	r3, #111	; 0x6f
 8008b22:	bf34      	ite	cc
 8008b24:	2303      	movcc	r3, #3
 8008b26:	2304      	movcs	r3, #4
 8008b28:	9242      	str	r2, [sp, #264]	; 0x108
 8008b2a:	e002      	b.n	8008b32 <__ssvfiscanf_r+0x1e2>
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	9342      	str	r3, [sp, #264]	; 0x108
 8008b30:	2303      	movs	r3, #3
 8008b32:	9347      	str	r3, [sp, #284]	; 0x11c
 8008b34:	6863      	ldr	r3, [r4, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	dd3d      	ble.n	8008bb6 <__ssvfiscanf_r+0x266>
 8008b3a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008b3c:	0659      	lsls	r1, r3, #25
 8008b3e:	d404      	bmi.n	8008b4a <__ssvfiscanf_r+0x1fa>
 8008b40:	6823      	ldr	r3, [r4, #0]
 8008b42:	781a      	ldrb	r2, [r3, #0]
 8008b44:	5cba      	ldrb	r2, [r7, r2]
 8008b46:	0712      	lsls	r2, r2, #28
 8008b48:	d43c      	bmi.n	8008bc4 <__ssvfiscanf_r+0x274>
 8008b4a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008b4c:	2b02      	cmp	r3, #2
 8008b4e:	dc4b      	bgt.n	8008be8 <__ssvfiscanf_r+0x298>
 8008b50:	466b      	mov	r3, sp
 8008b52:	4622      	mov	r2, r4
 8008b54:	4630      	mov	r0, r6
 8008b56:	a941      	add	r1, sp, #260	; 0x104
 8008b58:	f000 f872 	bl	8008c40 <_scanf_chars>
 8008b5c:	2801      	cmp	r0, #1
 8008b5e:	d06a      	beq.n	8008c36 <__ssvfiscanf_r+0x2e6>
 8008b60:	2802      	cmp	r0, #2
 8008b62:	f47f af1b 	bne.w	800899c <__ssvfiscanf_r+0x4c>
 8008b66:	e7cb      	b.n	8008b00 <__ssvfiscanf_r+0x1b0>
 8008b68:	2308      	movs	r3, #8
 8008b6a:	9342      	str	r3, [sp, #264]	; 0x108
 8008b6c:	2304      	movs	r3, #4
 8008b6e:	e7e0      	b.n	8008b32 <__ssvfiscanf_r+0x1e2>
 8008b70:	220a      	movs	r2, #10
 8008b72:	e7d5      	b.n	8008b20 <__ssvfiscanf_r+0x1d0>
 8008b74:	4629      	mov	r1, r5
 8008b76:	4640      	mov	r0, r8
 8008b78:	f000 fa58 	bl	800902c <__sccl>
 8008b7c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008b7e:	4605      	mov	r5, r0
 8008b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b84:	9341      	str	r3, [sp, #260]	; 0x104
 8008b86:	2301      	movs	r3, #1
 8008b88:	e7d3      	b.n	8008b32 <__ssvfiscanf_r+0x1e2>
 8008b8a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b90:	9341      	str	r3, [sp, #260]	; 0x104
 8008b92:	2300      	movs	r3, #0
 8008b94:	e7cd      	b.n	8008b32 <__ssvfiscanf_r+0x1e2>
 8008b96:	2302      	movs	r3, #2
 8008b98:	e7cb      	b.n	8008b32 <__ssvfiscanf_r+0x1e2>
 8008b9a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008b9c:	06c3      	lsls	r3, r0, #27
 8008b9e:	f53f aefd 	bmi.w	800899c <__ssvfiscanf_r+0x4c>
 8008ba2:	9b00      	ldr	r3, [sp, #0]
 8008ba4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008ba6:	1d19      	adds	r1, r3, #4
 8008ba8:	9100      	str	r1, [sp, #0]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	07c0      	lsls	r0, r0, #31
 8008bae:	bf4c      	ite	mi
 8008bb0:	801a      	strhmi	r2, [r3, #0]
 8008bb2:	601a      	strpl	r2, [r3, #0]
 8008bb4:	e6f2      	b.n	800899c <__ssvfiscanf_r+0x4c>
 8008bb6:	4621      	mov	r1, r4
 8008bb8:	4630      	mov	r0, r6
 8008bba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008bbc:	4798      	blx	r3
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	d0bb      	beq.n	8008b3a <__ssvfiscanf_r+0x1ea>
 8008bc2:	e79d      	b.n	8008b00 <__ssvfiscanf_r+0x1b0>
 8008bc4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008bc6:	3201      	adds	r2, #1
 8008bc8:	9245      	str	r2, [sp, #276]	; 0x114
 8008bca:	6862      	ldr	r2, [r4, #4]
 8008bcc:	3a01      	subs	r2, #1
 8008bce:	2a00      	cmp	r2, #0
 8008bd0:	6062      	str	r2, [r4, #4]
 8008bd2:	dd02      	ble.n	8008bda <__ssvfiscanf_r+0x28a>
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	6023      	str	r3, [r4, #0]
 8008bd8:	e7b2      	b.n	8008b40 <__ssvfiscanf_r+0x1f0>
 8008bda:	4621      	mov	r1, r4
 8008bdc:	4630      	mov	r0, r6
 8008bde:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008be0:	4798      	blx	r3
 8008be2:	2800      	cmp	r0, #0
 8008be4:	d0ac      	beq.n	8008b40 <__ssvfiscanf_r+0x1f0>
 8008be6:	e78b      	b.n	8008b00 <__ssvfiscanf_r+0x1b0>
 8008be8:	2b04      	cmp	r3, #4
 8008bea:	dc0f      	bgt.n	8008c0c <__ssvfiscanf_r+0x2bc>
 8008bec:	466b      	mov	r3, sp
 8008bee:	4622      	mov	r2, r4
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	a941      	add	r1, sp, #260	; 0x104
 8008bf4:	f000 f87e 	bl	8008cf4 <_scanf_i>
 8008bf8:	e7b0      	b.n	8008b5c <__ssvfiscanf_r+0x20c>
 8008bfa:	bf00      	nop
 8008bfc:	0800889d 	.word	0x0800889d
 8008c00:	08008917 	.word	0x08008917
 8008c04:	0800a2b1 	.word	0x0800a2b1
 8008c08:	0800a3b7 	.word	0x0800a3b7
 8008c0c:	4b0b      	ldr	r3, [pc, #44]	; (8008c3c <__ssvfiscanf_r+0x2ec>)
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f43f aec4 	beq.w	800899c <__ssvfiscanf_r+0x4c>
 8008c14:	466b      	mov	r3, sp
 8008c16:	4622      	mov	r2, r4
 8008c18:	4630      	mov	r0, r6
 8008c1a:	a941      	add	r1, sp, #260	; 0x104
 8008c1c:	f7fc fe1a 	bl	8005854 <_scanf_float>
 8008c20:	e79c      	b.n	8008b5c <__ssvfiscanf_r+0x20c>
 8008c22:	89a3      	ldrh	r3, [r4, #12]
 8008c24:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008c28:	bf18      	it	ne
 8008c2a:	f04f 30ff 	movne.w	r0, #4294967295
 8008c2e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c36:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008c38:	e7f9      	b.n	8008c2e <__ssvfiscanf_r+0x2de>
 8008c3a:	bf00      	nop
 8008c3c:	08005855 	.word	0x08005855

08008c40 <_scanf_chars>:
 8008c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c44:	4615      	mov	r5, r2
 8008c46:	688a      	ldr	r2, [r1, #8]
 8008c48:	4680      	mov	r8, r0
 8008c4a:	460c      	mov	r4, r1
 8008c4c:	b932      	cbnz	r2, 8008c5c <_scanf_chars+0x1c>
 8008c4e:	698a      	ldr	r2, [r1, #24]
 8008c50:	2a00      	cmp	r2, #0
 8008c52:	bf0c      	ite	eq
 8008c54:	2201      	moveq	r2, #1
 8008c56:	f04f 32ff 	movne.w	r2, #4294967295
 8008c5a:	608a      	str	r2, [r1, #8]
 8008c5c:	2700      	movs	r7, #0
 8008c5e:	6822      	ldr	r2, [r4, #0]
 8008c60:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008cf0 <_scanf_chars+0xb0>
 8008c64:	06d1      	lsls	r1, r2, #27
 8008c66:	bf5f      	itttt	pl
 8008c68:	681a      	ldrpl	r2, [r3, #0]
 8008c6a:	1d11      	addpl	r1, r2, #4
 8008c6c:	6019      	strpl	r1, [r3, #0]
 8008c6e:	6816      	ldrpl	r6, [r2, #0]
 8008c70:	69a0      	ldr	r0, [r4, #24]
 8008c72:	b188      	cbz	r0, 8008c98 <_scanf_chars+0x58>
 8008c74:	2801      	cmp	r0, #1
 8008c76:	d107      	bne.n	8008c88 <_scanf_chars+0x48>
 8008c78:	682b      	ldr	r3, [r5, #0]
 8008c7a:	781a      	ldrb	r2, [r3, #0]
 8008c7c:	6963      	ldr	r3, [r4, #20]
 8008c7e:	5c9b      	ldrb	r3, [r3, r2]
 8008c80:	b953      	cbnz	r3, 8008c98 <_scanf_chars+0x58>
 8008c82:	2f00      	cmp	r7, #0
 8008c84:	d031      	beq.n	8008cea <_scanf_chars+0xaa>
 8008c86:	e022      	b.n	8008cce <_scanf_chars+0x8e>
 8008c88:	2802      	cmp	r0, #2
 8008c8a:	d120      	bne.n	8008cce <_scanf_chars+0x8e>
 8008c8c:	682b      	ldr	r3, [r5, #0]
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008c94:	071b      	lsls	r3, r3, #28
 8008c96:	d41a      	bmi.n	8008cce <_scanf_chars+0x8e>
 8008c98:	6823      	ldr	r3, [r4, #0]
 8008c9a:	3701      	adds	r7, #1
 8008c9c:	06da      	lsls	r2, r3, #27
 8008c9e:	bf5e      	ittt	pl
 8008ca0:	682b      	ldrpl	r3, [r5, #0]
 8008ca2:	781b      	ldrbpl	r3, [r3, #0]
 8008ca4:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008ca8:	682a      	ldr	r2, [r5, #0]
 8008caa:	686b      	ldr	r3, [r5, #4]
 8008cac:	3201      	adds	r2, #1
 8008cae:	602a      	str	r2, [r5, #0]
 8008cb0:	68a2      	ldr	r2, [r4, #8]
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	3a01      	subs	r2, #1
 8008cb6:	606b      	str	r3, [r5, #4]
 8008cb8:	60a2      	str	r2, [r4, #8]
 8008cba:	b142      	cbz	r2, 8008cce <_scanf_chars+0x8e>
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	dcd7      	bgt.n	8008c70 <_scanf_chars+0x30>
 8008cc0:	4629      	mov	r1, r5
 8008cc2:	4640      	mov	r0, r8
 8008cc4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008cc8:	4798      	blx	r3
 8008cca:	2800      	cmp	r0, #0
 8008ccc:	d0d0      	beq.n	8008c70 <_scanf_chars+0x30>
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	f013 0310 	ands.w	r3, r3, #16
 8008cd4:	d105      	bne.n	8008ce2 <_scanf_chars+0xa2>
 8008cd6:	68e2      	ldr	r2, [r4, #12]
 8008cd8:	3201      	adds	r2, #1
 8008cda:	60e2      	str	r2, [r4, #12]
 8008cdc:	69a2      	ldr	r2, [r4, #24]
 8008cde:	b102      	cbz	r2, 8008ce2 <_scanf_chars+0xa2>
 8008ce0:	7033      	strb	r3, [r6, #0]
 8008ce2:	2000      	movs	r0, #0
 8008ce4:	6923      	ldr	r3, [r4, #16]
 8008ce6:	443b      	add	r3, r7
 8008ce8:	6123      	str	r3, [r4, #16]
 8008cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cee:	bf00      	nop
 8008cf0:	0800a2b1 	.word	0x0800a2b1

08008cf4 <_scanf_i>:
 8008cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf8:	460c      	mov	r4, r1
 8008cfa:	4698      	mov	r8, r3
 8008cfc:	4b72      	ldr	r3, [pc, #456]	; (8008ec8 <_scanf_i+0x1d4>)
 8008cfe:	b087      	sub	sp, #28
 8008d00:	4682      	mov	sl, r0
 8008d02:	4616      	mov	r6, r2
 8008d04:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008d08:	ab03      	add	r3, sp, #12
 8008d0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008d0e:	4b6f      	ldr	r3, [pc, #444]	; (8008ecc <_scanf_i+0x1d8>)
 8008d10:	69a1      	ldr	r1, [r4, #24]
 8008d12:	4a6f      	ldr	r2, [pc, #444]	; (8008ed0 <_scanf_i+0x1dc>)
 8008d14:	4627      	mov	r7, r4
 8008d16:	2903      	cmp	r1, #3
 8008d18:	bf18      	it	ne
 8008d1a:	461a      	movne	r2, r3
 8008d1c:	68a3      	ldr	r3, [r4, #8]
 8008d1e:	9201      	str	r2, [sp, #4]
 8008d20:	1e5a      	subs	r2, r3, #1
 8008d22:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008d26:	bf81      	itttt	hi
 8008d28:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008d2c:	eb03 0905 	addhi.w	r9, r3, r5
 8008d30:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008d34:	60a3      	strhi	r3, [r4, #8]
 8008d36:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008d3a:	bf98      	it	ls
 8008d3c:	f04f 0900 	movls.w	r9, #0
 8008d40:	463d      	mov	r5, r7
 8008d42:	f04f 0b00 	mov.w	fp, #0
 8008d46:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008d4a:	6023      	str	r3, [r4, #0]
 8008d4c:	6831      	ldr	r1, [r6, #0]
 8008d4e:	ab03      	add	r3, sp, #12
 8008d50:	2202      	movs	r2, #2
 8008d52:	7809      	ldrb	r1, [r1, #0]
 8008d54:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008d58:	f7fd f98f 	bl	800607a <memchr>
 8008d5c:	b328      	cbz	r0, 8008daa <_scanf_i+0xb6>
 8008d5e:	f1bb 0f01 	cmp.w	fp, #1
 8008d62:	d159      	bne.n	8008e18 <_scanf_i+0x124>
 8008d64:	6862      	ldr	r2, [r4, #4]
 8008d66:	b92a      	cbnz	r2, 8008d74 <_scanf_i+0x80>
 8008d68:	2308      	movs	r3, #8
 8008d6a:	6822      	ldr	r2, [r4, #0]
 8008d6c:	6063      	str	r3, [r4, #4]
 8008d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d72:	6022      	str	r2, [r4, #0]
 8008d74:	6822      	ldr	r2, [r4, #0]
 8008d76:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008d7a:	6022      	str	r2, [r4, #0]
 8008d7c:	68a2      	ldr	r2, [r4, #8]
 8008d7e:	1e51      	subs	r1, r2, #1
 8008d80:	60a1      	str	r1, [r4, #8]
 8008d82:	b192      	cbz	r2, 8008daa <_scanf_i+0xb6>
 8008d84:	6832      	ldr	r2, [r6, #0]
 8008d86:	1c51      	adds	r1, r2, #1
 8008d88:	6031      	str	r1, [r6, #0]
 8008d8a:	7812      	ldrb	r2, [r2, #0]
 8008d8c:	f805 2b01 	strb.w	r2, [r5], #1
 8008d90:	6872      	ldr	r2, [r6, #4]
 8008d92:	3a01      	subs	r2, #1
 8008d94:	2a00      	cmp	r2, #0
 8008d96:	6072      	str	r2, [r6, #4]
 8008d98:	dc07      	bgt.n	8008daa <_scanf_i+0xb6>
 8008d9a:	4631      	mov	r1, r6
 8008d9c:	4650      	mov	r0, sl
 8008d9e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008da2:	4790      	blx	r2
 8008da4:	2800      	cmp	r0, #0
 8008da6:	f040 8085 	bne.w	8008eb4 <_scanf_i+0x1c0>
 8008daa:	f10b 0b01 	add.w	fp, fp, #1
 8008dae:	f1bb 0f03 	cmp.w	fp, #3
 8008db2:	d1cb      	bne.n	8008d4c <_scanf_i+0x58>
 8008db4:	6863      	ldr	r3, [r4, #4]
 8008db6:	b90b      	cbnz	r3, 8008dbc <_scanf_i+0xc8>
 8008db8:	230a      	movs	r3, #10
 8008dba:	6063      	str	r3, [r4, #4]
 8008dbc:	6863      	ldr	r3, [r4, #4]
 8008dbe:	4945      	ldr	r1, [pc, #276]	; (8008ed4 <_scanf_i+0x1e0>)
 8008dc0:	6960      	ldr	r0, [r4, #20]
 8008dc2:	1ac9      	subs	r1, r1, r3
 8008dc4:	f000 f932 	bl	800902c <__sccl>
 8008dc8:	f04f 0b00 	mov.w	fp, #0
 8008dcc:	68a3      	ldr	r3, [r4, #8]
 8008dce:	6822      	ldr	r2, [r4, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d03d      	beq.n	8008e50 <_scanf_i+0x15c>
 8008dd4:	6831      	ldr	r1, [r6, #0]
 8008dd6:	6960      	ldr	r0, [r4, #20]
 8008dd8:	f891 c000 	ldrb.w	ip, [r1]
 8008ddc:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008de0:	2800      	cmp	r0, #0
 8008de2:	d035      	beq.n	8008e50 <_scanf_i+0x15c>
 8008de4:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008de8:	d124      	bne.n	8008e34 <_scanf_i+0x140>
 8008dea:	0510      	lsls	r0, r2, #20
 8008dec:	d522      	bpl.n	8008e34 <_scanf_i+0x140>
 8008dee:	f10b 0b01 	add.w	fp, fp, #1
 8008df2:	f1b9 0f00 	cmp.w	r9, #0
 8008df6:	d003      	beq.n	8008e00 <_scanf_i+0x10c>
 8008df8:	3301      	adds	r3, #1
 8008dfa:	f109 39ff 	add.w	r9, r9, #4294967295
 8008dfe:	60a3      	str	r3, [r4, #8]
 8008e00:	6873      	ldr	r3, [r6, #4]
 8008e02:	3b01      	subs	r3, #1
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	6073      	str	r3, [r6, #4]
 8008e08:	dd1b      	ble.n	8008e42 <_scanf_i+0x14e>
 8008e0a:	6833      	ldr	r3, [r6, #0]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	6033      	str	r3, [r6, #0]
 8008e10:	68a3      	ldr	r3, [r4, #8]
 8008e12:	3b01      	subs	r3, #1
 8008e14:	60a3      	str	r3, [r4, #8]
 8008e16:	e7d9      	b.n	8008dcc <_scanf_i+0xd8>
 8008e18:	f1bb 0f02 	cmp.w	fp, #2
 8008e1c:	d1ae      	bne.n	8008d7c <_scanf_i+0x88>
 8008e1e:	6822      	ldr	r2, [r4, #0]
 8008e20:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008e24:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008e28:	d1bf      	bne.n	8008daa <_scanf_i+0xb6>
 8008e2a:	2310      	movs	r3, #16
 8008e2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e30:	6063      	str	r3, [r4, #4]
 8008e32:	e7a2      	b.n	8008d7a <_scanf_i+0x86>
 8008e34:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008e38:	6022      	str	r2, [r4, #0]
 8008e3a:	780b      	ldrb	r3, [r1, #0]
 8008e3c:	f805 3b01 	strb.w	r3, [r5], #1
 8008e40:	e7de      	b.n	8008e00 <_scanf_i+0x10c>
 8008e42:	4631      	mov	r1, r6
 8008e44:	4650      	mov	r0, sl
 8008e46:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008e4a:	4798      	blx	r3
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	d0df      	beq.n	8008e10 <_scanf_i+0x11c>
 8008e50:	6823      	ldr	r3, [r4, #0]
 8008e52:	05d9      	lsls	r1, r3, #23
 8008e54:	d50d      	bpl.n	8008e72 <_scanf_i+0x17e>
 8008e56:	42bd      	cmp	r5, r7
 8008e58:	d909      	bls.n	8008e6e <_scanf_i+0x17a>
 8008e5a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008e5e:	4632      	mov	r2, r6
 8008e60:	4650      	mov	r0, sl
 8008e62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e66:	f105 39ff 	add.w	r9, r5, #4294967295
 8008e6a:	4798      	blx	r3
 8008e6c:	464d      	mov	r5, r9
 8008e6e:	42bd      	cmp	r5, r7
 8008e70:	d028      	beq.n	8008ec4 <_scanf_i+0x1d0>
 8008e72:	6822      	ldr	r2, [r4, #0]
 8008e74:	f012 0210 	ands.w	r2, r2, #16
 8008e78:	d113      	bne.n	8008ea2 <_scanf_i+0x1ae>
 8008e7a:	702a      	strb	r2, [r5, #0]
 8008e7c:	4639      	mov	r1, r7
 8008e7e:	6863      	ldr	r3, [r4, #4]
 8008e80:	4650      	mov	r0, sl
 8008e82:	9e01      	ldr	r6, [sp, #4]
 8008e84:	47b0      	blx	r6
 8008e86:	f8d8 3000 	ldr.w	r3, [r8]
 8008e8a:	6821      	ldr	r1, [r4, #0]
 8008e8c:	1d1a      	adds	r2, r3, #4
 8008e8e:	f8c8 2000 	str.w	r2, [r8]
 8008e92:	f011 0f20 	tst.w	r1, #32
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	d00f      	beq.n	8008eba <_scanf_i+0x1c6>
 8008e9a:	6018      	str	r0, [r3, #0]
 8008e9c:	68e3      	ldr	r3, [r4, #12]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	60e3      	str	r3, [r4, #12]
 8008ea2:	2000      	movs	r0, #0
 8008ea4:	6923      	ldr	r3, [r4, #16]
 8008ea6:	1bed      	subs	r5, r5, r7
 8008ea8:	445d      	add	r5, fp
 8008eaa:	442b      	add	r3, r5
 8008eac:	6123      	str	r3, [r4, #16]
 8008eae:	b007      	add	sp, #28
 8008eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb4:	f04f 0b00 	mov.w	fp, #0
 8008eb8:	e7ca      	b.n	8008e50 <_scanf_i+0x15c>
 8008eba:	07ca      	lsls	r2, r1, #31
 8008ebc:	bf4c      	ite	mi
 8008ebe:	8018      	strhmi	r0, [r3, #0]
 8008ec0:	6018      	strpl	r0, [r3, #0]
 8008ec2:	e7eb      	b.n	8008e9c <_scanf_i+0x1a8>
 8008ec4:	2001      	movs	r0, #1
 8008ec6:	e7f2      	b.n	8008eae <_scanf_i+0x1ba>
 8008ec8:	0800a008 	.word	0x0800a008
 8008ecc:	08009a2d 	.word	0x08009a2d
 8008ed0:	080085e9 	.word	0x080085e9
 8008ed4:	0800a3d2 	.word	0x0800a3d2

08008ed8 <__sflush_r>:
 8008ed8:	898a      	ldrh	r2, [r1, #12]
 8008eda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008edc:	4605      	mov	r5, r0
 8008ede:	0710      	lsls	r0, r2, #28
 8008ee0:	460c      	mov	r4, r1
 8008ee2:	d457      	bmi.n	8008f94 <__sflush_r+0xbc>
 8008ee4:	684b      	ldr	r3, [r1, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	dc04      	bgt.n	8008ef4 <__sflush_r+0x1c>
 8008eea:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	dc01      	bgt.n	8008ef4 <__sflush_r+0x1c>
 8008ef0:	2000      	movs	r0, #0
 8008ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ef4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ef6:	2e00      	cmp	r6, #0
 8008ef8:	d0fa      	beq.n	8008ef0 <__sflush_r+0x18>
 8008efa:	2300      	movs	r3, #0
 8008efc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f00:	682f      	ldr	r7, [r5, #0]
 8008f02:	6a21      	ldr	r1, [r4, #32]
 8008f04:	602b      	str	r3, [r5, #0]
 8008f06:	d032      	beq.n	8008f6e <__sflush_r+0x96>
 8008f08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f0a:	89a3      	ldrh	r3, [r4, #12]
 8008f0c:	075a      	lsls	r2, r3, #29
 8008f0e:	d505      	bpl.n	8008f1c <__sflush_r+0x44>
 8008f10:	6863      	ldr	r3, [r4, #4]
 8008f12:	1ac0      	subs	r0, r0, r3
 8008f14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f16:	b10b      	cbz	r3, 8008f1c <__sflush_r+0x44>
 8008f18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f1a:	1ac0      	subs	r0, r0, r3
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	4602      	mov	r2, r0
 8008f20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f22:	4628      	mov	r0, r5
 8008f24:	6a21      	ldr	r1, [r4, #32]
 8008f26:	47b0      	blx	r6
 8008f28:	1c43      	adds	r3, r0, #1
 8008f2a:	89a3      	ldrh	r3, [r4, #12]
 8008f2c:	d106      	bne.n	8008f3c <__sflush_r+0x64>
 8008f2e:	6829      	ldr	r1, [r5, #0]
 8008f30:	291d      	cmp	r1, #29
 8008f32:	d82b      	bhi.n	8008f8c <__sflush_r+0xb4>
 8008f34:	4a28      	ldr	r2, [pc, #160]	; (8008fd8 <__sflush_r+0x100>)
 8008f36:	410a      	asrs	r2, r1
 8008f38:	07d6      	lsls	r6, r2, #31
 8008f3a:	d427      	bmi.n	8008f8c <__sflush_r+0xb4>
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	6062      	str	r2, [r4, #4]
 8008f40:	6922      	ldr	r2, [r4, #16]
 8008f42:	04d9      	lsls	r1, r3, #19
 8008f44:	6022      	str	r2, [r4, #0]
 8008f46:	d504      	bpl.n	8008f52 <__sflush_r+0x7a>
 8008f48:	1c42      	adds	r2, r0, #1
 8008f4a:	d101      	bne.n	8008f50 <__sflush_r+0x78>
 8008f4c:	682b      	ldr	r3, [r5, #0]
 8008f4e:	b903      	cbnz	r3, 8008f52 <__sflush_r+0x7a>
 8008f50:	6560      	str	r0, [r4, #84]	; 0x54
 8008f52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f54:	602f      	str	r7, [r5, #0]
 8008f56:	2900      	cmp	r1, #0
 8008f58:	d0ca      	beq.n	8008ef0 <__sflush_r+0x18>
 8008f5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f5e:	4299      	cmp	r1, r3
 8008f60:	d002      	beq.n	8008f68 <__sflush_r+0x90>
 8008f62:	4628      	mov	r0, r5
 8008f64:	f7fd ff0c 	bl	8006d80 <_free_r>
 8008f68:	2000      	movs	r0, #0
 8008f6a:	6360      	str	r0, [r4, #52]	; 0x34
 8008f6c:	e7c1      	b.n	8008ef2 <__sflush_r+0x1a>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	4628      	mov	r0, r5
 8008f72:	47b0      	blx	r6
 8008f74:	1c41      	adds	r1, r0, #1
 8008f76:	d1c8      	bne.n	8008f0a <__sflush_r+0x32>
 8008f78:	682b      	ldr	r3, [r5, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d0c5      	beq.n	8008f0a <__sflush_r+0x32>
 8008f7e:	2b1d      	cmp	r3, #29
 8008f80:	d001      	beq.n	8008f86 <__sflush_r+0xae>
 8008f82:	2b16      	cmp	r3, #22
 8008f84:	d101      	bne.n	8008f8a <__sflush_r+0xb2>
 8008f86:	602f      	str	r7, [r5, #0]
 8008f88:	e7b2      	b.n	8008ef0 <__sflush_r+0x18>
 8008f8a:	89a3      	ldrh	r3, [r4, #12]
 8008f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f90:	81a3      	strh	r3, [r4, #12]
 8008f92:	e7ae      	b.n	8008ef2 <__sflush_r+0x1a>
 8008f94:	690f      	ldr	r7, [r1, #16]
 8008f96:	2f00      	cmp	r7, #0
 8008f98:	d0aa      	beq.n	8008ef0 <__sflush_r+0x18>
 8008f9a:	0793      	lsls	r3, r2, #30
 8008f9c:	bf18      	it	ne
 8008f9e:	2300      	movne	r3, #0
 8008fa0:	680e      	ldr	r6, [r1, #0]
 8008fa2:	bf08      	it	eq
 8008fa4:	694b      	ldreq	r3, [r1, #20]
 8008fa6:	1bf6      	subs	r6, r6, r7
 8008fa8:	600f      	str	r7, [r1, #0]
 8008faa:	608b      	str	r3, [r1, #8]
 8008fac:	2e00      	cmp	r6, #0
 8008fae:	dd9f      	ble.n	8008ef0 <__sflush_r+0x18>
 8008fb0:	4633      	mov	r3, r6
 8008fb2:	463a      	mov	r2, r7
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	6a21      	ldr	r1, [r4, #32]
 8008fb8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008fbc:	47e0      	blx	ip
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	dc06      	bgt.n	8008fd0 <__sflush_r+0xf8>
 8008fc2:	89a3      	ldrh	r3, [r4, #12]
 8008fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fcc:	81a3      	strh	r3, [r4, #12]
 8008fce:	e790      	b.n	8008ef2 <__sflush_r+0x1a>
 8008fd0:	4407      	add	r7, r0
 8008fd2:	1a36      	subs	r6, r6, r0
 8008fd4:	e7ea      	b.n	8008fac <__sflush_r+0xd4>
 8008fd6:	bf00      	nop
 8008fd8:	dfbffffe 	.word	0xdfbffffe

08008fdc <_fflush_r>:
 8008fdc:	b538      	push	{r3, r4, r5, lr}
 8008fde:	690b      	ldr	r3, [r1, #16]
 8008fe0:	4605      	mov	r5, r0
 8008fe2:	460c      	mov	r4, r1
 8008fe4:	b913      	cbnz	r3, 8008fec <_fflush_r+0x10>
 8008fe6:	2500      	movs	r5, #0
 8008fe8:	4628      	mov	r0, r5
 8008fea:	bd38      	pop	{r3, r4, r5, pc}
 8008fec:	b118      	cbz	r0, 8008ff6 <_fflush_r+0x1a>
 8008fee:	6a03      	ldr	r3, [r0, #32]
 8008ff0:	b90b      	cbnz	r3, 8008ff6 <_fflush_r+0x1a>
 8008ff2:	f7fc fec9 	bl	8005d88 <__sinit>
 8008ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d0f3      	beq.n	8008fe6 <_fflush_r+0xa>
 8008ffe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009000:	07d0      	lsls	r0, r2, #31
 8009002:	d404      	bmi.n	800900e <_fflush_r+0x32>
 8009004:	0599      	lsls	r1, r3, #22
 8009006:	d402      	bmi.n	800900e <_fflush_r+0x32>
 8009008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800900a:	f7fd f834 	bl	8006076 <__retarget_lock_acquire_recursive>
 800900e:	4628      	mov	r0, r5
 8009010:	4621      	mov	r1, r4
 8009012:	f7ff ff61 	bl	8008ed8 <__sflush_r>
 8009016:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009018:	4605      	mov	r5, r0
 800901a:	07da      	lsls	r2, r3, #31
 800901c:	d4e4      	bmi.n	8008fe8 <_fflush_r+0xc>
 800901e:	89a3      	ldrh	r3, [r4, #12]
 8009020:	059b      	lsls	r3, r3, #22
 8009022:	d4e1      	bmi.n	8008fe8 <_fflush_r+0xc>
 8009024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009026:	f7fd f827 	bl	8006078 <__retarget_lock_release_recursive>
 800902a:	e7dd      	b.n	8008fe8 <_fflush_r+0xc>

0800902c <__sccl>:
 800902c:	b570      	push	{r4, r5, r6, lr}
 800902e:	780b      	ldrb	r3, [r1, #0]
 8009030:	4604      	mov	r4, r0
 8009032:	2b5e      	cmp	r3, #94	; 0x5e
 8009034:	bf0b      	itete	eq
 8009036:	784b      	ldrbeq	r3, [r1, #1]
 8009038:	1c4a      	addne	r2, r1, #1
 800903a:	1c8a      	addeq	r2, r1, #2
 800903c:	2100      	movne	r1, #0
 800903e:	bf08      	it	eq
 8009040:	2101      	moveq	r1, #1
 8009042:	3801      	subs	r0, #1
 8009044:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009048:	f800 1f01 	strb.w	r1, [r0, #1]!
 800904c:	42a8      	cmp	r0, r5
 800904e:	d1fb      	bne.n	8009048 <__sccl+0x1c>
 8009050:	b90b      	cbnz	r3, 8009056 <__sccl+0x2a>
 8009052:	1e50      	subs	r0, r2, #1
 8009054:	bd70      	pop	{r4, r5, r6, pc}
 8009056:	f081 0101 	eor.w	r1, r1, #1
 800905a:	4610      	mov	r0, r2
 800905c:	54e1      	strb	r1, [r4, r3]
 800905e:	4602      	mov	r2, r0
 8009060:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009064:	2d2d      	cmp	r5, #45	; 0x2d
 8009066:	d005      	beq.n	8009074 <__sccl+0x48>
 8009068:	2d5d      	cmp	r5, #93	; 0x5d
 800906a:	d016      	beq.n	800909a <__sccl+0x6e>
 800906c:	2d00      	cmp	r5, #0
 800906e:	d0f1      	beq.n	8009054 <__sccl+0x28>
 8009070:	462b      	mov	r3, r5
 8009072:	e7f2      	b.n	800905a <__sccl+0x2e>
 8009074:	7846      	ldrb	r6, [r0, #1]
 8009076:	2e5d      	cmp	r6, #93	; 0x5d
 8009078:	d0fa      	beq.n	8009070 <__sccl+0x44>
 800907a:	42b3      	cmp	r3, r6
 800907c:	dcf8      	bgt.n	8009070 <__sccl+0x44>
 800907e:	461a      	mov	r2, r3
 8009080:	3002      	adds	r0, #2
 8009082:	3201      	adds	r2, #1
 8009084:	4296      	cmp	r6, r2
 8009086:	54a1      	strb	r1, [r4, r2]
 8009088:	dcfb      	bgt.n	8009082 <__sccl+0x56>
 800908a:	1af2      	subs	r2, r6, r3
 800908c:	3a01      	subs	r2, #1
 800908e:	42b3      	cmp	r3, r6
 8009090:	bfa8      	it	ge
 8009092:	2200      	movge	r2, #0
 8009094:	1c5d      	adds	r5, r3, #1
 8009096:	18ab      	adds	r3, r5, r2
 8009098:	e7e1      	b.n	800905e <__sccl+0x32>
 800909a:	4610      	mov	r0, r2
 800909c:	e7da      	b.n	8009054 <__sccl+0x28>

0800909e <__submore>:
 800909e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090a2:	460c      	mov	r4, r1
 80090a4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80090a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090aa:	4299      	cmp	r1, r3
 80090ac:	d11b      	bne.n	80090e6 <__submore+0x48>
 80090ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80090b2:	f7fd fed5 	bl	8006e60 <_malloc_r>
 80090b6:	b918      	cbnz	r0, 80090c0 <__submore+0x22>
 80090b8:	f04f 30ff 	mov.w	r0, #4294967295
 80090bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090c4:	63a3      	str	r3, [r4, #56]	; 0x38
 80090c6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80090ca:	6360      	str	r0, [r4, #52]	; 0x34
 80090cc:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80090d0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80090d4:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80090d8:	7043      	strb	r3, [r0, #1]
 80090da:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80090de:	7003      	strb	r3, [r0, #0]
 80090e0:	6020      	str	r0, [r4, #0]
 80090e2:	2000      	movs	r0, #0
 80090e4:	e7ea      	b.n	80090bc <__submore+0x1e>
 80090e6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80090e8:	0077      	lsls	r7, r6, #1
 80090ea:	463a      	mov	r2, r7
 80090ec:	f000 fbfd 	bl	80098ea <_realloc_r>
 80090f0:	4605      	mov	r5, r0
 80090f2:	2800      	cmp	r0, #0
 80090f4:	d0e0      	beq.n	80090b8 <__submore+0x1a>
 80090f6:	eb00 0806 	add.w	r8, r0, r6
 80090fa:	4601      	mov	r1, r0
 80090fc:	4632      	mov	r2, r6
 80090fe:	4640      	mov	r0, r8
 8009100:	f000 f842 	bl	8009188 <memcpy>
 8009104:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009108:	f8c4 8000 	str.w	r8, [r4]
 800910c:	e7e9      	b.n	80090e2 <__submore+0x44>

0800910e <memmove>:
 800910e:	4288      	cmp	r0, r1
 8009110:	b510      	push	{r4, lr}
 8009112:	eb01 0402 	add.w	r4, r1, r2
 8009116:	d902      	bls.n	800911e <memmove+0x10>
 8009118:	4284      	cmp	r4, r0
 800911a:	4623      	mov	r3, r4
 800911c:	d807      	bhi.n	800912e <memmove+0x20>
 800911e:	1e43      	subs	r3, r0, #1
 8009120:	42a1      	cmp	r1, r4
 8009122:	d008      	beq.n	8009136 <memmove+0x28>
 8009124:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009128:	f803 2f01 	strb.w	r2, [r3, #1]!
 800912c:	e7f8      	b.n	8009120 <memmove+0x12>
 800912e:	4601      	mov	r1, r0
 8009130:	4402      	add	r2, r0
 8009132:	428a      	cmp	r2, r1
 8009134:	d100      	bne.n	8009138 <memmove+0x2a>
 8009136:	bd10      	pop	{r4, pc}
 8009138:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800913c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009140:	e7f7      	b.n	8009132 <memmove+0x24>

08009142 <strncmp>:
 8009142:	b510      	push	{r4, lr}
 8009144:	b16a      	cbz	r2, 8009162 <strncmp+0x20>
 8009146:	3901      	subs	r1, #1
 8009148:	1884      	adds	r4, r0, r2
 800914a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800914e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009152:	429a      	cmp	r2, r3
 8009154:	d103      	bne.n	800915e <strncmp+0x1c>
 8009156:	42a0      	cmp	r0, r4
 8009158:	d001      	beq.n	800915e <strncmp+0x1c>
 800915a:	2a00      	cmp	r2, #0
 800915c:	d1f5      	bne.n	800914a <strncmp+0x8>
 800915e:	1ad0      	subs	r0, r2, r3
 8009160:	bd10      	pop	{r4, pc}
 8009162:	4610      	mov	r0, r2
 8009164:	e7fc      	b.n	8009160 <strncmp+0x1e>
	...

08009168 <_sbrk_r>:
 8009168:	b538      	push	{r3, r4, r5, lr}
 800916a:	2300      	movs	r3, #0
 800916c:	4d05      	ldr	r5, [pc, #20]	; (8009184 <_sbrk_r+0x1c>)
 800916e:	4604      	mov	r4, r0
 8009170:	4608      	mov	r0, r1
 8009172:	602b      	str	r3, [r5, #0]
 8009174:	f7f8 fa82 	bl	800167c <_sbrk>
 8009178:	1c43      	adds	r3, r0, #1
 800917a:	d102      	bne.n	8009182 <_sbrk_r+0x1a>
 800917c:	682b      	ldr	r3, [r5, #0]
 800917e:	b103      	cbz	r3, 8009182 <_sbrk_r+0x1a>
 8009180:	6023      	str	r3, [r4, #0]
 8009182:	bd38      	pop	{r3, r4, r5, pc}
 8009184:	20000580 	.word	0x20000580

08009188 <memcpy>:
 8009188:	440a      	add	r2, r1
 800918a:	4291      	cmp	r1, r2
 800918c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009190:	d100      	bne.n	8009194 <memcpy+0xc>
 8009192:	4770      	bx	lr
 8009194:	b510      	push	{r4, lr}
 8009196:	f811 4b01 	ldrb.w	r4, [r1], #1
 800919a:	4291      	cmp	r1, r2
 800919c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091a0:	d1f9      	bne.n	8009196 <memcpy+0xe>
 80091a2:	bd10      	pop	{r4, pc}

080091a4 <nan>:
 80091a4:	2000      	movs	r0, #0
 80091a6:	4901      	ldr	r1, [pc, #4]	; (80091ac <nan+0x8>)
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop
 80091ac:	7ff80000 	.word	0x7ff80000

080091b0 <__assert_func>:
 80091b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091b2:	4614      	mov	r4, r2
 80091b4:	461a      	mov	r2, r3
 80091b6:	4b09      	ldr	r3, [pc, #36]	; (80091dc <__assert_func+0x2c>)
 80091b8:	4605      	mov	r5, r0
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	68d8      	ldr	r0, [r3, #12]
 80091be:	b14c      	cbz	r4, 80091d4 <__assert_func+0x24>
 80091c0:	4b07      	ldr	r3, [pc, #28]	; (80091e0 <__assert_func+0x30>)
 80091c2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091c6:	9100      	str	r1, [sp, #0]
 80091c8:	462b      	mov	r3, r5
 80091ca:	4906      	ldr	r1, [pc, #24]	; (80091e4 <__assert_func+0x34>)
 80091cc:	f000 fc3e 	bl	8009a4c <fiprintf>
 80091d0:	f000 fc4e 	bl	8009a70 <abort>
 80091d4:	4b04      	ldr	r3, [pc, #16]	; (80091e8 <__assert_func+0x38>)
 80091d6:	461c      	mov	r4, r3
 80091d8:	e7f3      	b.n	80091c2 <__assert_func+0x12>
 80091da:	bf00      	nop
 80091dc:	20000068 	.word	0x20000068
 80091e0:	0800a3e5 	.word	0x0800a3e5
 80091e4:	0800a3f2 	.word	0x0800a3f2
 80091e8:	0800a420 	.word	0x0800a420

080091ec <_calloc_r>:
 80091ec:	b570      	push	{r4, r5, r6, lr}
 80091ee:	fba1 5402 	umull	r5, r4, r1, r2
 80091f2:	b934      	cbnz	r4, 8009202 <_calloc_r+0x16>
 80091f4:	4629      	mov	r1, r5
 80091f6:	f7fd fe33 	bl	8006e60 <_malloc_r>
 80091fa:	4606      	mov	r6, r0
 80091fc:	b928      	cbnz	r0, 800920a <_calloc_r+0x1e>
 80091fe:	4630      	mov	r0, r6
 8009200:	bd70      	pop	{r4, r5, r6, pc}
 8009202:	220c      	movs	r2, #12
 8009204:	2600      	movs	r6, #0
 8009206:	6002      	str	r2, [r0, #0]
 8009208:	e7f9      	b.n	80091fe <_calloc_r+0x12>
 800920a:	462a      	mov	r2, r5
 800920c:	4621      	mov	r1, r4
 800920e:	f7fc feb4 	bl	8005f7a <memset>
 8009212:	e7f4      	b.n	80091fe <_calloc_r+0x12>

08009214 <rshift>:
 8009214:	6903      	ldr	r3, [r0, #16]
 8009216:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800921a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800921e:	f100 0414 	add.w	r4, r0, #20
 8009222:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009226:	dd46      	ble.n	80092b6 <rshift+0xa2>
 8009228:	f011 011f 	ands.w	r1, r1, #31
 800922c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009230:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009234:	d10c      	bne.n	8009250 <rshift+0x3c>
 8009236:	4629      	mov	r1, r5
 8009238:	f100 0710 	add.w	r7, r0, #16
 800923c:	42b1      	cmp	r1, r6
 800923e:	d335      	bcc.n	80092ac <rshift+0x98>
 8009240:	1a9b      	subs	r3, r3, r2
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	1eea      	subs	r2, r5, #3
 8009246:	4296      	cmp	r6, r2
 8009248:	bf38      	it	cc
 800924a:	2300      	movcc	r3, #0
 800924c:	4423      	add	r3, r4
 800924e:	e015      	b.n	800927c <rshift+0x68>
 8009250:	46a1      	mov	r9, r4
 8009252:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009256:	f1c1 0820 	rsb	r8, r1, #32
 800925a:	40cf      	lsrs	r7, r1
 800925c:	f105 0e04 	add.w	lr, r5, #4
 8009260:	4576      	cmp	r6, lr
 8009262:	46f4      	mov	ip, lr
 8009264:	d816      	bhi.n	8009294 <rshift+0x80>
 8009266:	1a9a      	subs	r2, r3, r2
 8009268:	0092      	lsls	r2, r2, #2
 800926a:	3a04      	subs	r2, #4
 800926c:	3501      	adds	r5, #1
 800926e:	42ae      	cmp	r6, r5
 8009270:	bf38      	it	cc
 8009272:	2200      	movcc	r2, #0
 8009274:	18a3      	adds	r3, r4, r2
 8009276:	50a7      	str	r7, [r4, r2]
 8009278:	b107      	cbz	r7, 800927c <rshift+0x68>
 800927a:	3304      	adds	r3, #4
 800927c:	42a3      	cmp	r3, r4
 800927e:	eba3 0204 	sub.w	r2, r3, r4
 8009282:	bf08      	it	eq
 8009284:	2300      	moveq	r3, #0
 8009286:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800928a:	6102      	str	r2, [r0, #16]
 800928c:	bf08      	it	eq
 800928e:	6143      	streq	r3, [r0, #20]
 8009290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009294:	f8dc c000 	ldr.w	ip, [ip]
 8009298:	fa0c fc08 	lsl.w	ip, ip, r8
 800929c:	ea4c 0707 	orr.w	r7, ip, r7
 80092a0:	f849 7b04 	str.w	r7, [r9], #4
 80092a4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80092a8:	40cf      	lsrs	r7, r1
 80092aa:	e7d9      	b.n	8009260 <rshift+0x4c>
 80092ac:	f851 cb04 	ldr.w	ip, [r1], #4
 80092b0:	f847 cf04 	str.w	ip, [r7, #4]!
 80092b4:	e7c2      	b.n	800923c <rshift+0x28>
 80092b6:	4623      	mov	r3, r4
 80092b8:	e7e0      	b.n	800927c <rshift+0x68>

080092ba <__hexdig_fun>:
 80092ba:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80092be:	2b09      	cmp	r3, #9
 80092c0:	d802      	bhi.n	80092c8 <__hexdig_fun+0xe>
 80092c2:	3820      	subs	r0, #32
 80092c4:	b2c0      	uxtb	r0, r0
 80092c6:	4770      	bx	lr
 80092c8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80092cc:	2b05      	cmp	r3, #5
 80092ce:	d801      	bhi.n	80092d4 <__hexdig_fun+0x1a>
 80092d0:	3847      	subs	r0, #71	; 0x47
 80092d2:	e7f7      	b.n	80092c4 <__hexdig_fun+0xa>
 80092d4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80092d8:	2b05      	cmp	r3, #5
 80092da:	d801      	bhi.n	80092e0 <__hexdig_fun+0x26>
 80092dc:	3827      	subs	r0, #39	; 0x27
 80092de:	e7f1      	b.n	80092c4 <__hexdig_fun+0xa>
 80092e0:	2000      	movs	r0, #0
 80092e2:	4770      	bx	lr

080092e4 <__gethex>:
 80092e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e8:	4681      	mov	r9, r0
 80092ea:	468a      	mov	sl, r1
 80092ec:	4617      	mov	r7, r2
 80092ee:	680a      	ldr	r2, [r1, #0]
 80092f0:	b085      	sub	sp, #20
 80092f2:	f102 0b02 	add.w	fp, r2, #2
 80092f6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80092fa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80092fe:	9302      	str	r3, [sp, #8]
 8009300:	32fe      	adds	r2, #254	; 0xfe
 8009302:	eb02 030b 	add.w	r3, r2, fp
 8009306:	46d8      	mov	r8, fp
 8009308:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800930c:	9301      	str	r3, [sp, #4]
 800930e:	2830      	cmp	r0, #48	; 0x30
 8009310:	d0f7      	beq.n	8009302 <__gethex+0x1e>
 8009312:	f7ff ffd2 	bl	80092ba <__hexdig_fun>
 8009316:	4604      	mov	r4, r0
 8009318:	2800      	cmp	r0, #0
 800931a:	d138      	bne.n	800938e <__gethex+0xaa>
 800931c:	2201      	movs	r2, #1
 800931e:	4640      	mov	r0, r8
 8009320:	49a7      	ldr	r1, [pc, #668]	; (80095c0 <__gethex+0x2dc>)
 8009322:	f7ff ff0e 	bl	8009142 <strncmp>
 8009326:	4606      	mov	r6, r0
 8009328:	2800      	cmp	r0, #0
 800932a:	d169      	bne.n	8009400 <__gethex+0x11c>
 800932c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009330:	465d      	mov	r5, fp
 8009332:	f7ff ffc2 	bl	80092ba <__hexdig_fun>
 8009336:	2800      	cmp	r0, #0
 8009338:	d064      	beq.n	8009404 <__gethex+0x120>
 800933a:	465a      	mov	r2, fp
 800933c:	7810      	ldrb	r0, [r2, #0]
 800933e:	4690      	mov	r8, r2
 8009340:	2830      	cmp	r0, #48	; 0x30
 8009342:	f102 0201 	add.w	r2, r2, #1
 8009346:	d0f9      	beq.n	800933c <__gethex+0x58>
 8009348:	f7ff ffb7 	bl	80092ba <__hexdig_fun>
 800934c:	2301      	movs	r3, #1
 800934e:	fab0 f480 	clz	r4, r0
 8009352:	465e      	mov	r6, fp
 8009354:	0964      	lsrs	r4, r4, #5
 8009356:	9301      	str	r3, [sp, #4]
 8009358:	4642      	mov	r2, r8
 800935a:	4615      	mov	r5, r2
 800935c:	7828      	ldrb	r0, [r5, #0]
 800935e:	3201      	adds	r2, #1
 8009360:	f7ff ffab 	bl	80092ba <__hexdig_fun>
 8009364:	2800      	cmp	r0, #0
 8009366:	d1f8      	bne.n	800935a <__gethex+0x76>
 8009368:	2201      	movs	r2, #1
 800936a:	4628      	mov	r0, r5
 800936c:	4994      	ldr	r1, [pc, #592]	; (80095c0 <__gethex+0x2dc>)
 800936e:	f7ff fee8 	bl	8009142 <strncmp>
 8009372:	b978      	cbnz	r0, 8009394 <__gethex+0xb0>
 8009374:	b946      	cbnz	r6, 8009388 <__gethex+0xa4>
 8009376:	1c6e      	adds	r6, r5, #1
 8009378:	4632      	mov	r2, r6
 800937a:	4615      	mov	r5, r2
 800937c:	7828      	ldrb	r0, [r5, #0]
 800937e:	3201      	adds	r2, #1
 8009380:	f7ff ff9b 	bl	80092ba <__hexdig_fun>
 8009384:	2800      	cmp	r0, #0
 8009386:	d1f8      	bne.n	800937a <__gethex+0x96>
 8009388:	1b73      	subs	r3, r6, r5
 800938a:	009e      	lsls	r6, r3, #2
 800938c:	e004      	b.n	8009398 <__gethex+0xb4>
 800938e:	2400      	movs	r4, #0
 8009390:	4626      	mov	r6, r4
 8009392:	e7e1      	b.n	8009358 <__gethex+0x74>
 8009394:	2e00      	cmp	r6, #0
 8009396:	d1f7      	bne.n	8009388 <__gethex+0xa4>
 8009398:	782b      	ldrb	r3, [r5, #0]
 800939a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800939e:	2b50      	cmp	r3, #80	; 0x50
 80093a0:	d13d      	bne.n	800941e <__gethex+0x13a>
 80093a2:	786b      	ldrb	r3, [r5, #1]
 80093a4:	2b2b      	cmp	r3, #43	; 0x2b
 80093a6:	d02f      	beq.n	8009408 <__gethex+0x124>
 80093a8:	2b2d      	cmp	r3, #45	; 0x2d
 80093aa:	d031      	beq.n	8009410 <__gethex+0x12c>
 80093ac:	f04f 0b00 	mov.w	fp, #0
 80093b0:	1c69      	adds	r1, r5, #1
 80093b2:	7808      	ldrb	r0, [r1, #0]
 80093b4:	f7ff ff81 	bl	80092ba <__hexdig_fun>
 80093b8:	1e42      	subs	r2, r0, #1
 80093ba:	b2d2      	uxtb	r2, r2
 80093bc:	2a18      	cmp	r2, #24
 80093be:	d82e      	bhi.n	800941e <__gethex+0x13a>
 80093c0:	f1a0 0210 	sub.w	r2, r0, #16
 80093c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80093c8:	f7ff ff77 	bl	80092ba <__hexdig_fun>
 80093cc:	f100 3cff 	add.w	ip, r0, #4294967295
 80093d0:	fa5f fc8c 	uxtb.w	ip, ip
 80093d4:	f1bc 0f18 	cmp.w	ip, #24
 80093d8:	d91d      	bls.n	8009416 <__gethex+0x132>
 80093da:	f1bb 0f00 	cmp.w	fp, #0
 80093de:	d000      	beq.n	80093e2 <__gethex+0xfe>
 80093e0:	4252      	negs	r2, r2
 80093e2:	4416      	add	r6, r2
 80093e4:	f8ca 1000 	str.w	r1, [sl]
 80093e8:	b1dc      	cbz	r4, 8009422 <__gethex+0x13e>
 80093ea:	9b01      	ldr	r3, [sp, #4]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	bf14      	ite	ne
 80093f0:	f04f 0800 	movne.w	r8, #0
 80093f4:	f04f 0806 	moveq.w	r8, #6
 80093f8:	4640      	mov	r0, r8
 80093fa:	b005      	add	sp, #20
 80093fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009400:	4645      	mov	r5, r8
 8009402:	4626      	mov	r6, r4
 8009404:	2401      	movs	r4, #1
 8009406:	e7c7      	b.n	8009398 <__gethex+0xb4>
 8009408:	f04f 0b00 	mov.w	fp, #0
 800940c:	1ca9      	adds	r1, r5, #2
 800940e:	e7d0      	b.n	80093b2 <__gethex+0xce>
 8009410:	f04f 0b01 	mov.w	fp, #1
 8009414:	e7fa      	b.n	800940c <__gethex+0x128>
 8009416:	230a      	movs	r3, #10
 8009418:	fb03 0002 	mla	r0, r3, r2, r0
 800941c:	e7d0      	b.n	80093c0 <__gethex+0xdc>
 800941e:	4629      	mov	r1, r5
 8009420:	e7e0      	b.n	80093e4 <__gethex+0x100>
 8009422:	4621      	mov	r1, r4
 8009424:	eba5 0308 	sub.w	r3, r5, r8
 8009428:	3b01      	subs	r3, #1
 800942a:	2b07      	cmp	r3, #7
 800942c:	dc0a      	bgt.n	8009444 <__gethex+0x160>
 800942e:	4648      	mov	r0, r9
 8009430:	f7fd fda2 	bl	8006f78 <_Balloc>
 8009434:	4604      	mov	r4, r0
 8009436:	b940      	cbnz	r0, 800944a <__gethex+0x166>
 8009438:	4602      	mov	r2, r0
 800943a:	21e4      	movs	r1, #228	; 0xe4
 800943c:	4b61      	ldr	r3, [pc, #388]	; (80095c4 <__gethex+0x2e0>)
 800943e:	4862      	ldr	r0, [pc, #392]	; (80095c8 <__gethex+0x2e4>)
 8009440:	f7ff feb6 	bl	80091b0 <__assert_func>
 8009444:	3101      	adds	r1, #1
 8009446:	105b      	asrs	r3, r3, #1
 8009448:	e7ef      	b.n	800942a <__gethex+0x146>
 800944a:	2300      	movs	r3, #0
 800944c:	469b      	mov	fp, r3
 800944e:	f100 0a14 	add.w	sl, r0, #20
 8009452:	f8cd a004 	str.w	sl, [sp, #4]
 8009456:	45a8      	cmp	r8, r5
 8009458:	d344      	bcc.n	80094e4 <__gethex+0x200>
 800945a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800945e:	4658      	mov	r0, fp
 8009460:	f848 bb04 	str.w	fp, [r8], #4
 8009464:	eba8 080a 	sub.w	r8, r8, sl
 8009468:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800946c:	6122      	str	r2, [r4, #16]
 800946e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8009472:	f7fd fe73 	bl	800715c <__hi0bits>
 8009476:	683d      	ldr	r5, [r7, #0]
 8009478:	eba8 0800 	sub.w	r8, r8, r0
 800947c:	45a8      	cmp	r8, r5
 800947e:	dd59      	ble.n	8009534 <__gethex+0x250>
 8009480:	eba8 0805 	sub.w	r8, r8, r5
 8009484:	4641      	mov	r1, r8
 8009486:	4620      	mov	r0, r4
 8009488:	f7fe f9f1 	bl	800786e <__any_on>
 800948c:	4683      	mov	fp, r0
 800948e:	b1b8      	cbz	r0, 80094c0 <__gethex+0x1dc>
 8009490:	f04f 0b01 	mov.w	fp, #1
 8009494:	f108 33ff 	add.w	r3, r8, #4294967295
 8009498:	1159      	asrs	r1, r3, #5
 800949a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800949e:	f003 021f 	and.w	r2, r3, #31
 80094a2:	fa0b f202 	lsl.w	r2, fp, r2
 80094a6:	420a      	tst	r2, r1
 80094a8:	d00a      	beq.n	80094c0 <__gethex+0x1dc>
 80094aa:	455b      	cmp	r3, fp
 80094ac:	dd06      	ble.n	80094bc <__gethex+0x1d8>
 80094ae:	4620      	mov	r0, r4
 80094b0:	f1a8 0102 	sub.w	r1, r8, #2
 80094b4:	f7fe f9db 	bl	800786e <__any_on>
 80094b8:	2800      	cmp	r0, #0
 80094ba:	d138      	bne.n	800952e <__gethex+0x24a>
 80094bc:	f04f 0b02 	mov.w	fp, #2
 80094c0:	4641      	mov	r1, r8
 80094c2:	4620      	mov	r0, r4
 80094c4:	f7ff fea6 	bl	8009214 <rshift>
 80094c8:	4446      	add	r6, r8
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	42b3      	cmp	r3, r6
 80094ce:	da41      	bge.n	8009554 <__gethex+0x270>
 80094d0:	4621      	mov	r1, r4
 80094d2:	4648      	mov	r0, r9
 80094d4:	f7fd fd90 	bl	8006ff8 <_Bfree>
 80094d8:	2300      	movs	r3, #0
 80094da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094dc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80094e0:	6013      	str	r3, [r2, #0]
 80094e2:	e789      	b.n	80093f8 <__gethex+0x114>
 80094e4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80094e8:	2a2e      	cmp	r2, #46	; 0x2e
 80094ea:	d014      	beq.n	8009516 <__gethex+0x232>
 80094ec:	2b20      	cmp	r3, #32
 80094ee:	d106      	bne.n	80094fe <__gethex+0x21a>
 80094f0:	9b01      	ldr	r3, [sp, #4]
 80094f2:	f843 bb04 	str.w	fp, [r3], #4
 80094f6:	f04f 0b00 	mov.w	fp, #0
 80094fa:	9301      	str	r3, [sp, #4]
 80094fc:	465b      	mov	r3, fp
 80094fe:	7828      	ldrb	r0, [r5, #0]
 8009500:	9303      	str	r3, [sp, #12]
 8009502:	f7ff feda 	bl	80092ba <__hexdig_fun>
 8009506:	9b03      	ldr	r3, [sp, #12]
 8009508:	f000 000f 	and.w	r0, r0, #15
 800950c:	4098      	lsls	r0, r3
 800950e:	ea4b 0b00 	orr.w	fp, fp, r0
 8009512:	3304      	adds	r3, #4
 8009514:	e79f      	b.n	8009456 <__gethex+0x172>
 8009516:	45a8      	cmp	r8, r5
 8009518:	d8e8      	bhi.n	80094ec <__gethex+0x208>
 800951a:	2201      	movs	r2, #1
 800951c:	4628      	mov	r0, r5
 800951e:	4928      	ldr	r1, [pc, #160]	; (80095c0 <__gethex+0x2dc>)
 8009520:	9303      	str	r3, [sp, #12]
 8009522:	f7ff fe0e 	bl	8009142 <strncmp>
 8009526:	9b03      	ldr	r3, [sp, #12]
 8009528:	2800      	cmp	r0, #0
 800952a:	d1df      	bne.n	80094ec <__gethex+0x208>
 800952c:	e793      	b.n	8009456 <__gethex+0x172>
 800952e:	f04f 0b03 	mov.w	fp, #3
 8009532:	e7c5      	b.n	80094c0 <__gethex+0x1dc>
 8009534:	da0b      	bge.n	800954e <__gethex+0x26a>
 8009536:	eba5 0808 	sub.w	r8, r5, r8
 800953a:	4621      	mov	r1, r4
 800953c:	4642      	mov	r2, r8
 800953e:	4648      	mov	r0, r9
 8009540:	f7fd ff72 	bl	8007428 <__lshift>
 8009544:	4604      	mov	r4, r0
 8009546:	eba6 0608 	sub.w	r6, r6, r8
 800954a:	f100 0a14 	add.w	sl, r0, #20
 800954e:	f04f 0b00 	mov.w	fp, #0
 8009552:	e7ba      	b.n	80094ca <__gethex+0x1e6>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	42b3      	cmp	r3, r6
 8009558:	dd74      	ble.n	8009644 <__gethex+0x360>
 800955a:	1b9e      	subs	r6, r3, r6
 800955c:	42b5      	cmp	r5, r6
 800955e:	dc35      	bgt.n	80095cc <__gethex+0x2e8>
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2b02      	cmp	r3, #2
 8009564:	d023      	beq.n	80095ae <__gethex+0x2ca>
 8009566:	2b03      	cmp	r3, #3
 8009568:	d025      	beq.n	80095b6 <__gethex+0x2d2>
 800956a:	2b01      	cmp	r3, #1
 800956c:	d115      	bne.n	800959a <__gethex+0x2b6>
 800956e:	42b5      	cmp	r5, r6
 8009570:	d113      	bne.n	800959a <__gethex+0x2b6>
 8009572:	2d01      	cmp	r5, #1
 8009574:	d10b      	bne.n	800958e <__gethex+0x2aa>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	9a02      	ldr	r2, [sp, #8]
 800957a:	f04f 0862 	mov.w	r8, #98	; 0x62
 800957e:	6013      	str	r3, [r2, #0]
 8009580:	2301      	movs	r3, #1
 8009582:	6123      	str	r3, [r4, #16]
 8009584:	f8ca 3000 	str.w	r3, [sl]
 8009588:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800958a:	601c      	str	r4, [r3, #0]
 800958c:	e734      	b.n	80093f8 <__gethex+0x114>
 800958e:	4620      	mov	r0, r4
 8009590:	1e69      	subs	r1, r5, #1
 8009592:	f7fe f96c 	bl	800786e <__any_on>
 8009596:	2800      	cmp	r0, #0
 8009598:	d1ed      	bne.n	8009576 <__gethex+0x292>
 800959a:	4621      	mov	r1, r4
 800959c:	4648      	mov	r0, r9
 800959e:	f7fd fd2b 	bl	8006ff8 <_Bfree>
 80095a2:	2300      	movs	r3, #0
 80095a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095a6:	f04f 0850 	mov.w	r8, #80	; 0x50
 80095aa:	6013      	str	r3, [r2, #0]
 80095ac:	e724      	b.n	80093f8 <__gethex+0x114>
 80095ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d1f2      	bne.n	800959a <__gethex+0x2b6>
 80095b4:	e7df      	b.n	8009576 <__gethex+0x292>
 80095b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d1dc      	bne.n	8009576 <__gethex+0x292>
 80095bc:	e7ed      	b.n	800959a <__gethex+0x2b6>
 80095be:	bf00      	nop
 80095c0:	0800a25c 	.word	0x0800a25c
 80095c4:	0800a0f1 	.word	0x0800a0f1
 80095c8:	0800a421 	.word	0x0800a421
 80095cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80095d0:	f1bb 0f00 	cmp.w	fp, #0
 80095d4:	d133      	bne.n	800963e <__gethex+0x35a>
 80095d6:	f1b8 0f00 	cmp.w	r8, #0
 80095da:	d004      	beq.n	80095e6 <__gethex+0x302>
 80095dc:	4641      	mov	r1, r8
 80095de:	4620      	mov	r0, r4
 80095e0:	f7fe f945 	bl	800786e <__any_on>
 80095e4:	4683      	mov	fp, r0
 80095e6:	2301      	movs	r3, #1
 80095e8:	ea4f 1268 	mov.w	r2, r8, asr #5
 80095ec:	f008 081f 	and.w	r8, r8, #31
 80095f0:	fa03 f308 	lsl.w	r3, r3, r8
 80095f4:	f04f 0802 	mov.w	r8, #2
 80095f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80095fc:	4631      	mov	r1, r6
 80095fe:	4213      	tst	r3, r2
 8009600:	4620      	mov	r0, r4
 8009602:	bf18      	it	ne
 8009604:	f04b 0b02 	orrne.w	fp, fp, #2
 8009608:	1bad      	subs	r5, r5, r6
 800960a:	f7ff fe03 	bl	8009214 <rshift>
 800960e:	687e      	ldr	r6, [r7, #4]
 8009610:	f1bb 0f00 	cmp.w	fp, #0
 8009614:	d04a      	beq.n	80096ac <__gethex+0x3c8>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2b02      	cmp	r3, #2
 800961a:	d016      	beq.n	800964a <__gethex+0x366>
 800961c:	2b03      	cmp	r3, #3
 800961e:	d018      	beq.n	8009652 <__gethex+0x36e>
 8009620:	2b01      	cmp	r3, #1
 8009622:	d109      	bne.n	8009638 <__gethex+0x354>
 8009624:	f01b 0f02 	tst.w	fp, #2
 8009628:	d006      	beq.n	8009638 <__gethex+0x354>
 800962a:	f8da 3000 	ldr.w	r3, [sl]
 800962e:	ea4b 0b03 	orr.w	fp, fp, r3
 8009632:	f01b 0f01 	tst.w	fp, #1
 8009636:	d10f      	bne.n	8009658 <__gethex+0x374>
 8009638:	f048 0810 	orr.w	r8, r8, #16
 800963c:	e036      	b.n	80096ac <__gethex+0x3c8>
 800963e:	f04f 0b01 	mov.w	fp, #1
 8009642:	e7d0      	b.n	80095e6 <__gethex+0x302>
 8009644:	f04f 0801 	mov.w	r8, #1
 8009648:	e7e2      	b.n	8009610 <__gethex+0x32c>
 800964a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800964c:	f1c3 0301 	rsb	r3, r3, #1
 8009650:	930f      	str	r3, [sp, #60]	; 0x3c
 8009652:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009654:	2b00      	cmp	r3, #0
 8009656:	d0ef      	beq.n	8009638 <__gethex+0x354>
 8009658:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800965c:	f104 0214 	add.w	r2, r4, #20
 8009660:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009664:	9301      	str	r3, [sp, #4]
 8009666:	2300      	movs	r3, #0
 8009668:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800966c:	4694      	mov	ip, r2
 800966e:	f852 1b04 	ldr.w	r1, [r2], #4
 8009672:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009676:	d01e      	beq.n	80096b6 <__gethex+0x3d2>
 8009678:	3101      	adds	r1, #1
 800967a:	f8cc 1000 	str.w	r1, [ip]
 800967e:	f1b8 0f02 	cmp.w	r8, #2
 8009682:	f104 0214 	add.w	r2, r4, #20
 8009686:	d13d      	bne.n	8009704 <__gethex+0x420>
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	3b01      	subs	r3, #1
 800968c:	42ab      	cmp	r3, r5
 800968e:	d10b      	bne.n	80096a8 <__gethex+0x3c4>
 8009690:	2301      	movs	r3, #1
 8009692:	1169      	asrs	r1, r5, #5
 8009694:	f005 051f 	and.w	r5, r5, #31
 8009698:	fa03 f505 	lsl.w	r5, r3, r5
 800969c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80096a0:	421d      	tst	r5, r3
 80096a2:	bf18      	it	ne
 80096a4:	f04f 0801 	movne.w	r8, #1
 80096a8:	f048 0820 	orr.w	r8, r8, #32
 80096ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096ae:	601c      	str	r4, [r3, #0]
 80096b0:	9b02      	ldr	r3, [sp, #8]
 80096b2:	601e      	str	r6, [r3, #0]
 80096b4:	e6a0      	b.n	80093f8 <__gethex+0x114>
 80096b6:	4290      	cmp	r0, r2
 80096b8:	f842 3c04 	str.w	r3, [r2, #-4]
 80096bc:	d8d6      	bhi.n	800966c <__gethex+0x388>
 80096be:	68a2      	ldr	r2, [r4, #8]
 80096c0:	4593      	cmp	fp, r2
 80096c2:	db17      	blt.n	80096f4 <__gethex+0x410>
 80096c4:	6861      	ldr	r1, [r4, #4]
 80096c6:	4648      	mov	r0, r9
 80096c8:	3101      	adds	r1, #1
 80096ca:	f7fd fc55 	bl	8006f78 <_Balloc>
 80096ce:	4682      	mov	sl, r0
 80096d0:	b918      	cbnz	r0, 80096da <__gethex+0x3f6>
 80096d2:	4602      	mov	r2, r0
 80096d4:	2184      	movs	r1, #132	; 0x84
 80096d6:	4b1a      	ldr	r3, [pc, #104]	; (8009740 <__gethex+0x45c>)
 80096d8:	e6b1      	b.n	800943e <__gethex+0x15a>
 80096da:	6922      	ldr	r2, [r4, #16]
 80096dc:	f104 010c 	add.w	r1, r4, #12
 80096e0:	3202      	adds	r2, #2
 80096e2:	0092      	lsls	r2, r2, #2
 80096e4:	300c      	adds	r0, #12
 80096e6:	f7ff fd4f 	bl	8009188 <memcpy>
 80096ea:	4621      	mov	r1, r4
 80096ec:	4648      	mov	r0, r9
 80096ee:	f7fd fc83 	bl	8006ff8 <_Bfree>
 80096f2:	4654      	mov	r4, sl
 80096f4:	6922      	ldr	r2, [r4, #16]
 80096f6:	1c51      	adds	r1, r2, #1
 80096f8:	6121      	str	r1, [r4, #16]
 80096fa:	2101      	movs	r1, #1
 80096fc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009700:	6151      	str	r1, [r2, #20]
 8009702:	e7bc      	b.n	800967e <__gethex+0x39a>
 8009704:	6921      	ldr	r1, [r4, #16]
 8009706:	4559      	cmp	r1, fp
 8009708:	dd0b      	ble.n	8009722 <__gethex+0x43e>
 800970a:	2101      	movs	r1, #1
 800970c:	4620      	mov	r0, r4
 800970e:	f7ff fd81 	bl	8009214 <rshift>
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	3601      	adds	r6, #1
 8009716:	42b3      	cmp	r3, r6
 8009718:	f6ff aeda 	blt.w	80094d0 <__gethex+0x1ec>
 800971c:	f04f 0801 	mov.w	r8, #1
 8009720:	e7c2      	b.n	80096a8 <__gethex+0x3c4>
 8009722:	f015 051f 	ands.w	r5, r5, #31
 8009726:	d0f9      	beq.n	800971c <__gethex+0x438>
 8009728:	9b01      	ldr	r3, [sp, #4]
 800972a:	f1c5 0520 	rsb	r5, r5, #32
 800972e:	441a      	add	r2, r3
 8009730:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009734:	f7fd fd12 	bl	800715c <__hi0bits>
 8009738:	42a8      	cmp	r0, r5
 800973a:	dbe6      	blt.n	800970a <__gethex+0x426>
 800973c:	e7ee      	b.n	800971c <__gethex+0x438>
 800973e:	bf00      	nop
 8009740:	0800a0f1 	.word	0x0800a0f1

08009744 <L_shift>:
 8009744:	f1c2 0208 	rsb	r2, r2, #8
 8009748:	0092      	lsls	r2, r2, #2
 800974a:	b570      	push	{r4, r5, r6, lr}
 800974c:	f1c2 0620 	rsb	r6, r2, #32
 8009750:	6843      	ldr	r3, [r0, #4]
 8009752:	6804      	ldr	r4, [r0, #0]
 8009754:	fa03 f506 	lsl.w	r5, r3, r6
 8009758:	432c      	orrs	r4, r5
 800975a:	40d3      	lsrs	r3, r2
 800975c:	6004      	str	r4, [r0, #0]
 800975e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009762:	4288      	cmp	r0, r1
 8009764:	d3f4      	bcc.n	8009750 <L_shift+0xc>
 8009766:	bd70      	pop	{r4, r5, r6, pc}

08009768 <__match>:
 8009768:	b530      	push	{r4, r5, lr}
 800976a:	6803      	ldr	r3, [r0, #0]
 800976c:	3301      	adds	r3, #1
 800976e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009772:	b914      	cbnz	r4, 800977a <__match+0x12>
 8009774:	6003      	str	r3, [r0, #0]
 8009776:	2001      	movs	r0, #1
 8009778:	bd30      	pop	{r4, r5, pc}
 800977a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800977e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009782:	2d19      	cmp	r5, #25
 8009784:	bf98      	it	ls
 8009786:	3220      	addls	r2, #32
 8009788:	42a2      	cmp	r2, r4
 800978a:	d0f0      	beq.n	800976e <__match+0x6>
 800978c:	2000      	movs	r0, #0
 800978e:	e7f3      	b.n	8009778 <__match+0x10>

08009790 <__hexnan>:
 8009790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009794:	2500      	movs	r5, #0
 8009796:	680b      	ldr	r3, [r1, #0]
 8009798:	4682      	mov	sl, r0
 800979a:	115e      	asrs	r6, r3, #5
 800979c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80097a0:	f013 031f 	ands.w	r3, r3, #31
 80097a4:	bf18      	it	ne
 80097a6:	3604      	addne	r6, #4
 80097a8:	1f37      	subs	r7, r6, #4
 80097aa:	4690      	mov	r8, r2
 80097ac:	46b9      	mov	r9, r7
 80097ae:	463c      	mov	r4, r7
 80097b0:	46ab      	mov	fp, r5
 80097b2:	b087      	sub	sp, #28
 80097b4:	6801      	ldr	r1, [r0, #0]
 80097b6:	9301      	str	r3, [sp, #4]
 80097b8:	f846 5c04 	str.w	r5, [r6, #-4]
 80097bc:	9502      	str	r5, [sp, #8]
 80097be:	784a      	ldrb	r2, [r1, #1]
 80097c0:	1c4b      	adds	r3, r1, #1
 80097c2:	9303      	str	r3, [sp, #12]
 80097c4:	b342      	cbz	r2, 8009818 <__hexnan+0x88>
 80097c6:	4610      	mov	r0, r2
 80097c8:	9105      	str	r1, [sp, #20]
 80097ca:	9204      	str	r2, [sp, #16]
 80097cc:	f7ff fd75 	bl	80092ba <__hexdig_fun>
 80097d0:	2800      	cmp	r0, #0
 80097d2:	d14f      	bne.n	8009874 <__hexnan+0xe4>
 80097d4:	9a04      	ldr	r2, [sp, #16]
 80097d6:	9905      	ldr	r1, [sp, #20]
 80097d8:	2a20      	cmp	r2, #32
 80097da:	d818      	bhi.n	800980e <__hexnan+0x7e>
 80097dc:	9b02      	ldr	r3, [sp, #8]
 80097de:	459b      	cmp	fp, r3
 80097e0:	dd13      	ble.n	800980a <__hexnan+0x7a>
 80097e2:	454c      	cmp	r4, r9
 80097e4:	d206      	bcs.n	80097f4 <__hexnan+0x64>
 80097e6:	2d07      	cmp	r5, #7
 80097e8:	dc04      	bgt.n	80097f4 <__hexnan+0x64>
 80097ea:	462a      	mov	r2, r5
 80097ec:	4649      	mov	r1, r9
 80097ee:	4620      	mov	r0, r4
 80097f0:	f7ff ffa8 	bl	8009744 <L_shift>
 80097f4:	4544      	cmp	r4, r8
 80097f6:	d950      	bls.n	800989a <__hexnan+0x10a>
 80097f8:	2300      	movs	r3, #0
 80097fa:	f1a4 0904 	sub.w	r9, r4, #4
 80097fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8009802:	461d      	mov	r5, r3
 8009804:	464c      	mov	r4, r9
 8009806:	f8cd b008 	str.w	fp, [sp, #8]
 800980a:	9903      	ldr	r1, [sp, #12]
 800980c:	e7d7      	b.n	80097be <__hexnan+0x2e>
 800980e:	2a29      	cmp	r2, #41	; 0x29
 8009810:	d155      	bne.n	80098be <__hexnan+0x12e>
 8009812:	3102      	adds	r1, #2
 8009814:	f8ca 1000 	str.w	r1, [sl]
 8009818:	f1bb 0f00 	cmp.w	fp, #0
 800981c:	d04f      	beq.n	80098be <__hexnan+0x12e>
 800981e:	454c      	cmp	r4, r9
 8009820:	d206      	bcs.n	8009830 <__hexnan+0xa0>
 8009822:	2d07      	cmp	r5, #7
 8009824:	dc04      	bgt.n	8009830 <__hexnan+0xa0>
 8009826:	462a      	mov	r2, r5
 8009828:	4649      	mov	r1, r9
 800982a:	4620      	mov	r0, r4
 800982c:	f7ff ff8a 	bl	8009744 <L_shift>
 8009830:	4544      	cmp	r4, r8
 8009832:	d934      	bls.n	800989e <__hexnan+0x10e>
 8009834:	4623      	mov	r3, r4
 8009836:	f1a8 0204 	sub.w	r2, r8, #4
 800983a:	f853 1b04 	ldr.w	r1, [r3], #4
 800983e:	429f      	cmp	r7, r3
 8009840:	f842 1f04 	str.w	r1, [r2, #4]!
 8009844:	d2f9      	bcs.n	800983a <__hexnan+0xaa>
 8009846:	1b3b      	subs	r3, r7, r4
 8009848:	f023 0303 	bic.w	r3, r3, #3
 800984c:	3304      	adds	r3, #4
 800984e:	3e03      	subs	r6, #3
 8009850:	3401      	adds	r4, #1
 8009852:	42a6      	cmp	r6, r4
 8009854:	bf38      	it	cc
 8009856:	2304      	movcc	r3, #4
 8009858:	2200      	movs	r2, #0
 800985a:	4443      	add	r3, r8
 800985c:	f843 2b04 	str.w	r2, [r3], #4
 8009860:	429f      	cmp	r7, r3
 8009862:	d2fb      	bcs.n	800985c <__hexnan+0xcc>
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	b91b      	cbnz	r3, 8009870 <__hexnan+0xe0>
 8009868:	4547      	cmp	r7, r8
 800986a:	d126      	bne.n	80098ba <__hexnan+0x12a>
 800986c:	2301      	movs	r3, #1
 800986e:	603b      	str	r3, [r7, #0]
 8009870:	2005      	movs	r0, #5
 8009872:	e025      	b.n	80098c0 <__hexnan+0x130>
 8009874:	3501      	adds	r5, #1
 8009876:	2d08      	cmp	r5, #8
 8009878:	f10b 0b01 	add.w	fp, fp, #1
 800987c:	dd06      	ble.n	800988c <__hexnan+0xfc>
 800987e:	4544      	cmp	r4, r8
 8009880:	d9c3      	bls.n	800980a <__hexnan+0x7a>
 8009882:	2300      	movs	r3, #0
 8009884:	2501      	movs	r5, #1
 8009886:	f844 3c04 	str.w	r3, [r4, #-4]
 800988a:	3c04      	subs	r4, #4
 800988c:	6822      	ldr	r2, [r4, #0]
 800988e:	f000 000f 	and.w	r0, r0, #15
 8009892:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009896:	6020      	str	r0, [r4, #0]
 8009898:	e7b7      	b.n	800980a <__hexnan+0x7a>
 800989a:	2508      	movs	r5, #8
 800989c:	e7b5      	b.n	800980a <__hexnan+0x7a>
 800989e:	9b01      	ldr	r3, [sp, #4]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d0df      	beq.n	8009864 <__hexnan+0xd4>
 80098a4:	f04f 32ff 	mov.w	r2, #4294967295
 80098a8:	f1c3 0320 	rsb	r3, r3, #32
 80098ac:	40da      	lsrs	r2, r3
 80098ae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80098b2:	4013      	ands	r3, r2
 80098b4:	f846 3c04 	str.w	r3, [r6, #-4]
 80098b8:	e7d4      	b.n	8009864 <__hexnan+0xd4>
 80098ba:	3f04      	subs	r7, #4
 80098bc:	e7d2      	b.n	8009864 <__hexnan+0xd4>
 80098be:	2004      	movs	r0, #4
 80098c0:	b007      	add	sp, #28
 80098c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080098c6 <__ascii_mbtowc>:
 80098c6:	b082      	sub	sp, #8
 80098c8:	b901      	cbnz	r1, 80098cc <__ascii_mbtowc+0x6>
 80098ca:	a901      	add	r1, sp, #4
 80098cc:	b142      	cbz	r2, 80098e0 <__ascii_mbtowc+0x1a>
 80098ce:	b14b      	cbz	r3, 80098e4 <__ascii_mbtowc+0x1e>
 80098d0:	7813      	ldrb	r3, [r2, #0]
 80098d2:	600b      	str	r3, [r1, #0]
 80098d4:	7812      	ldrb	r2, [r2, #0]
 80098d6:	1e10      	subs	r0, r2, #0
 80098d8:	bf18      	it	ne
 80098da:	2001      	movne	r0, #1
 80098dc:	b002      	add	sp, #8
 80098de:	4770      	bx	lr
 80098e0:	4610      	mov	r0, r2
 80098e2:	e7fb      	b.n	80098dc <__ascii_mbtowc+0x16>
 80098e4:	f06f 0001 	mvn.w	r0, #1
 80098e8:	e7f8      	b.n	80098dc <__ascii_mbtowc+0x16>

080098ea <_realloc_r>:
 80098ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ee:	4680      	mov	r8, r0
 80098f0:	4614      	mov	r4, r2
 80098f2:	460e      	mov	r6, r1
 80098f4:	b921      	cbnz	r1, 8009900 <_realloc_r+0x16>
 80098f6:	4611      	mov	r1, r2
 80098f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098fc:	f7fd bab0 	b.w	8006e60 <_malloc_r>
 8009900:	b92a      	cbnz	r2, 800990e <_realloc_r+0x24>
 8009902:	f7fd fa3d 	bl	8006d80 <_free_r>
 8009906:	4625      	mov	r5, r4
 8009908:	4628      	mov	r0, r5
 800990a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800990e:	f000 f8b6 	bl	8009a7e <_malloc_usable_size_r>
 8009912:	4284      	cmp	r4, r0
 8009914:	4607      	mov	r7, r0
 8009916:	d802      	bhi.n	800991e <_realloc_r+0x34>
 8009918:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800991c:	d812      	bhi.n	8009944 <_realloc_r+0x5a>
 800991e:	4621      	mov	r1, r4
 8009920:	4640      	mov	r0, r8
 8009922:	f7fd fa9d 	bl	8006e60 <_malloc_r>
 8009926:	4605      	mov	r5, r0
 8009928:	2800      	cmp	r0, #0
 800992a:	d0ed      	beq.n	8009908 <_realloc_r+0x1e>
 800992c:	42bc      	cmp	r4, r7
 800992e:	4622      	mov	r2, r4
 8009930:	4631      	mov	r1, r6
 8009932:	bf28      	it	cs
 8009934:	463a      	movcs	r2, r7
 8009936:	f7ff fc27 	bl	8009188 <memcpy>
 800993a:	4631      	mov	r1, r6
 800993c:	4640      	mov	r0, r8
 800993e:	f7fd fa1f 	bl	8006d80 <_free_r>
 8009942:	e7e1      	b.n	8009908 <_realloc_r+0x1e>
 8009944:	4635      	mov	r5, r6
 8009946:	e7df      	b.n	8009908 <_realloc_r+0x1e>

08009948 <_strtoul_l.constprop.0>:
 8009948:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800994c:	4686      	mov	lr, r0
 800994e:	460d      	mov	r5, r1
 8009950:	4f35      	ldr	r7, [pc, #212]	; (8009a28 <_strtoul_l.constprop.0+0xe0>)
 8009952:	4628      	mov	r0, r5
 8009954:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009958:	5d3e      	ldrb	r6, [r7, r4]
 800995a:	f016 0608 	ands.w	r6, r6, #8
 800995e:	d1f8      	bne.n	8009952 <_strtoul_l.constprop.0+0xa>
 8009960:	2c2d      	cmp	r4, #45	; 0x2d
 8009962:	d130      	bne.n	80099c6 <_strtoul_l.constprop.0+0x7e>
 8009964:	2601      	movs	r6, #1
 8009966:	782c      	ldrb	r4, [r5, #0]
 8009968:	1c85      	adds	r5, r0, #2
 800996a:	2b00      	cmp	r3, #0
 800996c:	d057      	beq.n	8009a1e <_strtoul_l.constprop.0+0xd6>
 800996e:	2b10      	cmp	r3, #16
 8009970:	d109      	bne.n	8009986 <_strtoul_l.constprop.0+0x3e>
 8009972:	2c30      	cmp	r4, #48	; 0x30
 8009974:	d107      	bne.n	8009986 <_strtoul_l.constprop.0+0x3e>
 8009976:	7828      	ldrb	r0, [r5, #0]
 8009978:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800997c:	2858      	cmp	r0, #88	; 0x58
 800997e:	d149      	bne.n	8009a14 <_strtoul_l.constprop.0+0xcc>
 8009980:	2310      	movs	r3, #16
 8009982:	786c      	ldrb	r4, [r5, #1]
 8009984:	3502      	adds	r5, #2
 8009986:	f04f 38ff 	mov.w	r8, #4294967295
 800998a:	fbb8 f8f3 	udiv	r8, r8, r3
 800998e:	2700      	movs	r7, #0
 8009990:	fb03 f908 	mul.w	r9, r3, r8
 8009994:	4638      	mov	r0, r7
 8009996:	ea6f 0909 	mvn.w	r9, r9
 800999a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800999e:	f1bc 0f09 	cmp.w	ip, #9
 80099a2:	d815      	bhi.n	80099d0 <_strtoul_l.constprop.0+0x88>
 80099a4:	4664      	mov	r4, ip
 80099a6:	42a3      	cmp	r3, r4
 80099a8:	dd23      	ble.n	80099f2 <_strtoul_l.constprop.0+0xaa>
 80099aa:	f1b7 3fff 	cmp.w	r7, #4294967295
 80099ae:	d007      	beq.n	80099c0 <_strtoul_l.constprop.0+0x78>
 80099b0:	4580      	cmp	r8, r0
 80099b2:	d31b      	bcc.n	80099ec <_strtoul_l.constprop.0+0xa4>
 80099b4:	d101      	bne.n	80099ba <_strtoul_l.constprop.0+0x72>
 80099b6:	45a1      	cmp	r9, r4
 80099b8:	db18      	blt.n	80099ec <_strtoul_l.constprop.0+0xa4>
 80099ba:	2701      	movs	r7, #1
 80099bc:	fb00 4003 	mla	r0, r0, r3, r4
 80099c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80099c4:	e7e9      	b.n	800999a <_strtoul_l.constprop.0+0x52>
 80099c6:	2c2b      	cmp	r4, #43	; 0x2b
 80099c8:	bf04      	itt	eq
 80099ca:	782c      	ldrbeq	r4, [r5, #0]
 80099cc:	1c85      	addeq	r5, r0, #2
 80099ce:	e7cc      	b.n	800996a <_strtoul_l.constprop.0+0x22>
 80099d0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80099d4:	f1bc 0f19 	cmp.w	ip, #25
 80099d8:	d801      	bhi.n	80099de <_strtoul_l.constprop.0+0x96>
 80099da:	3c37      	subs	r4, #55	; 0x37
 80099dc:	e7e3      	b.n	80099a6 <_strtoul_l.constprop.0+0x5e>
 80099de:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80099e2:	f1bc 0f19 	cmp.w	ip, #25
 80099e6:	d804      	bhi.n	80099f2 <_strtoul_l.constprop.0+0xaa>
 80099e8:	3c57      	subs	r4, #87	; 0x57
 80099ea:	e7dc      	b.n	80099a6 <_strtoul_l.constprop.0+0x5e>
 80099ec:	f04f 37ff 	mov.w	r7, #4294967295
 80099f0:	e7e6      	b.n	80099c0 <_strtoul_l.constprop.0+0x78>
 80099f2:	1c7b      	adds	r3, r7, #1
 80099f4:	d106      	bne.n	8009a04 <_strtoul_l.constprop.0+0xbc>
 80099f6:	2322      	movs	r3, #34	; 0x22
 80099f8:	4638      	mov	r0, r7
 80099fa:	f8ce 3000 	str.w	r3, [lr]
 80099fe:	b932      	cbnz	r2, 8009a0e <_strtoul_l.constprop.0+0xc6>
 8009a00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a04:	b106      	cbz	r6, 8009a08 <_strtoul_l.constprop.0+0xc0>
 8009a06:	4240      	negs	r0, r0
 8009a08:	2a00      	cmp	r2, #0
 8009a0a:	d0f9      	beq.n	8009a00 <_strtoul_l.constprop.0+0xb8>
 8009a0c:	b107      	cbz	r7, 8009a10 <_strtoul_l.constprop.0+0xc8>
 8009a0e:	1e69      	subs	r1, r5, #1
 8009a10:	6011      	str	r1, [r2, #0]
 8009a12:	e7f5      	b.n	8009a00 <_strtoul_l.constprop.0+0xb8>
 8009a14:	2430      	movs	r4, #48	; 0x30
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d1b5      	bne.n	8009986 <_strtoul_l.constprop.0+0x3e>
 8009a1a:	2308      	movs	r3, #8
 8009a1c:	e7b3      	b.n	8009986 <_strtoul_l.constprop.0+0x3e>
 8009a1e:	2c30      	cmp	r4, #48	; 0x30
 8009a20:	d0a9      	beq.n	8009976 <_strtoul_l.constprop.0+0x2e>
 8009a22:	230a      	movs	r3, #10
 8009a24:	e7af      	b.n	8009986 <_strtoul_l.constprop.0+0x3e>
 8009a26:	bf00      	nop
 8009a28:	0800a2b1 	.word	0x0800a2b1

08009a2c <_strtoul_r>:
 8009a2c:	f7ff bf8c 	b.w	8009948 <_strtoul_l.constprop.0>

08009a30 <__ascii_wctomb>:
 8009a30:	4603      	mov	r3, r0
 8009a32:	4608      	mov	r0, r1
 8009a34:	b141      	cbz	r1, 8009a48 <__ascii_wctomb+0x18>
 8009a36:	2aff      	cmp	r2, #255	; 0xff
 8009a38:	d904      	bls.n	8009a44 <__ascii_wctomb+0x14>
 8009a3a:	228a      	movs	r2, #138	; 0x8a
 8009a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a40:	601a      	str	r2, [r3, #0]
 8009a42:	4770      	bx	lr
 8009a44:	2001      	movs	r0, #1
 8009a46:	700a      	strb	r2, [r1, #0]
 8009a48:	4770      	bx	lr
	...

08009a4c <fiprintf>:
 8009a4c:	b40e      	push	{r1, r2, r3}
 8009a4e:	b503      	push	{r0, r1, lr}
 8009a50:	4601      	mov	r1, r0
 8009a52:	ab03      	add	r3, sp, #12
 8009a54:	4805      	ldr	r0, [pc, #20]	; (8009a6c <fiprintf+0x20>)
 8009a56:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a5a:	6800      	ldr	r0, [r0, #0]
 8009a5c:	9301      	str	r3, [sp, #4]
 8009a5e:	f000 f83d 	bl	8009adc <_vfiprintf_r>
 8009a62:	b002      	add	sp, #8
 8009a64:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a68:	b003      	add	sp, #12
 8009a6a:	4770      	bx	lr
 8009a6c:	20000068 	.word	0x20000068

08009a70 <abort>:
 8009a70:	2006      	movs	r0, #6
 8009a72:	b508      	push	{r3, lr}
 8009a74:	f000 fa0a 	bl	8009e8c <raise>
 8009a78:	2001      	movs	r0, #1
 8009a7a:	f7f7 fd8b 	bl	8001594 <_exit>

08009a7e <_malloc_usable_size_r>:
 8009a7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a82:	1f18      	subs	r0, r3, #4
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	bfbc      	itt	lt
 8009a88:	580b      	ldrlt	r3, [r1, r0]
 8009a8a:	18c0      	addlt	r0, r0, r3
 8009a8c:	4770      	bx	lr

08009a8e <__sfputc_r>:
 8009a8e:	6893      	ldr	r3, [r2, #8]
 8009a90:	b410      	push	{r4}
 8009a92:	3b01      	subs	r3, #1
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	6093      	str	r3, [r2, #8]
 8009a98:	da07      	bge.n	8009aaa <__sfputc_r+0x1c>
 8009a9a:	6994      	ldr	r4, [r2, #24]
 8009a9c:	42a3      	cmp	r3, r4
 8009a9e:	db01      	blt.n	8009aa4 <__sfputc_r+0x16>
 8009aa0:	290a      	cmp	r1, #10
 8009aa2:	d102      	bne.n	8009aaa <__sfputc_r+0x1c>
 8009aa4:	bc10      	pop	{r4}
 8009aa6:	f000 b933 	b.w	8009d10 <__swbuf_r>
 8009aaa:	6813      	ldr	r3, [r2, #0]
 8009aac:	1c58      	adds	r0, r3, #1
 8009aae:	6010      	str	r0, [r2, #0]
 8009ab0:	7019      	strb	r1, [r3, #0]
 8009ab2:	4608      	mov	r0, r1
 8009ab4:	bc10      	pop	{r4}
 8009ab6:	4770      	bx	lr

08009ab8 <__sfputs_r>:
 8009ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aba:	4606      	mov	r6, r0
 8009abc:	460f      	mov	r7, r1
 8009abe:	4614      	mov	r4, r2
 8009ac0:	18d5      	adds	r5, r2, r3
 8009ac2:	42ac      	cmp	r4, r5
 8009ac4:	d101      	bne.n	8009aca <__sfputs_r+0x12>
 8009ac6:	2000      	movs	r0, #0
 8009ac8:	e007      	b.n	8009ada <__sfputs_r+0x22>
 8009aca:	463a      	mov	r2, r7
 8009acc:	4630      	mov	r0, r6
 8009ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ad2:	f7ff ffdc 	bl	8009a8e <__sfputc_r>
 8009ad6:	1c43      	adds	r3, r0, #1
 8009ad8:	d1f3      	bne.n	8009ac2 <__sfputs_r+0xa>
 8009ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009adc <_vfiprintf_r>:
 8009adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae0:	460d      	mov	r5, r1
 8009ae2:	4614      	mov	r4, r2
 8009ae4:	4698      	mov	r8, r3
 8009ae6:	4606      	mov	r6, r0
 8009ae8:	b09d      	sub	sp, #116	; 0x74
 8009aea:	b118      	cbz	r0, 8009af4 <_vfiprintf_r+0x18>
 8009aec:	6a03      	ldr	r3, [r0, #32]
 8009aee:	b90b      	cbnz	r3, 8009af4 <_vfiprintf_r+0x18>
 8009af0:	f7fc f94a 	bl	8005d88 <__sinit>
 8009af4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009af6:	07d9      	lsls	r1, r3, #31
 8009af8:	d405      	bmi.n	8009b06 <_vfiprintf_r+0x2a>
 8009afa:	89ab      	ldrh	r3, [r5, #12]
 8009afc:	059a      	lsls	r2, r3, #22
 8009afe:	d402      	bmi.n	8009b06 <_vfiprintf_r+0x2a>
 8009b00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b02:	f7fc fab8 	bl	8006076 <__retarget_lock_acquire_recursive>
 8009b06:	89ab      	ldrh	r3, [r5, #12]
 8009b08:	071b      	lsls	r3, r3, #28
 8009b0a:	d501      	bpl.n	8009b10 <_vfiprintf_r+0x34>
 8009b0c:	692b      	ldr	r3, [r5, #16]
 8009b0e:	b99b      	cbnz	r3, 8009b38 <_vfiprintf_r+0x5c>
 8009b10:	4629      	mov	r1, r5
 8009b12:	4630      	mov	r0, r6
 8009b14:	f000 f93a 	bl	8009d8c <__swsetup_r>
 8009b18:	b170      	cbz	r0, 8009b38 <_vfiprintf_r+0x5c>
 8009b1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b1c:	07dc      	lsls	r4, r3, #31
 8009b1e:	d504      	bpl.n	8009b2a <_vfiprintf_r+0x4e>
 8009b20:	f04f 30ff 	mov.w	r0, #4294967295
 8009b24:	b01d      	add	sp, #116	; 0x74
 8009b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b2a:	89ab      	ldrh	r3, [r5, #12]
 8009b2c:	0598      	lsls	r0, r3, #22
 8009b2e:	d4f7      	bmi.n	8009b20 <_vfiprintf_r+0x44>
 8009b30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b32:	f7fc faa1 	bl	8006078 <__retarget_lock_release_recursive>
 8009b36:	e7f3      	b.n	8009b20 <_vfiprintf_r+0x44>
 8009b38:	2300      	movs	r3, #0
 8009b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8009b3c:	2320      	movs	r3, #32
 8009b3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b42:	2330      	movs	r3, #48	; 0x30
 8009b44:	f04f 0901 	mov.w	r9, #1
 8009b48:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009cfc <_vfiprintf_r+0x220>
 8009b50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b54:	4623      	mov	r3, r4
 8009b56:	469a      	mov	sl, r3
 8009b58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b5c:	b10a      	cbz	r2, 8009b62 <_vfiprintf_r+0x86>
 8009b5e:	2a25      	cmp	r2, #37	; 0x25
 8009b60:	d1f9      	bne.n	8009b56 <_vfiprintf_r+0x7a>
 8009b62:	ebba 0b04 	subs.w	fp, sl, r4
 8009b66:	d00b      	beq.n	8009b80 <_vfiprintf_r+0xa4>
 8009b68:	465b      	mov	r3, fp
 8009b6a:	4622      	mov	r2, r4
 8009b6c:	4629      	mov	r1, r5
 8009b6e:	4630      	mov	r0, r6
 8009b70:	f7ff ffa2 	bl	8009ab8 <__sfputs_r>
 8009b74:	3001      	adds	r0, #1
 8009b76:	f000 80a9 	beq.w	8009ccc <_vfiprintf_r+0x1f0>
 8009b7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b7c:	445a      	add	r2, fp
 8009b7e:	9209      	str	r2, [sp, #36]	; 0x24
 8009b80:	f89a 3000 	ldrb.w	r3, [sl]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f000 80a1 	beq.w	8009ccc <_vfiprintf_r+0x1f0>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b94:	f10a 0a01 	add.w	sl, sl, #1
 8009b98:	9304      	str	r3, [sp, #16]
 8009b9a:	9307      	str	r3, [sp, #28]
 8009b9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ba0:	931a      	str	r3, [sp, #104]	; 0x68
 8009ba2:	4654      	mov	r4, sl
 8009ba4:	2205      	movs	r2, #5
 8009ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009baa:	4854      	ldr	r0, [pc, #336]	; (8009cfc <_vfiprintf_r+0x220>)
 8009bac:	f7fc fa65 	bl	800607a <memchr>
 8009bb0:	9a04      	ldr	r2, [sp, #16]
 8009bb2:	b9d8      	cbnz	r0, 8009bec <_vfiprintf_r+0x110>
 8009bb4:	06d1      	lsls	r1, r2, #27
 8009bb6:	bf44      	itt	mi
 8009bb8:	2320      	movmi	r3, #32
 8009bba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bbe:	0713      	lsls	r3, r2, #28
 8009bc0:	bf44      	itt	mi
 8009bc2:	232b      	movmi	r3, #43	; 0x2b
 8009bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bc8:	f89a 3000 	ldrb.w	r3, [sl]
 8009bcc:	2b2a      	cmp	r3, #42	; 0x2a
 8009bce:	d015      	beq.n	8009bfc <_vfiprintf_r+0x120>
 8009bd0:	4654      	mov	r4, sl
 8009bd2:	2000      	movs	r0, #0
 8009bd4:	f04f 0c0a 	mov.w	ip, #10
 8009bd8:	9a07      	ldr	r2, [sp, #28]
 8009bda:	4621      	mov	r1, r4
 8009bdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009be0:	3b30      	subs	r3, #48	; 0x30
 8009be2:	2b09      	cmp	r3, #9
 8009be4:	d94d      	bls.n	8009c82 <_vfiprintf_r+0x1a6>
 8009be6:	b1b0      	cbz	r0, 8009c16 <_vfiprintf_r+0x13a>
 8009be8:	9207      	str	r2, [sp, #28]
 8009bea:	e014      	b.n	8009c16 <_vfiprintf_r+0x13a>
 8009bec:	eba0 0308 	sub.w	r3, r0, r8
 8009bf0:	fa09 f303 	lsl.w	r3, r9, r3
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	46a2      	mov	sl, r4
 8009bf8:	9304      	str	r3, [sp, #16]
 8009bfa:	e7d2      	b.n	8009ba2 <_vfiprintf_r+0xc6>
 8009bfc:	9b03      	ldr	r3, [sp, #12]
 8009bfe:	1d19      	adds	r1, r3, #4
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	9103      	str	r1, [sp, #12]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	bfbb      	ittet	lt
 8009c08:	425b      	neglt	r3, r3
 8009c0a:	f042 0202 	orrlt.w	r2, r2, #2
 8009c0e:	9307      	strge	r3, [sp, #28]
 8009c10:	9307      	strlt	r3, [sp, #28]
 8009c12:	bfb8      	it	lt
 8009c14:	9204      	strlt	r2, [sp, #16]
 8009c16:	7823      	ldrb	r3, [r4, #0]
 8009c18:	2b2e      	cmp	r3, #46	; 0x2e
 8009c1a:	d10c      	bne.n	8009c36 <_vfiprintf_r+0x15a>
 8009c1c:	7863      	ldrb	r3, [r4, #1]
 8009c1e:	2b2a      	cmp	r3, #42	; 0x2a
 8009c20:	d134      	bne.n	8009c8c <_vfiprintf_r+0x1b0>
 8009c22:	9b03      	ldr	r3, [sp, #12]
 8009c24:	3402      	adds	r4, #2
 8009c26:	1d1a      	adds	r2, r3, #4
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	9203      	str	r2, [sp, #12]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	bfb8      	it	lt
 8009c30:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c34:	9305      	str	r3, [sp, #20]
 8009c36:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009d00 <_vfiprintf_r+0x224>
 8009c3a:	2203      	movs	r2, #3
 8009c3c:	4650      	mov	r0, sl
 8009c3e:	7821      	ldrb	r1, [r4, #0]
 8009c40:	f7fc fa1b 	bl	800607a <memchr>
 8009c44:	b138      	cbz	r0, 8009c56 <_vfiprintf_r+0x17a>
 8009c46:	2240      	movs	r2, #64	; 0x40
 8009c48:	9b04      	ldr	r3, [sp, #16]
 8009c4a:	eba0 000a 	sub.w	r0, r0, sl
 8009c4e:	4082      	lsls	r2, r0
 8009c50:	4313      	orrs	r3, r2
 8009c52:	3401      	adds	r4, #1
 8009c54:	9304      	str	r3, [sp, #16]
 8009c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c5a:	2206      	movs	r2, #6
 8009c5c:	4829      	ldr	r0, [pc, #164]	; (8009d04 <_vfiprintf_r+0x228>)
 8009c5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c62:	f7fc fa0a 	bl	800607a <memchr>
 8009c66:	2800      	cmp	r0, #0
 8009c68:	d03f      	beq.n	8009cea <_vfiprintf_r+0x20e>
 8009c6a:	4b27      	ldr	r3, [pc, #156]	; (8009d08 <_vfiprintf_r+0x22c>)
 8009c6c:	bb1b      	cbnz	r3, 8009cb6 <_vfiprintf_r+0x1da>
 8009c6e:	9b03      	ldr	r3, [sp, #12]
 8009c70:	3307      	adds	r3, #7
 8009c72:	f023 0307 	bic.w	r3, r3, #7
 8009c76:	3308      	adds	r3, #8
 8009c78:	9303      	str	r3, [sp, #12]
 8009c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c7c:	443b      	add	r3, r7
 8009c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c80:	e768      	b.n	8009b54 <_vfiprintf_r+0x78>
 8009c82:	460c      	mov	r4, r1
 8009c84:	2001      	movs	r0, #1
 8009c86:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c8a:	e7a6      	b.n	8009bda <_vfiprintf_r+0xfe>
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	f04f 0c0a 	mov.w	ip, #10
 8009c92:	4619      	mov	r1, r3
 8009c94:	3401      	adds	r4, #1
 8009c96:	9305      	str	r3, [sp, #20]
 8009c98:	4620      	mov	r0, r4
 8009c9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c9e:	3a30      	subs	r2, #48	; 0x30
 8009ca0:	2a09      	cmp	r2, #9
 8009ca2:	d903      	bls.n	8009cac <_vfiprintf_r+0x1d0>
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d0c6      	beq.n	8009c36 <_vfiprintf_r+0x15a>
 8009ca8:	9105      	str	r1, [sp, #20]
 8009caa:	e7c4      	b.n	8009c36 <_vfiprintf_r+0x15a>
 8009cac:	4604      	mov	r4, r0
 8009cae:	2301      	movs	r3, #1
 8009cb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cb4:	e7f0      	b.n	8009c98 <_vfiprintf_r+0x1bc>
 8009cb6:	ab03      	add	r3, sp, #12
 8009cb8:	9300      	str	r3, [sp, #0]
 8009cba:	462a      	mov	r2, r5
 8009cbc:	4630      	mov	r0, r6
 8009cbe:	4b13      	ldr	r3, [pc, #76]	; (8009d0c <_vfiprintf_r+0x230>)
 8009cc0:	a904      	add	r1, sp, #16
 8009cc2:	f7fb fa05 	bl	80050d0 <_printf_float>
 8009cc6:	4607      	mov	r7, r0
 8009cc8:	1c78      	adds	r0, r7, #1
 8009cca:	d1d6      	bne.n	8009c7a <_vfiprintf_r+0x19e>
 8009ccc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cce:	07d9      	lsls	r1, r3, #31
 8009cd0:	d405      	bmi.n	8009cde <_vfiprintf_r+0x202>
 8009cd2:	89ab      	ldrh	r3, [r5, #12]
 8009cd4:	059a      	lsls	r2, r3, #22
 8009cd6:	d402      	bmi.n	8009cde <_vfiprintf_r+0x202>
 8009cd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cda:	f7fc f9cd 	bl	8006078 <__retarget_lock_release_recursive>
 8009cde:	89ab      	ldrh	r3, [r5, #12]
 8009ce0:	065b      	lsls	r3, r3, #25
 8009ce2:	f53f af1d 	bmi.w	8009b20 <_vfiprintf_r+0x44>
 8009ce6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ce8:	e71c      	b.n	8009b24 <_vfiprintf_r+0x48>
 8009cea:	ab03      	add	r3, sp, #12
 8009cec:	9300      	str	r3, [sp, #0]
 8009cee:	462a      	mov	r2, r5
 8009cf0:	4630      	mov	r0, r6
 8009cf2:	4b06      	ldr	r3, [pc, #24]	; (8009d0c <_vfiprintf_r+0x230>)
 8009cf4:	a904      	add	r1, sp, #16
 8009cf6:	f7fb fc8b 	bl	8005610 <_printf_i>
 8009cfa:	e7e4      	b.n	8009cc6 <_vfiprintf_r+0x1ea>
 8009cfc:	0800a3b1 	.word	0x0800a3b1
 8009d00:	0800a3b7 	.word	0x0800a3b7
 8009d04:	0800a3bb 	.word	0x0800a3bb
 8009d08:	080050d1 	.word	0x080050d1
 8009d0c:	08009ab9 	.word	0x08009ab9

08009d10 <__swbuf_r>:
 8009d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d12:	460e      	mov	r6, r1
 8009d14:	4614      	mov	r4, r2
 8009d16:	4605      	mov	r5, r0
 8009d18:	b118      	cbz	r0, 8009d22 <__swbuf_r+0x12>
 8009d1a:	6a03      	ldr	r3, [r0, #32]
 8009d1c:	b90b      	cbnz	r3, 8009d22 <__swbuf_r+0x12>
 8009d1e:	f7fc f833 	bl	8005d88 <__sinit>
 8009d22:	69a3      	ldr	r3, [r4, #24]
 8009d24:	60a3      	str	r3, [r4, #8]
 8009d26:	89a3      	ldrh	r3, [r4, #12]
 8009d28:	071a      	lsls	r2, r3, #28
 8009d2a:	d525      	bpl.n	8009d78 <__swbuf_r+0x68>
 8009d2c:	6923      	ldr	r3, [r4, #16]
 8009d2e:	b31b      	cbz	r3, 8009d78 <__swbuf_r+0x68>
 8009d30:	6823      	ldr	r3, [r4, #0]
 8009d32:	6922      	ldr	r2, [r4, #16]
 8009d34:	b2f6      	uxtb	r6, r6
 8009d36:	1a98      	subs	r0, r3, r2
 8009d38:	6963      	ldr	r3, [r4, #20]
 8009d3a:	4637      	mov	r7, r6
 8009d3c:	4283      	cmp	r3, r0
 8009d3e:	dc04      	bgt.n	8009d4a <__swbuf_r+0x3a>
 8009d40:	4621      	mov	r1, r4
 8009d42:	4628      	mov	r0, r5
 8009d44:	f7ff f94a 	bl	8008fdc <_fflush_r>
 8009d48:	b9e0      	cbnz	r0, 8009d84 <__swbuf_r+0x74>
 8009d4a:	68a3      	ldr	r3, [r4, #8]
 8009d4c:	3b01      	subs	r3, #1
 8009d4e:	60a3      	str	r3, [r4, #8]
 8009d50:	6823      	ldr	r3, [r4, #0]
 8009d52:	1c5a      	adds	r2, r3, #1
 8009d54:	6022      	str	r2, [r4, #0]
 8009d56:	701e      	strb	r6, [r3, #0]
 8009d58:	6962      	ldr	r2, [r4, #20]
 8009d5a:	1c43      	adds	r3, r0, #1
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d004      	beq.n	8009d6a <__swbuf_r+0x5a>
 8009d60:	89a3      	ldrh	r3, [r4, #12]
 8009d62:	07db      	lsls	r3, r3, #31
 8009d64:	d506      	bpl.n	8009d74 <__swbuf_r+0x64>
 8009d66:	2e0a      	cmp	r6, #10
 8009d68:	d104      	bne.n	8009d74 <__swbuf_r+0x64>
 8009d6a:	4621      	mov	r1, r4
 8009d6c:	4628      	mov	r0, r5
 8009d6e:	f7ff f935 	bl	8008fdc <_fflush_r>
 8009d72:	b938      	cbnz	r0, 8009d84 <__swbuf_r+0x74>
 8009d74:	4638      	mov	r0, r7
 8009d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d78:	4621      	mov	r1, r4
 8009d7a:	4628      	mov	r0, r5
 8009d7c:	f000 f806 	bl	8009d8c <__swsetup_r>
 8009d80:	2800      	cmp	r0, #0
 8009d82:	d0d5      	beq.n	8009d30 <__swbuf_r+0x20>
 8009d84:	f04f 37ff 	mov.w	r7, #4294967295
 8009d88:	e7f4      	b.n	8009d74 <__swbuf_r+0x64>
	...

08009d8c <__swsetup_r>:
 8009d8c:	b538      	push	{r3, r4, r5, lr}
 8009d8e:	4b2a      	ldr	r3, [pc, #168]	; (8009e38 <__swsetup_r+0xac>)
 8009d90:	4605      	mov	r5, r0
 8009d92:	6818      	ldr	r0, [r3, #0]
 8009d94:	460c      	mov	r4, r1
 8009d96:	b118      	cbz	r0, 8009da0 <__swsetup_r+0x14>
 8009d98:	6a03      	ldr	r3, [r0, #32]
 8009d9a:	b90b      	cbnz	r3, 8009da0 <__swsetup_r+0x14>
 8009d9c:	f7fb fff4 	bl	8005d88 <__sinit>
 8009da0:	89a3      	ldrh	r3, [r4, #12]
 8009da2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009da6:	0718      	lsls	r0, r3, #28
 8009da8:	d422      	bmi.n	8009df0 <__swsetup_r+0x64>
 8009daa:	06d9      	lsls	r1, r3, #27
 8009dac:	d407      	bmi.n	8009dbe <__swsetup_r+0x32>
 8009dae:	2309      	movs	r3, #9
 8009db0:	602b      	str	r3, [r5, #0]
 8009db2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009db6:	f04f 30ff 	mov.w	r0, #4294967295
 8009dba:	81a3      	strh	r3, [r4, #12]
 8009dbc:	e034      	b.n	8009e28 <__swsetup_r+0x9c>
 8009dbe:	0758      	lsls	r0, r3, #29
 8009dc0:	d512      	bpl.n	8009de8 <__swsetup_r+0x5c>
 8009dc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dc4:	b141      	cbz	r1, 8009dd8 <__swsetup_r+0x4c>
 8009dc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dca:	4299      	cmp	r1, r3
 8009dcc:	d002      	beq.n	8009dd4 <__swsetup_r+0x48>
 8009dce:	4628      	mov	r0, r5
 8009dd0:	f7fc ffd6 	bl	8006d80 <_free_r>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	6363      	str	r3, [r4, #52]	; 0x34
 8009dd8:	89a3      	ldrh	r3, [r4, #12]
 8009dda:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009dde:	81a3      	strh	r3, [r4, #12]
 8009de0:	2300      	movs	r3, #0
 8009de2:	6063      	str	r3, [r4, #4]
 8009de4:	6923      	ldr	r3, [r4, #16]
 8009de6:	6023      	str	r3, [r4, #0]
 8009de8:	89a3      	ldrh	r3, [r4, #12]
 8009dea:	f043 0308 	orr.w	r3, r3, #8
 8009dee:	81a3      	strh	r3, [r4, #12]
 8009df0:	6923      	ldr	r3, [r4, #16]
 8009df2:	b94b      	cbnz	r3, 8009e08 <__swsetup_r+0x7c>
 8009df4:	89a3      	ldrh	r3, [r4, #12]
 8009df6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009dfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dfe:	d003      	beq.n	8009e08 <__swsetup_r+0x7c>
 8009e00:	4621      	mov	r1, r4
 8009e02:	4628      	mov	r0, r5
 8009e04:	f000 f883 	bl	8009f0e <__smakebuf_r>
 8009e08:	89a0      	ldrh	r0, [r4, #12]
 8009e0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e0e:	f010 0301 	ands.w	r3, r0, #1
 8009e12:	d00a      	beq.n	8009e2a <__swsetup_r+0x9e>
 8009e14:	2300      	movs	r3, #0
 8009e16:	60a3      	str	r3, [r4, #8]
 8009e18:	6963      	ldr	r3, [r4, #20]
 8009e1a:	425b      	negs	r3, r3
 8009e1c:	61a3      	str	r3, [r4, #24]
 8009e1e:	6923      	ldr	r3, [r4, #16]
 8009e20:	b943      	cbnz	r3, 8009e34 <__swsetup_r+0xa8>
 8009e22:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e26:	d1c4      	bne.n	8009db2 <__swsetup_r+0x26>
 8009e28:	bd38      	pop	{r3, r4, r5, pc}
 8009e2a:	0781      	lsls	r1, r0, #30
 8009e2c:	bf58      	it	pl
 8009e2e:	6963      	ldrpl	r3, [r4, #20]
 8009e30:	60a3      	str	r3, [r4, #8]
 8009e32:	e7f4      	b.n	8009e1e <__swsetup_r+0x92>
 8009e34:	2000      	movs	r0, #0
 8009e36:	e7f7      	b.n	8009e28 <__swsetup_r+0x9c>
 8009e38:	20000068 	.word	0x20000068

08009e3c <_raise_r>:
 8009e3c:	291f      	cmp	r1, #31
 8009e3e:	b538      	push	{r3, r4, r5, lr}
 8009e40:	4604      	mov	r4, r0
 8009e42:	460d      	mov	r5, r1
 8009e44:	d904      	bls.n	8009e50 <_raise_r+0x14>
 8009e46:	2316      	movs	r3, #22
 8009e48:	6003      	str	r3, [r0, #0]
 8009e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e4e:	bd38      	pop	{r3, r4, r5, pc}
 8009e50:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009e52:	b112      	cbz	r2, 8009e5a <_raise_r+0x1e>
 8009e54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e58:	b94b      	cbnz	r3, 8009e6e <_raise_r+0x32>
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	f000 f830 	bl	8009ec0 <_getpid_r>
 8009e60:	462a      	mov	r2, r5
 8009e62:	4601      	mov	r1, r0
 8009e64:	4620      	mov	r0, r4
 8009e66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e6a:	f000 b817 	b.w	8009e9c <_kill_r>
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d00a      	beq.n	8009e88 <_raise_r+0x4c>
 8009e72:	1c59      	adds	r1, r3, #1
 8009e74:	d103      	bne.n	8009e7e <_raise_r+0x42>
 8009e76:	2316      	movs	r3, #22
 8009e78:	6003      	str	r3, [r0, #0]
 8009e7a:	2001      	movs	r0, #1
 8009e7c:	e7e7      	b.n	8009e4e <_raise_r+0x12>
 8009e7e:	2400      	movs	r4, #0
 8009e80:	4628      	mov	r0, r5
 8009e82:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e86:	4798      	blx	r3
 8009e88:	2000      	movs	r0, #0
 8009e8a:	e7e0      	b.n	8009e4e <_raise_r+0x12>

08009e8c <raise>:
 8009e8c:	4b02      	ldr	r3, [pc, #8]	; (8009e98 <raise+0xc>)
 8009e8e:	4601      	mov	r1, r0
 8009e90:	6818      	ldr	r0, [r3, #0]
 8009e92:	f7ff bfd3 	b.w	8009e3c <_raise_r>
 8009e96:	bf00      	nop
 8009e98:	20000068 	.word	0x20000068

08009e9c <_kill_r>:
 8009e9c:	b538      	push	{r3, r4, r5, lr}
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	4d06      	ldr	r5, [pc, #24]	; (8009ebc <_kill_r+0x20>)
 8009ea2:	4604      	mov	r4, r0
 8009ea4:	4608      	mov	r0, r1
 8009ea6:	4611      	mov	r1, r2
 8009ea8:	602b      	str	r3, [r5, #0]
 8009eaa:	f7f7 fb63 	bl	8001574 <_kill>
 8009eae:	1c43      	adds	r3, r0, #1
 8009eb0:	d102      	bne.n	8009eb8 <_kill_r+0x1c>
 8009eb2:	682b      	ldr	r3, [r5, #0]
 8009eb4:	b103      	cbz	r3, 8009eb8 <_kill_r+0x1c>
 8009eb6:	6023      	str	r3, [r4, #0]
 8009eb8:	bd38      	pop	{r3, r4, r5, pc}
 8009eba:	bf00      	nop
 8009ebc:	20000580 	.word	0x20000580

08009ec0 <_getpid_r>:
 8009ec0:	f7f7 bb51 	b.w	8001566 <_getpid>

08009ec4 <__swhatbuf_r>:
 8009ec4:	b570      	push	{r4, r5, r6, lr}
 8009ec6:	460c      	mov	r4, r1
 8009ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ecc:	4615      	mov	r5, r2
 8009ece:	2900      	cmp	r1, #0
 8009ed0:	461e      	mov	r6, r3
 8009ed2:	b096      	sub	sp, #88	; 0x58
 8009ed4:	da0c      	bge.n	8009ef0 <__swhatbuf_r+0x2c>
 8009ed6:	89a3      	ldrh	r3, [r4, #12]
 8009ed8:	2100      	movs	r1, #0
 8009eda:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009ede:	bf0c      	ite	eq
 8009ee0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009ee4:	2340      	movne	r3, #64	; 0x40
 8009ee6:	2000      	movs	r0, #0
 8009ee8:	6031      	str	r1, [r6, #0]
 8009eea:	602b      	str	r3, [r5, #0]
 8009eec:	b016      	add	sp, #88	; 0x58
 8009eee:	bd70      	pop	{r4, r5, r6, pc}
 8009ef0:	466a      	mov	r2, sp
 8009ef2:	f000 f849 	bl	8009f88 <_fstat_r>
 8009ef6:	2800      	cmp	r0, #0
 8009ef8:	dbed      	blt.n	8009ed6 <__swhatbuf_r+0x12>
 8009efa:	9901      	ldr	r1, [sp, #4]
 8009efc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009f00:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009f04:	4259      	negs	r1, r3
 8009f06:	4159      	adcs	r1, r3
 8009f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f0c:	e7eb      	b.n	8009ee6 <__swhatbuf_r+0x22>

08009f0e <__smakebuf_r>:
 8009f0e:	898b      	ldrh	r3, [r1, #12]
 8009f10:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f12:	079d      	lsls	r5, r3, #30
 8009f14:	4606      	mov	r6, r0
 8009f16:	460c      	mov	r4, r1
 8009f18:	d507      	bpl.n	8009f2a <__smakebuf_r+0x1c>
 8009f1a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f1e:	6023      	str	r3, [r4, #0]
 8009f20:	6123      	str	r3, [r4, #16]
 8009f22:	2301      	movs	r3, #1
 8009f24:	6163      	str	r3, [r4, #20]
 8009f26:	b002      	add	sp, #8
 8009f28:	bd70      	pop	{r4, r5, r6, pc}
 8009f2a:	466a      	mov	r2, sp
 8009f2c:	ab01      	add	r3, sp, #4
 8009f2e:	f7ff ffc9 	bl	8009ec4 <__swhatbuf_r>
 8009f32:	9900      	ldr	r1, [sp, #0]
 8009f34:	4605      	mov	r5, r0
 8009f36:	4630      	mov	r0, r6
 8009f38:	f7fc ff92 	bl	8006e60 <_malloc_r>
 8009f3c:	b948      	cbnz	r0, 8009f52 <__smakebuf_r+0x44>
 8009f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f42:	059a      	lsls	r2, r3, #22
 8009f44:	d4ef      	bmi.n	8009f26 <__smakebuf_r+0x18>
 8009f46:	f023 0303 	bic.w	r3, r3, #3
 8009f4a:	f043 0302 	orr.w	r3, r3, #2
 8009f4e:	81a3      	strh	r3, [r4, #12]
 8009f50:	e7e3      	b.n	8009f1a <__smakebuf_r+0xc>
 8009f52:	89a3      	ldrh	r3, [r4, #12]
 8009f54:	6020      	str	r0, [r4, #0]
 8009f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f5a:	81a3      	strh	r3, [r4, #12]
 8009f5c:	9b00      	ldr	r3, [sp, #0]
 8009f5e:	6120      	str	r0, [r4, #16]
 8009f60:	6163      	str	r3, [r4, #20]
 8009f62:	9b01      	ldr	r3, [sp, #4]
 8009f64:	b15b      	cbz	r3, 8009f7e <__smakebuf_r+0x70>
 8009f66:	4630      	mov	r0, r6
 8009f68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f6c:	f000 f81e 	bl	8009fac <_isatty_r>
 8009f70:	b128      	cbz	r0, 8009f7e <__smakebuf_r+0x70>
 8009f72:	89a3      	ldrh	r3, [r4, #12]
 8009f74:	f023 0303 	bic.w	r3, r3, #3
 8009f78:	f043 0301 	orr.w	r3, r3, #1
 8009f7c:	81a3      	strh	r3, [r4, #12]
 8009f7e:	89a3      	ldrh	r3, [r4, #12]
 8009f80:	431d      	orrs	r5, r3
 8009f82:	81a5      	strh	r5, [r4, #12]
 8009f84:	e7cf      	b.n	8009f26 <__smakebuf_r+0x18>
	...

08009f88 <_fstat_r>:
 8009f88:	b538      	push	{r3, r4, r5, lr}
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	4d06      	ldr	r5, [pc, #24]	; (8009fa8 <_fstat_r+0x20>)
 8009f8e:	4604      	mov	r4, r0
 8009f90:	4608      	mov	r0, r1
 8009f92:	4611      	mov	r1, r2
 8009f94:	602b      	str	r3, [r5, #0]
 8009f96:	f7f7 fb4b 	bl	8001630 <_fstat>
 8009f9a:	1c43      	adds	r3, r0, #1
 8009f9c:	d102      	bne.n	8009fa4 <_fstat_r+0x1c>
 8009f9e:	682b      	ldr	r3, [r5, #0]
 8009fa0:	b103      	cbz	r3, 8009fa4 <_fstat_r+0x1c>
 8009fa2:	6023      	str	r3, [r4, #0]
 8009fa4:	bd38      	pop	{r3, r4, r5, pc}
 8009fa6:	bf00      	nop
 8009fa8:	20000580 	.word	0x20000580

08009fac <_isatty_r>:
 8009fac:	b538      	push	{r3, r4, r5, lr}
 8009fae:	2300      	movs	r3, #0
 8009fb0:	4d05      	ldr	r5, [pc, #20]	; (8009fc8 <_isatty_r+0x1c>)
 8009fb2:	4604      	mov	r4, r0
 8009fb4:	4608      	mov	r0, r1
 8009fb6:	602b      	str	r3, [r5, #0]
 8009fb8:	f7f7 fb49 	bl	800164e <_isatty>
 8009fbc:	1c43      	adds	r3, r0, #1
 8009fbe:	d102      	bne.n	8009fc6 <_isatty_r+0x1a>
 8009fc0:	682b      	ldr	r3, [r5, #0]
 8009fc2:	b103      	cbz	r3, 8009fc6 <_isatty_r+0x1a>
 8009fc4:	6023      	str	r3, [r4, #0]
 8009fc6:	bd38      	pop	{r3, r4, r5, pc}
 8009fc8:	20000580 	.word	0x20000580

08009fcc <_init>:
 8009fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fce:	bf00      	nop
 8009fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fd2:	bc08      	pop	{r3}
 8009fd4:	469e      	mov	lr, r3
 8009fd6:	4770      	bx	lr

08009fd8 <_fini>:
 8009fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fda:	bf00      	nop
 8009fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fde:	bc08      	pop	{r3}
 8009fe0:	469e      	mov	lr, r3
 8009fe2:	4770      	bx	lr
